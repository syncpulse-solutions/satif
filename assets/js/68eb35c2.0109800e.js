"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3487],{344:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>d,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"standardizers/remote_standardizer","title":"Remote Standardizer","description":"\ud83d\udea7 WORK IN PROGRESS: The RemoteStandardizer is currently under development and the cloud API service is not yet available. This documentation serves as a reference for the intended functionality.","source":"@site/docs/standardizers/remote_standardizer.md","sourceDirName":"standardizers","slug":"/standardizers/remote_standardizer","permalink":"/satif/docs/standardizers/remote_standardizer","draft":false,"unlisted":false,"editUrl":"https://github.com/syncpulse-solutions/satif/tree/main/docs/docs/standardizers/remote_standardizer.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"AI CSV Standardizer","permalink":"/satif/docs/standardizers/ai_csv_standardizer"},"next":{"title":"AI XLSX Standardizer","permalink":"/satif/docs/standardizers/ai_xslx_standardizer"}}');var r=i(4848),t=i(8453);const d={sidebar_position:2},a="Remote Standardizer",l={},o=[{value:"Benefits",id:"benefits",level:2},{value:"How It Works",id:"how-it-works",level:2},{value:"Configuration",id:"configuration",level:2},{value:"Environment Variables",id:"environment-variables",level:3},{value:"Custom HTTP Client",id:"custom-http-client",level:3},{value:"Basic Usage",id:"basic-usage",level:2},{value:"Parameters",id:"parameters",level:2},{value:"<code>standardize()</code> Method",id:"standardize-method",level:3},{value:"File Handling",id:"file-handling",level:2},{value:"Single Files",id:"single-files",level:3},{value:"Multiple Files",id:"multiple-files",level:3},{value:"ZIP Archives",id:"zip-archives",level:3},{value:"Error Handling",id:"error-handling",level:2},{value:"Current Status",id:"current-status",level:2}];function c(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"remote-standardizer",children:"Remote Standardizer"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"\ud83d\udea7 WORK IN PROGRESS: The RemoteStandardizer is currently under development and the cloud API service is not yet available. This documentation serves as a reference for the intended functionality."})}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"RemoteStandardizer"})," is an asynchronous component designed to interact with a remote Satif-compliant standardization API. It enables offloading standardization tasks to a cloud service, providing benefits such as avoiding local AI dependencies and running standardization as background tasks with progress tracking."]}),"\n",(0,r.jsx)(n.h2,{id:"benefits",children:"Benefits"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Reduced Dependencies"}),": Avoid installing heavy AI dependencies locally"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Background Processing"}),": Run standardization as asynchronous background tasks"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Progress Tracking"}),": Monitor standardization progress in real-time via Server-Sent Events"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Scalability"}),": Leverage cloud infrastructure for processing large datasets"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Run History"}),": Track and manage previous standardization runs"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"how-it-works",children:"How It Works"}),"\n",(0,r.jsx)(n.p,{children:"The RemoteStandardizer follows a workflow pattern:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"File Upload"}),": Packages input files (compressing multiple files into ZIP archives)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Run Creation"}),": Initiates a standardization run on the remote API"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Progress Monitoring"}),": Tracks progress via Server-Sent Events (SSE) streaming"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Result Download"}),": Retrieves the resulting SDIF file once processing completes"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"configuration",children:"Configuration"}),"\n",(0,r.jsx)(n.p,{children:"The standardizer requires configuration of the remote API endpoints:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from satif_sdk.standardizers import RemoteStandardizer\n\n# Using environment variables (recommended)\nstandardizer = RemoteStandardizer()\n\n# Or explicit configuration\nstandardizer = RemoteStandardizer(\n    base_url="https://api.satif.example.com",\n    api_key="your-api-key",\n    timeout=600.0\n)\n'})}),"\n",(0,r.jsx)(n.h3,{id:"environment-variables",children:"Environment Variables"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"SATIF_REMOTE_BASE_URL"}),": Base URL of the remote API"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"SATIF_REMOTE_API_KEY"}),": API key for authentication"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"custom-http-client",children:"Custom HTTP Client"}),"\n",(0,r.jsxs)(n.p,{children:["For advanced configurations, provide a custom ",(0,r.jsx)(n.code,{children:"httpx.AsyncClient"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"import httpx\nfrom satif_sdk.standardizers import RemoteStandardizer\n\ncustom_client = httpx.AsyncClient(\n    timeout=httpx.Timeout(900.0),\n    limits=httpx.Limits(max_connections=10)\n)\n\nstandardizer = RemoteStandardizer(client=custom_client)\n"})}),"\n",(0,r.jsx)(n.h2,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'import asyncio\nfrom satif_sdk.standardizers import RemoteStandardizer\n\nasync def main():\n    standardizer = RemoteStandardizer()\n\n    result = await standardizer.standardize(\n        datasource="data.csv",\n        output_path="output.sdif",\n        options={"custom_config": "value"},\n        log_sse_events=True\n    )\n\n    print(f"Standardization completed: {result.output_path}")\n\nasyncio.run(main())\n'})}),"\n",(0,r.jsx)(n.h2,{id:"parameters",children:"Parameters"}),"\n",(0,r.jsxs)(n.h3,{id:"standardize-method",children:[(0,r.jsx)(n.code,{children:"standardize()"})," Method"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"datasource"})}),": Path or list of paths to input files"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"output_path"})}),": Path where the resulting SDIF file will be saved"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"options"})}),": Optional processing configuration sent to the remote API"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"log_sse_events"})}),": Whether to log Server-Sent Events messages (default: ",(0,r.jsx)(n.code,{children:"False"}),")"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"overwrite"})}),": Whether to overwrite existing output files (default: ",(0,r.jsx)(n.code,{children:"False"}),")"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"file-handling",children:"File Handling"}),"\n",(0,r.jsx)(n.h3,{id:"single-files",children:"Single Files"}),"\n",(0,r.jsx)(n.p,{children:"Individual files are uploaded directly with their original filename and MIME type."}),"\n",(0,r.jsx)(n.h3,{id:"multiple-files",children:"Multiple Files"}),"\n",(0,r.jsx)(n.p,{children:"Multiple input files are automatically compressed into a ZIP archive before upload, reducing transfer time and simplifying remote processing."}),"\n",(0,r.jsx)(n.h3,{id:"zip-archives",children:"ZIP Archives"}),"\n",(0,r.jsx)(n.p,{children:"ZIP files in the datasource are handled as single entities and processed by the remote service."}),"\n",(0,r.jsx)(n.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,r.jsx)(n.p,{children:"The standardizer provides comprehensive error handling for:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Network Issues"}),": HTTP timeouts, connection failures"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Authentication"}),": Invalid API keys or authorization failures"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"File Operations"}),": Missing files, permission issues, disk space"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Remote Processing"}),": Failed standardization runs, invalid responses"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Download Issues"}),": Corrupted or incomplete result files"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Common exceptions:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"ValueError"}),": Invalid datasource or configuration"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"FileNotFoundError"}),": Input files don't exist"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"FileExistsError"}),": Output exists and overwrite is False"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"RuntimeError"}),": Remote API or processing failures"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"httpx.HTTPStatusError"}),": HTTP-level errors"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"current-status",children:"Current Status"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"The RemoteStandardizer is not yet production-ready:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Cloud API service infrastructure is under development"}),"\n",(0,r.jsx)(n.li,{children:"API endpoints and authentication methods may change"}),"\n",(0,r.jsx)(n.li,{children:"Documentation reflects intended functionality"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"For immediate standardization needs, use the local standardizers:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"/satif/docs/standardizers/ai_standardizer",children:(0,r.jsx)(n.code,{children:"AIStandardizer"})})," for AI-powered processing"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>d,x:()=>a});var s=i(6540);const r={},t=s.createContext(r);function d(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:d(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);