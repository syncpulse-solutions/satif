"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3183],{3790:(e,s,r)=>{r.r(s),r.d(s,{assets:()=>c,contentTitle:()=>i,default:()=>h,frontMatter:()=>o,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"api_reference/satif_core/transformers/base","title":"satif_core.transformers.base","description":"Transformer Objects","source":"@site/docs/api_reference/satif_core/transformers/base.md","sourceDirName":"api_reference/satif_core/transformers","slug":"/api_reference/satif_core/transformers/base","permalink":"/satif/docs/api_reference/satif_core/transformers/base","draft":false,"unlisted":false,"editUrl":"https://github.com/syncpulse-solutions/satif/tree/main/docs/docs/api_reference/satif_core/transformers/base.md","tags":[],"version":"current","frontMatter":{"sidebar_label":"base","title":"satif_core.transformers.base"},"sidebar":"tutorialSidebar","previous":{"title":"base","permalink":"/satif/docs/api_reference/satif_core/transformation_builders/base"},"next":{"title":"types","permalink":"/satif/docs/api_reference/satif_core/types"}}');var t=r(4848),a=r(8453);const o={sidebar_label:"base",title:"satif_core.transformers.base"},i=void 0,c={},d=[{value:"Transformer Objects",id:"transformer-objects",level:2},{value:"transform",id:"transform",level:4},{value:"export",id:"export",level:4}];function l(e){const s={blockquote:"blockquote",code:"code",h2:"h2",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.h2,{id:"transformer-objects",children:"Transformer Objects"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-python",children:"class Transformer(ABC)\n"})}),"\n",(0,t.jsxs)(s.blockquote,{children:["\n",(0,t.jsx)(s.p,{children:"Abstract Base Class for data transformation."}),"\n",(0,t.jsx)(s.p,{children:"This class defines the interface for all transformer implementations.\nTransformers are responsible for taking SDIF (Standardized Data Interchange Format)\ndata as input, performing some transformation logic, and producing output data,\nwhich can then be exported to various file formats."}),"\n",(0,t.jsxs)(s.p,{children:["Concrete implementations of this class should provide logic for the ",(0,t.jsx)(s.code,{children:"transform"}),"\nand ",(0,t.jsx)(s.code,{children:"_export_data"})," methods."]}),"\n"]}),"\n",(0,t.jsx)(s.h4,{id:"transform",children:"transform"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-python",children:"@abstractmethod\ndef transform(\n    sdif: Union[SDIFPath, List[SDIFPath], SDIFDatabase, Dict[str, SDIFPath]]\n) -> Dict[str, Any]\n"})}),"\n",(0,t.jsxs)(s.blockquote,{children:["\n",(0,t.jsx)(s.p,{children:"Transforms input SDIF data into an in-memory representation."}),"\n",(0,t.jsx)(s.p,{children:"This method should be implemented by subclasses to define the core\ntransformation logic. It takes one or more SDIF sources, processes them,\nand returns a dictionary where keys are intended output filenames and\nvalues are the data to be written to these files (e.g., pandas DataFrames,\ndictionaries, lists, strings, or bytes)."}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Arguments"}),":"]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"sdif"})," - The SDIF data source(s) to transform. This can be:\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:["\n",(0,t.jsx)(s.p,{children:"A single SDIF file path (str or Path)."}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:["\n",(0,t.jsx)(s.p,{children:"A list of SDIF file paths."}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:["\n",(0,t.jsxs)(s.p,{children:["An ",(0,t.jsx)(s.code,{children:"SDIFDatabase"})," instance."]}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:["\n",(0,t.jsx)(s.p,{children:"A dictionary mapping custom schema names (str) to SDIF file paths."}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Returns"}),":"]}),"\n",(0,t.jsx)(s.p,{children:'A dictionary where keys are relative output filenames (e.g., "data.csv")\nand values are the corresponding transformed data objects.'}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Raises"}),":"]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"NotImplementedError"})," - If the method is not implemented by a subclass."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"FileNotFoundError"})," - If any input SDIF file path does not exist."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"ValueError"})," - If input arguments are invalid or incompatible."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"Exception"})," - Subclasses may raise specific exceptions related to\ntransformation errors (e.g., database errors, data processing issues)."]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(s.h4,{id:"export",children:"export"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-python",children:'def export(sdif: Union[SDIFPath, List[SDIFPath], SDIFDatabase, Dict[str,\n                                                                    SDIFPath]],\n           output_path: Union[str, Path] = Path("."),\n           zip_archive: bool = False) -> Path\n'})}),"\n",(0,t.jsxs)(s.blockquote,{children:["\n",(0,t.jsx)(s.p,{children:"Transforms SDIF data and exports the results to files."}),"\n",(0,t.jsxs)(s.p,{children:["This is a convenience method that orchestrates the transformation and\nexport process. It first calls the ",(0,t.jsx)(s.code,{children:"transform"})," method to get the\nin-memory transformed data, and then calls the ",(0,t.jsx)(s.code,{children:"_export_data"})," method\nto write this data to the specified output path."]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Arguments"}),":"]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:["\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.code,{children:"sdif"})," - The SDIF data source(s) to transform. Passed directly to the\n",(0,t.jsx)(s.code,{children:"transform"})," method. See ",(0,t.jsx)(s.code,{children:"transform"})," method docstring for details."]}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:["\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.code,{children:"output_path"})," - The base path for output. Passed directly to the\n",(0,t.jsx)(s.code,{children:"_export_data"})," method. See ",(0,t.jsx)(s.code,{children:"_export_data"})," method\ndocstring for details. Defaults to the current directory."]}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:["\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.code,{children:"zip_archive"})," - If True, package all output files into a single ZIP archive.\nPassed directly to the ",(0,t.jsx)(s.code,{children:"_export_data"})," method.\nDefaults to False."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Returns"}),":"]}),"\n",(0,t.jsxs)(s.p,{children:["The absolute path to the created output file or directory.\nSee ",(0,t.jsx)(s.code,{children:"_export_data"})," method return value for more details."]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Raises"}),":"]}),"\n",(0,t.jsxs)(s.p,{children:["This method can raise any exceptions thrown by ",(0,t.jsx)(s.code,{children:"transform"})," or\n",(0,t.jsx)(s.code,{children:"_export_data"})," methods (e.g., FileNotFoundError, ValueError, IOError)."]}),"\n"]})]})}function h(e={}){const{wrapper:s}={...(0,a.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},8453:(e,s,r)=>{r.d(s,{R:()=>o,x:()=>i});var n=r(6540);const t={},a=n.createContext(t);function o(e){const s=n.useContext(a);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function i(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),n.createElement(a.Provider,{value:s},e.children)}}}]);