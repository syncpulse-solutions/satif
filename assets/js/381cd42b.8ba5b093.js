"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5898],{8273:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>t,default:()=>h,frontMatter:()=>d,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"api_reference/sdif_db/database","title":"sdif_db.database","description":"SDIFDatabase Objects","source":"@site/docs/api_reference/sdif_db/database.md","sourceDirName":"api_reference/sdif_db","slug":"/api_reference/sdif_db/database","permalink":"/satif/docs/api_reference/sdif_db/database","draft":false,"unlisted":false,"editUrl":"https://github.com/syncpulse-solutions/satif/tree/main/docs/docs/api_reference/sdif_db/database.md","tags":[],"version":"current","frontMatter":{"sidebar_label":"database","title":"sdif_db.database"},"sidebar":"tutorialSidebar","previous":{"title":"utils","permalink":"/satif/docs/api_reference/satif_sdk/utils"},"next":{"title":"schema","permalink":"/satif/docs/api_reference/sdif_db/schema"}}');var l=s(4848),r=s(8453);const d={sidebar_label:"database",title:"sdif_db.database"},t=void 0,a={},c=[{value:"SDIFDatabase Objects",id:"sdifdatabase-objects",level:2},{value:"__init__",id:"__init__",level:4},{value:"add_source",id:"add_source",level:4},{value:"create_table",id:"create_table",level:4},{value:"insert_data",id:"insert_data",level:4},{value:"add_object",id:"add_object",level:4},{value:"add_media",id:"add_media",level:4},{value:"add_semantic_link",id:"add_semantic_link",level:4},{value:"close",id:"close",level:4},{value:"__enter__",id:"__enter__",level:4},{value:"__exit__",id:"__exit__",level:4},{value:"__del__",id:"__del__",level:4},{value:"get_properties",id:"get_properties",level:4},{value:"list_sources",id:"list_sources",level:4},{value:"list_tables",id:"list_tables",level:4},{value:"get_table_metadata",id:"get_table_metadata",level:4},{value:"read_table",id:"read_table",level:4},{value:"drop_table",id:"drop_table",level:4},{value:"list_objects",id:"list_objects",level:4},{value:"get_object",id:"get_object",level:4},{value:"list_media",id:"list_media",level:4},{value:"get_media",id:"get_media",level:4},{value:"list_semantic_links",id:"list_semantic_links",level:4},{value:"get_schema",id:"get_schema",level:4},{value:"get_sample_analysis",id:"get_sample_analysis",level:4},{value:"query",id:"query",level:4},{value:"write_dataframe",id:"write_dataframe",level:4}];function o(e){const n={blockquote:"blockquote",code:"code",h2:"h2",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.h2,{id:"sdifdatabase-objects",children:"SDIFDatabase Objects"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"class SDIFDatabase()\n"})}),"\n",(0,l.jsx)(n.h4,{id:"__init__",children:"__init__"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'def __init__(path: Union[str, Path],\n             overwrite: bool = False,\n             read_only: bool = False,\n             schema_name: str = "db1")\n'})}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsx)(n.p,{children:"Initialize the SDIFDatabase."}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"path"})," - Path to the SDIF SQLite file."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"overwrite"})," - If True, overwrite the file if it exists (only applies if read_only=False)."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"read_only"})," - If True, open the database in read-only mode. Will raise error if file doesn't exist."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"schema_name"}),' - Schema name to use when the database is attached in a connection. Default: "db1"']}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"add_source",children:"add_source"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"def add_source(file_name: str,\n               file_type: str,\n               description: Optional[str] = None) -> int\n"})}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsx)(n.p,{children:"Add a source to the SDIF file."}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"file_name"})," - The name of the original file"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"file_type"})," - The type of the original file (csv, xlsx, json, etc.)"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"description"})," - Optional description of the source"]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Returns"}),":"]}),"\n",(0,l.jsx)(n.p,{children:"The source_id of the inserted source"}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"create_table",children:"create_table"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'def create_table(table_name: str,\n                 columns: Dict[str, Dict[str, Any]],\n                 source_id: int,\n                 description: Optional[str] = None,\n                 original_identifier: Optional[str] = None,\n                 if_exists: str = "fail") -> str\n'})}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsx)(n.p,{children:"Create a data table in the SDIF file and registers its metadata.\nHandles conflicts if a table with the same name already exists."}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"table_name"})," - The name of the table to create (must not start with 'sdif_')"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"columns"})," - Dict mapping column names to their properties."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"Example"}),' - {"col_name": {"type": "TEXT", "not_null": True, "description": "...", "original_column_name": "...", "original_format": "..."}}\nSupported properties: type (SQLite type), not_null (bool), primary_key (bool),\nforeign_key ({"table": "target_table", "column": "target_col"}),\ndescription (str), original_column_name (str), original_format (str).']}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"source_id"})," - The source_id reference."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"description"})," - Optional description of the table for sdif_tables_metadata."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"original_identifier"})," - Optional original identifier for sdif_tables_metadata."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"if_exists"})," - Strategy to handle pre-existing table:\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:'"fail" (default): Raise ValueError if table exists.'}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:'"replace": Drop existing table and create anew.'}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:'"add": Create the new table with a unique suffixed name (e.g., table_name_1).'}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Returns"}),":"]}),"\n",(0,l.jsx)(n.p,{children:"The actual name of the table created in the database (could be suffixed)."}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Raises"}),":"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"PermissionError"})," - If database is read-only."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"ValueError"})," - If table_name is invalid, columns are empty, source_id is invalid,\nor if table exists and if_exists='fail', or invalid if_exists value."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"sqlite3.Error"})," - For underlying database errors."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"columns"}),"0 - If 'add' fails to find a unique name."]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"insert_data",children:"insert_data"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"def insert_data(table_name: str, data: List[Dict[str, Any]])\n"})}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsx)(n.p,{children:"Insert data into a table. Assumes table has been created via create_table."}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"table_name"})," - The name of the table"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"data"})," - List of dictionaries mapping column names to values"]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"add_object",children:"add_object"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"def add_object(object_name: str,\n               json_data: Any,\n               source_id: int,\n               description: Optional[str] = None,\n               schema_hint: Optional[Dict] = None)\n"})}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsx)(n.p,{children:"Add a JSON object to the SDIF file."}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"object_name"})," - A unique name for the object"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"json_data"})," - The data to store (will be converted to JSON string)"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"source_id"})," - The source_id reference"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"description"})," - Optional description"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"schema_hint"})," - Optional JSON schema (as dict, will be stored as JSON string)"]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"add_media",children:"add_media"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"def add_media(media_name: str,\n              media_data: bytes,\n              media_type: str,\n              source_id: int,\n              description: Optional[str] = None,\n              original_format: Optional[str] = None,\n              technical_metadata: Optional[Dict] = None)\n"})}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsx)(n.p,{children:"Add binary media data to the SDIF file."}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"media_name"})," - A unique name for the media"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"media_data"})," - The binary data (must be bytes)"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"media_type"})," - The type of media (image, audio, video, binary)"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"source_id"})," - The source_id reference"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"description"})," - Optional description"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"original_format"})," - Optional format (png, jpeg, etc.)"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"technical_metadata"})," - Optional technical metadata (as dict, stored as JSON string)"]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"add_semantic_link",children:"add_semantic_link"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"def add_semantic_link(link_type: str,\n                      from_element_type: str,\n                      from_element_spec: Dict,\n                      to_element_type: str,\n                      to_element_spec: Dict,\n                      description: Optional[str] = None)\n"})}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsx)(n.p,{children:"Add a semantic link between elements."}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"link_type"})," - The type of link (annotation, reference, logical_foreign_key)"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"from_element_type"})," - Type of source element ('table', 'column', 'object', 'media', 'json_path', 'source')"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"from_element_spec"})," - Specification of the source element (as dict, stored as JSON string)"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"to_element_type"})," - Type of target element ('table', 'column', 'object', 'media', 'json_path', 'source')"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"to_element_spec"})," - Specification of the target element (as dict, stored as JSON string)"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"description"})," - Optional description"]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"close",children:"close"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"def close()\n"})}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsx)(n.p,{children:"Close the database connection."}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"__enter__",children:"__enter__"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"def __enter__()\n"})}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsx)(n.p,{children:"Context manager enter method."}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Returns"}),":"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"self"})," - The database object"]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"__exit__",children:"__exit__"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"def __exit__(exc_type, exc_val, exc_tb)\n"})}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsx)(n.p,{children:"Context manager exit method."}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"exc_type"})," - Exception type"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"exc_val"})," - Exception value"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"exc_tb"})," - Exception traceback"]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"__del__",children:"__del__"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"def __del__()\n"})}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsxs)(n.p,{children:["Ensure connection is closed when object is garbage collected\nNote: ",(0,l.jsx)(n.strong,{children:"del"})," can be unreliable, using context manager is better."]}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"get_properties",children:"get_properties"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"def get_properties() -> Optional[Dict[str, Any]]\n"})}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsx)(n.p,{children:"Get the global properties from sdif_properties."}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"list_sources",children:"list_sources"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"def list_sources() -> List[Dict[str, Any]]\n"})}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsx)(n.p,{children:"List all sources from sdif_sources."}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"list_tables",children:"list_tables"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"def list_tables() -> List[str]\n"})}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsx)(n.p,{children:"List the names of all user data tables registered in metadata."}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"get_table_metadata",children:"get_table_metadata"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"def get_table_metadata(table_name: str) -> Optional[Dict[str, Any]]\n"})}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsx)(n.p,{children:"Get metadata for a specific user table from SDIF metadata tables."}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"read_table",children:"read_table"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"def read_table(table_name: str) -> pd.DataFrame\n"})}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsx)(n.p,{children:"Read a user data table into a pandas DataFrame."}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"table_name"})," - The name of the user data table to read."]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Returns"}),":"]}),"\n",(0,l.jsx)(n.p,{children:"A pandas DataFrame containing the table data."}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Raises"}),":"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"ValueError"})," - If the table does not exist physically in the database."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"sqlite3.Error"})," - If there's an issue reading from the database."]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"drop_table",children:"drop_table"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"def drop_table(table_name: str)\n"})}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsx)(n.p,{children:"Drops a table and its associated metadata."}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"list_objects",children:"list_objects"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"def list_objects() -> List[str]\n"})}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsx)(n.p,{children:"List the names of all stored JSON objects."}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"get_object",children:"get_object"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"def get_object(object_name: str,\n               parse_json: bool = True) -> Optional[Dict[str, Any]]\n"})}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsx)(n.p,{children:"Retrieve a stored JSON object and its metadata."}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"object_name"})," - The name of the object to retrieve."]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"parse_json"})," - If True (default), parse json_data and schema_hint strings into Python objects.\nIf False, return them as raw strings."]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Returns"}),":"]}),"\n",(0,l.jsx)(n.p,{children:"A dictionary containing the object data and metadata, or None if the object doesn't exist.\n'json_data' and 'schema_hint' keys will contain parsed objects or strings based on parse_json flag."}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Raises"}),":"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"ValueError"})," - If parsing fails when parse_json is True."]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"list_media",children:"list_media"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"def list_media() -> List[str]\n"})}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsx)(n.p,{children:"List the names of all stored media items."}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"get_media",children:"get_media"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"def get_media(media_name: str,\n              parse_json: bool = True) -> Optional[Dict[str, Any]]\n"})}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsx)(n.p,{children:"Retrieve stored media data and its metadata."}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"media_name"})," - The name of the media item to retrieve."]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"parse_json"})," - If True (default), parse technical_metadata string into Python object.\nIf False, return it as a raw string."]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Returns"}),":"]}),"\n",(0,l.jsx)(n.p,{children:"A dictionary containing the media data ('media_data' key as bytes)\nand its metadata, or None if the media item doesn't exist.\n'technical_metadata' key will contain parsed object or string based on parse_json flag."}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Raises"}),":"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"ValueError"})," - If parsing fails when parse_json is True."]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"list_semantic_links",children:"list_semantic_links"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"def list_semantic_links(parse_json: bool = True) -> List[Dict[str, Any]]\n"})}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsx)(n.p,{children:"List all semantic links."}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"parse_json"})," - If True (default), parse from/to_element_spec strings into Python objects.\nIf False, return them as raw strings."]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Returns"}),":"]}),"\n",(0,l.jsx)(n.p,{children:"A list of dictionaries, each representing a semantic link.\n'from_element_spec' and 'to_element_spec' keys will contain parsed objects or strings."}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Raises"}),":"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"ValueError"})," - If parsing fails when parse_json is True."]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"get_schema",children:"get_schema"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"def get_schema() -> Dict[str, Any]\n"})}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsx)(n.p,{children:"Retrieves the complete structural schema of the SDIF database."}),"\n",(0,l.jsx)(n.p,{children:"This includes global properties, sources, detailed table schemas (columns, types,\nconstraints, metadata), object metadata (excluding data), media metadata\n(excluding data), and semantic links."}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Returns"}),":"]}),"\n",(0,l.jsx)(n.p,{children:"A dictionary representing the database schema. Structure:\n{"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:'"sdif_properties"'})," - { ... },"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:'"sources"'})," - [ { ... } ],"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:'"tables"'})," - {"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:'"table_name"'})," - {"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:'"metadata"'})," - { ... }, // From sdif_tables_metadata"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:'"columns"'})," - [ { name, sqlite_type, not_null, primary_key, // From PRAGMA\ndescription, original_data_format // From sdif_columns_metadata\n}, ... ],"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:'"foreign_keys"'})," - [ { from_column, target_table, target_column, on_update, on_delete, match }, ... ] // From PRAGMA\n}, ...\n},"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:'"objects"'})," - {"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:'"object_name"'})," - { source_id, description, schema_hint }, ... // Parsed schema_hint\n},"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:'"media"'})," - {"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:'"sources"'}),"0 - { source_id, media_type, description, original_format, technical_metadata }, ... // Parsed tech meta\n},"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:'"sources"'}),"1 - [ { ... } ] // Parsed specs\n}"]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Raises"}),":"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:'"sources"'}),"2 - If there are issues querying the database."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:'"sources"'}),"3 - If inconsistencies are found (e.g., invalid JSON in metadata)."]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"get_sample_analysis",children:"get_sample_analysis"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"def get_sample_analysis(num_sample_rows: int = 5,\n                        top_n_common_values: int = 10,\n                        include_objects: bool = False,\n                        include_media: bool = False) -> Dict[str, Any]\n"})}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsx)(n.p,{children:"Provides a sample of data and basic statistical analysis for tables\nwithin the SDIF database, intended to give a better understanding\nof the data content beyond just the schema."}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"num_sample_rows"})," - The number of random rows to sample from each table."]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"top_n_common_values"})," - The number of most frequent distinct values to report per column."]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"include_objects"})," - If True, includes a list of object names and descriptions."]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"include_media"})," - If True, includes a list of media names and descriptions."]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Returns"}),":"]}),"\n",(0,l.jsx)(n.p,{children:"A dictionary containing samples and analysis. Structure:\n{"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:'"tables"'})," - {"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:'"table_name"'})," - {"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:'"row_count"'})," - int, // From metadata"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:'"sample_rows"'})," - [ {col1: val1, ...}, ... ], // List of sample row dicts"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:'"column_analysis"'})," - {"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:'"column_name"'})," - {"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"top_n_common_values"}),"0 - str, // From PRAGMA in get_schema (or re-query)"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"top_n_common_values"}),"1 - str, // Pandas inferred type"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"top_n_common_values"}),"2 - float,"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"top_n_common_values"}),"3 - int,"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"top_n_common_values"}),"4 - bool,"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"top_n_common_values"}),"5 - bool, # Basic check"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"top_n_common_values"}),"6 - [ [value, count], ... ], // Top N"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"top_n_common_values"}),"7 - { // Only if is_numeric"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"top_n_common_values"}),"8 - float/int,"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"top_n_common_values"}),"9 - float/int,"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"include_objects"}),"0 - float,"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"include_objects"}),"1 - float,"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"include_objects"}),"2 - float,"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"include_objects"}),"3 - float, # 25th percentile"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"include_objects"}),"4 - float, # 75th percentile\n}\n}, ...\n}\n}, ...\n},"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"include_objects"}),"5 - { // Optional, based on include_objects"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"include_objects"}),"6 - int,"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"include_objects"}),'7 - [ {"name": str, "description": str, "source_id": int }, ... ]\n},']}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"include_objects"}),"8 - { // Optional, based on include_media"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"include_objects"}),"6 - int,"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"include_objects"}),'7 - [ {"name": str, "description": str, "media_type": str, "source_id": int }, ... ]\n}\n}']}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Raises"}),":"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"include_media"}),"1 - If database querying fails."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"include_media"}),"2 - If table listed in metadata cannot be read."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"include_media"}),"3 - For unexpected errors during analysis."]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"query",children:"query"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'def query(\n    plain_sql: str,\n    return_format: str = "dataframe"\n) -> Union[pd.DataFrame, List[Dict[str, Any]]]\n'})}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsx)(n.p,{children:"Executes a read-only SQL query string against the SDIF database."}),"\n",(0,l.jsx)(n.p,{children:"This method allows flexible querying using raw SQL SELECT statements.\nIt includes checks to prevent modification queries (INSERT, UPDATE, DELETE, etc.)\nand potentially harmful PRAGMA/ATTACH commands, ensuring the database\nstate is not altered by the query. This is suitable for use cases\nwhere an automated agent (like an AI) generates queries for analysis\nor transformation planning, but should not modify the source data."}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"plain_sql"})," - The raw SQL SELECT query string to execute.\nNo parameter binding is performed; the string is executed as is."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"return_format"})," - The desired format for the results.\nOptions:\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:'"dataframe" (default): Returns a pandas DataFrame.'}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:'"dict": Returns a list of dictionaries (one per row).'}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Returns"}),":"]}),"\n",(0,l.jsx)(n.p,{children:"The query results in the specified format (pandas DataFrame or list of dicts)."}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Raises"}),":"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"PermissionError"})," - If the query appears to be non-SELECT or contains\ndisallowed keywords (e.g., UPDATE, PRAGMA, ATTACH, INSERT)."]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"sqlite3.Error"})," - If any database error occurs during query execution."]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"ValueError"})," - If an invalid ",(0,l.jsx)(n.code,{children:"return_format"})," is specified."]}),"\n",(0,l.jsxs)(n.p,{children:["Safety Note:\nThis method executes the provided SQL string directly after performing\nkeyword checks to prevent modifications. While these checks block common\nmodification commands, using the SDIFDatabase in read-only mode\n(",(0,l.jsx)(n.code,{children:"read_only=True"}),") provides the strongest guarantee against unintended\ndata changes at the database level."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"write_dataframe",children:"write_dataframe"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'def write_dataframe(df: pd.DataFrame,\n                    table_name: str,\n                    source_id: int,\n                    description: Optional[str] = None,\n                    original_identifier: Optional[str] = None,\n                    if_exists: str = "fail",\n                    columns_metadata: Optional[Dict[str, Dict[str,\n                                                              Any]]] = None)\n'})}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsx)(n.p,{children:"Writes a pandas DataFrame to a new table in the SDIF database.\nHandles table creation, metadata registration, and data insertion."}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"df"})," - The pandas DataFrame to write."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"table_name"})," - The name for the new table."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"source_id"})," - The ID of the source for this data."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"description"})," - Optional description for the table."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"original_identifier"})," - Optional original identifier for the table (e.g., sheet name)."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"if_exists"})," - Behavior if the table already exists ('fail', 'replace', 'append')."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"columns_metadata"}),' - Optional. A dictionary where keys are final column names\nand values are dicts like {"description": "...", "original_column_name": "..."}.\nThis metadata is used during table creation.']}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(o,{...e})}):o(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>d,x:()=>t});var i=s(6540);const l={},r=i.createContext(l);function d(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:d(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);