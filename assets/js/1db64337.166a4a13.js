"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8413],{2883:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"overview","title":"Overview","description":"SATIF is an AI toolkit for simplifying and automating the transformation of ANY input files into ANY output files.","source":"@site/docs/overview.md","sourceDirName":".","slug":"/overview","permalink":"/satif/docs/overview","draft":false,"unlisted":false,"editUrl":"https://github.com/syncpulse-solutions/satif/tree/main/docs/docs/overview.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","next":{"title":"Core Concepts","permalink":"/satif/docs/core-concepts"}}');var r=n(4848),s=n(8453);const a={sidebar_position:1},o="Overview",l={},d=[{value:"Core Architecture",id:"core-architecture",level:2},{value:"SDIF: The Intermediate Format",id:"sdif-the-intermediate-format",level:2},{value:"Workflow",id:"workflow",level:2},{value:"Key Capabilities",id:"key-capabilities",level:2}];function c(e){const t={a:"a",blockquote:"blockquote",h1:"h1",h2:"h2",header:"header",li:"li",mermaid:"mermaid",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"overview",children:"Overview"})}),"\n",(0,r.jsxs)(t.blockquote,{children:["\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.strong,{children:"SATIF is an AI toolkit for simplifying and automating the transformation of ANY input files into ANY output files."})}),"\n"]}),"\n",(0,r.jsx)(t.h2,{id:"core-architecture",children:"Core Architecture"}),"\n",(0,r.jsx)(t.p,{children:"SATIF utilizes a two-layer architecture:"}),"\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Standardization Layer"}),": Ingests heterogeneous source files (CSV, Excel, PDF, XML, etc.) and transforms them into SDIF, a structured intermediate format."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Transformation Layer"}),": Applies business logic to the standardized data to generate the target output files, with transformation code either written manually or generated by AI."]}),"\n"]}),"\n",(0,r.jsx)(t.mermaid,{value:'flowchart LR\n    Start(Datasource Files) --\x3e StdExec{"Standardization Executor"}\n\n    subgraph StdLayer [Standardization Layer]\n        direction LR\n        StdExec --\x3e SdifStd[("SDIF File")]\n    end\n\n    SdifStd --\x3e TxExec{"Transformation Executor"}\n\n    subgraph TxLayer [Transformation Layer]\n        direction LR\n        TxExec --\x3e End(Output Files)\n    end\n\n    SdifSchema["(optional) sdif_schema"]\n    SdifSchema -.-> StdExec\n\n    %% Refined Dark Mode Style\n    classDef default fill:#3a3a3a,color:#dddddd,stroke-width:1px;\n    classDef executorNode fill:#4a4a88,stroke:#aaccaa,color:#eeeeff;\n    classDef sdifNode fill:#886a4a,stroke:#ffccaa,color:#ffffee;\n    classDef ioNode fill:#555555,stroke:#aaaaaa,color:#dddddd;\n    classDef layerSubgraph fill:#2f2f2f,stroke:#666666,color:#cccccc;\n    classDef schemaNode fill:#88884a,stroke:#ffffaa,color:#ffffee;\n\n    class Start,End ioNode;\n    class StdExec,TxExec executorNode;\n    class SdifStd sdifNode;\n    class SdifSchema schemaNode;\n    class StdLayer,TxLayer layerSubgraph;\n    style SdifStd stroke-width:2px;'}),"\n",(0,r.jsx)(t.h2,{id:"sdif-the-intermediate-format",children:"SDIF: The Intermediate Format"}),"\n",(0,r.jsx)(t.p,{children:"SDIF (Stantardized Data Interoperable Format) is the standardized SQLite representation that:"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["Stores a ",(0,r.jsx)(t.a,{href:"/satif/docs/terminology",children:"Datasource"})," as structured tables alongside JSON objects and binary media"]}),"\n",(0,r.jsx)(t.li,{children:"Maintains rich metadata about data origins, structure, and relationships"}),"\n",(0,r.jsx)(t.li,{children:"Provides direct SQL queryability for complex transformations"}),"\n",(0,r.jsx)(t.li,{children:"Creates a consistent interface between standardization and transformation"}),"\n"]}),"\n",(0,r.jsx)(t.h2,{id:"workflow",children:"Workflow"}),"\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"BUILD"}),": Generate transformation code via AI based on example inputs/outputs and instructions"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"RUN"}),": Execute the full pipeline (standardization \u2192 transformation) on new inputs"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"REFINE"}),": Iteratively improve the pipeline through feedback and error handling"]}),"\n"]}),"\n",(0,r.jsx)(t.mermaid,{value:'flowchart TD\n    classDef buildStyle fill:#334466, color:#FFFFFF, stroke:#A9A9A9, stroke-width:2px\n    classDef runStyle fill:#336633, color:#FFFFFF, stroke:#A9A9A9, stroke-width:2px\n    classDef refineStyle fill:#663333, color:#FFFFFF, stroke:#A9A9A9, stroke-width:2px\n    classDef artifactStyle fill:#222222, color:#FFFFFF, stroke:#A9A9A9, stroke-width:1px\n    classDef ioStyle fill:#444444, color:#FFFFFF, stroke:#A9A9A9\n\n    subgraph Inputs\n        UserInput["User Input (Examples, NL)"]:::ioStyle\n        Datasource["Datasource (Files)"]:::ioStyle\n    end\n\n    subgraph SATIF_Cycles [SATIF System Cycles]\n        direction LR\n        BUILD["BUILD Cycle (Code Generation)"]:::buildStyle\n        RUN["RUN Cycle (Pipeline Execution)"]:::runStyle\n        Refine["Refinement Cycle"]:::refineStyle\n    end\n\n    subgraph Outputs\n        GeneratedArtifacts["Generated Code Artifacts<br/>(.py)"]:::artifactStyle\n        OutputFiles["Output Files"]:::ioStyle\n    end\n\n    UserInput -- Provides Specs --\x3e BUILD\n    Datasource -- Processed During --\x3e RUN\n\n    BUILD -- Produces --\x3e GeneratedArtifacts\n    GeneratedArtifacts -- Consumed By --\x3e RUN\n    GeneratedArtifacts -- Updated By --\x3e Refine\n\n    RUN -- Produces --\x3e OutputFiles\n    RUN -- Provides Feedback --\x3e Refine'}),"\n",(0,r.jsx)(t.p,{children:"SATIF eliminates the need to write custom parsing logic, letting you focus on your business transformation requirements."}),"\n",(0,r.jsx)(t.h2,{id:"key-capabilities",children:"Key Capabilities"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Any Format Support"}),": Process virtually any input, even challenging unstructured content (PDFs, complex Excel sheets)"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"AI-Powered Code Generation"}),": Automatically generate transformation code from examples and natural language instructions"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Robust Schema Enforcement"}),": Handle input data drift and schema inconsistencies through configurable validation"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"SQL-Based Data Processing"}),": Query and manipulate all data using SQL"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Decoupled Processing Stages"}),": Standardize once, transform many times with different logic"]}),"\n"]})]})}function u(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>o});var i=n(6540);const r={},s=i.createContext(r);function a(e){const t=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),i.createElement(s.Provider,{value:t},e.children)}}}]);