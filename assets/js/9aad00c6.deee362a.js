"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[917],{8453:(e,n,i)=>{i.d(n,{R:()=>t,x:()=>d});var s=i(6540);const a={},r=s.createContext(a);function t(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:t(e.components),s.createElement(r.Provider,{value:n},e.children)}},9528:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>d,default:()=>h,frontMatter:()=>t,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"sdif_database","title":"SDIF Database","description":"The SDIFDatabase is a component for creating, managing, and interacting with SDIF (.sqlite) files. It provides a comprehensive API for storing structured tabular data, JSON objects, binary media, and semantic relationships of a datasource in a single SQLite-based file.","source":"@site/docs/sdif_database.md","sourceDirName":".","slug":"/sdif_database","permalink":"/satif/docs/sdif_database","draft":false,"unlisted":false,"editUrl":"https://github.com/syncpulse-solutions/satif/tree/main/docs/docs/sdif_database.md","tags":[],"version":"current","sidebarPosition":7,"frontMatter":{"sidebar_position":7},"sidebar":"tutorialSidebar","previous":{"title":"CodeAdapter (WIP)","permalink":"/satif/docs/adapters/code_adapter"},"next":{"title":"Comparators","permalink":"/satif/docs/comparators"}}');var a=i(4848),r=i(8453);const t={sidebar_position:7},d="SDIF Database",l={},c=[{value:"1. Basic Usage",id:"1-basic-usage",level:2},{value:"2. Database Initialization",id:"2-database-initialization",level:2},{value:"3. Adding Data",id:"3-adding-data",level:2},{value:"3.1 Adding a Data Source",id:"31-adding-a-data-source",level:3},{value:"3.2 Creating Tables",id:"32-creating-tables",level:3},{value:"3.3 Inserting Data",id:"33-inserting-data",level:3},{value:"3.4 Writing DataFrames Directly",id:"34-writing-dataframes-directly",level:3},{value:"3.5 Adding JSON Objects",id:"35-adding-json-objects",level:3},{value:"3.6 Adding Binary Media",id:"36-adding-binary-media",level:3},{value:"3.7 Adding Semantic Links",id:"37-adding-semantic-links",level:3},{value:"4. Reading Data",id:"4-reading-data",level:2},{value:"4.1 Reading Tables",id:"41-reading-tables",level:3},{value:"4.2 Querying with SQL",id:"42-querying-with-sql",level:3},{value:"4.3 Retrieving JSON Objects",id:"43-retrieving-json-objects",level:3},{value:"4.4 Retrieving Binary Media",id:"44-retrieving-binary-media",level:3},{value:"5. Metadata and Analysis",id:"5-metadata-and-analysis",level:2},{value:"5.1 Listing Resources",id:"51-listing-resources",level:3},{value:"5.2 Getting Schema Information",id:"52-getting-schema-information",level:3},{value:"5.3 Data Sampling and Analysis",id:"53-data-sampling-and-analysis",level:3},{value:"6. Error Handling",id:"6-error-handling",level:2},{value:"7. Database Lifecycle Management",id:"7-database-lifecycle-management",level:2},{value:"7.1 Opening and Closing",id:"71-opening-and-closing",level:3},{value:"7.2 Modifications to Existing Data",id:"72-modifications-to-existing-data",level:3}];function o(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"sdif-database",children:"SDIF Database"})}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"SDIFDatabase"})," is a component for creating, managing, and interacting with SDIF (.sqlite) files. It provides a comprehensive API for storing structured tabular data, JSON objects, binary media, and semantic relationships of a datasource in a single SQLite-based file."]}),"\n",(0,a.jsx)(n.h2,{id:"1-basic-usage",children:"1. Basic Usage"}),"\n",(0,a.jsxs)(n.p,{children:["The simplest way to use ",(0,a.jsx)(n.code,{children:"SDIFDatabase"})," is through the context manager pattern:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'from sdif_db import SDIFDatabase\nfrom pathlib import Path\nimport pandas as pd\n\n# Creating a new SDIF database\nwith SDIFDatabase(path="my_dataset.sdif", overwrite=True) as db:\n    # Add a data source\n    source_id = db.add_source(file_name="original_data.csv", file_type="csv",\n                              description="Sales data from Q1 2023")\n\n    # Create a table with your data\n    df = pd.DataFrame({\n        "id": [1, 2, 3],\n        "name": ["Product A", "Product B", "Product C"],\n        "price": [19.99, 24.99, 15.50]\n    })\n\n    # Write the data to an SDIF table\n    db.write_dataframe(df=df, table_name="products", source_id=source_id,\n                       description="Product catalog")\n\n# Reading from an existing SDIF database\nwith SDIFDatabase(path="my_dataset.sdif", read_only=True) as db:\n    # Read a table into a DataFrame\n    products_df = db.read_table("products")\n\n    # Execute a custom SQL query\n    query_result = db.query("SELECT * FROM products WHERE price < 20")\n\n    # Get the database schema\n    schema = db.get_schema()\n'})}),"\n",(0,a.jsx)(n.h2,{id:"2-database-initialization",children:"2. Database Initialization"}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"SDIFDatabase"})," constructor accepts parameters to control how the database is opened and initialized."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'from sdif_db import SDIFDatabase\nfrom pathlib import Path\n\n# Create or open an existing SDIF file\ndb = SDIFDatabase(\n    path="data.sdif",              # Path to the SDIF SQLite file (str or Path)\n    overwrite=False,               # If True, overwrite the file if it exists\n    read_only=False,               # If True, open in read-only mode\n    schema_name="db1"              # Schema name when attached in connections\n)\n'})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsxs)(n.strong,{children:[(0,a.jsx)(n.code,{children:"path"}),":"]})," The path to the SDIF SQLite file (string or ",(0,a.jsx)(n.code,{children:"Path"}),")."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsxs)(n.strong,{children:[(0,a.jsx)(n.code,{children:"overwrite"}),":"]})," If ",(0,a.jsx)(n.code,{children:"True"}),", overwrite the file if it exists. Ignored when ",(0,a.jsx)(n.code,{children:"read_only=True"}),". Default: ",(0,a.jsx)(n.code,{children:"False"}),"."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsxs)(n.strong,{children:[(0,a.jsx)(n.code,{children:"read_only"}),":"]})," If ",(0,a.jsx)(n.code,{children:"True"}),", open in read-only mode. Will raise an error if the file doesn't exist. Default: ",(0,a.jsx)(n.code,{children:"False"}),"."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsxs)(n.strong,{children:[(0,a.jsx)(n.code,{children:"schema_name"}),":"]})," Schema name to use when the database is attached in a connection. Default: ",(0,a.jsx)(n.code,{children:'"db1"'}),"."]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Initialization Behavior:"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["If opened in ",(0,a.jsx)(n.strong,{children:"read-only mode"})," (",(0,a.jsx)(n.code,{children:"read_only=True"}),"), the file must exist, and no write operations are allowed."]}),"\n",(0,a.jsxs)(n.li,{children:["If opened in ",(0,a.jsx)(n.strong,{children:"read-write mode"})," (default) and the file exists:\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["With ",(0,a.jsx)(n.code,{children:"overwrite=True"}),": The existing file will be deleted and a new one created."]}),"\n",(0,a.jsxs)(n.li,{children:["With ",(0,a.jsx)(n.code,{children:"overwrite=False"}),": The existing file will be opened for reading and writing."]}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["If opened in ",(0,a.jsx)(n.strong,{children:"read-write mode"})," and the file doesn't exist, a new file will be created with the required SDIF metadata tables."]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"3-adding-data",children:"3. Adding Data"}),"\n",(0,a.jsx)(n.h3,{id:"31-adding-a-data-source",children:"3.1 Adding a Data Source"}),"\n",(0,a.jsx)(n.p,{children:"Before adding any data to an SDIF file, you must register a source."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'source_id = db.add_source(\n    file_name="sales_2023.xlsx",   # Original file name\n    file_type="xlsx",              # Original file type\n    description="Sales data for 2023 fiscal year"  # Optional description\n)\n'})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsxs)(n.strong,{children:[(0,a.jsx)(n.code,{children:"file_name"}),":"]})," The name of the original file."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsxs)(n.strong,{children:[(0,a.jsx)(n.code,{children:"file_type"}),":"]}),' The type of the original file (e.g., "csv", "xlsx", "json").']}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsxs)(n.strong,{children:[(0,a.jsx)(n.code,{children:"description"}),":"]})," (Optional) Description of the source."]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["The ",(0,a.jsx)(n.code,{children:"source_id"})," of the inserted source, which you'll need when adding tables, objects, or media."]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"32-creating-tables",children:"3.2 Creating Tables"}),"\n",(0,a.jsx)(n.p,{children:"Create a table structure to store tabular data:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'# Define columns with types and properties\ncolumns = {\n    "id": {"type": "INTEGER", "primary_key": True, "description": "Unique identifier"},\n    "name": {"type": "TEXT", "not_null": True, "description": "Product name"},\n    "category": {"type": "TEXT", "description": "Product category"},\n    "price": {"type": "REAL", "description": "Current price in USD"},\n    "in_stock": {"type": "INTEGER", "description": "Whether item is in stock", "original_column_name": "available"}\n}\n\nactual_table_name = db.create_table(\n    table_name="products",         # Desired table name\n    columns=columns,               # Column definitions\n    source_id=source_id,           # Source ID from add_source\n    description="Product catalog",  # Optional description\n    original_identifier="Products", # Optional original identifier (e.g., sheet name)\n    if_exists="fail"               # Behavior if table exists: \'fail\', \'replace\', or \'add\'\n)\n'})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsxs)(n.strong,{children:[(0,a.jsx)(n.code,{children:"table_name"}),":"]}),' The name for the table (must not start with "sdif_").']}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsxs)(n.strong,{children:[(0,a.jsx)(n.code,{children:"columns"}),":"]})," Dictionary mapping column names to their properties."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsxs)(n.strong,{children:[(0,a.jsx)(n.code,{children:"source_id"}),":"]})," The source ID (from ",(0,a.jsx)(n.code,{children:"add_source"}),")."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsxs)(n.strong,{children:[(0,a.jsx)(n.code,{children:"description"}),":"]})," (Optional) Description of the table."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsxs)(n.strong,{children:[(0,a.jsx)(n.code,{children:"original_identifier"}),":"]})," (Optional) Original identifier for the table."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsxs)(n.strong,{children:[(0,a.jsx)(n.code,{children:"if_exists"}),":"]})," Strategy for handling table name conflicts:\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:'"fail"'})," (default): Raise an error if table exists."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:'"replace"'}),": Drop existing table and recreate."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:'"add"'}),': Create a new table with a unique suffixed name (e.g., "table_name_1").']}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Column Definition Properties:"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsxs)(n.strong,{children:[(0,a.jsx)(n.code,{children:"type"}),":"]}),' SQLite type (e.g., "TEXT", "INTEGER", "REAL", "BLOB", "NUMERIC").']}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsxs)(n.strong,{children:[(0,a.jsx)(n.code,{children:"primary_key"}),":"]})," (Optional) If ",(0,a.jsx)(n.code,{children:"True"}),", column is part of primary key."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsxs)(n.strong,{children:[(0,a.jsx)(n.code,{children:"not_null"}),":"]})," (Optional) If ",(0,a.jsx)(n.code,{children:"True"}),", column cannot contain NULL values."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsxs)(n.strong,{children:[(0,a.jsx)(n.code,{children:"unique"}),":"]})," (Optional) If ",(0,a.jsx)(n.code,{children:"True"}),", column values must be unique."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsxs)(n.strong,{children:[(0,a.jsx)(n.code,{children:"foreign_key"}),":"]})," (Optional) Dictionary with keys:\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:'"table"'}),": Target table name"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:'"column"'}),": Target column name"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:'"on_delete"'}),': (Optional) Action on delete (e.g., "CASCADE", "SET NULL")']}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:'"on_update"'}),": (Optional) Action on update"]}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsxs)(n.strong,{children:[(0,a.jsx)(n.code,{children:"description"}),":"]})," (Optional) Column description."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsxs)(n.strong,{children:[(0,a.jsx)(n.code,{children:"original_column_name"}),":"]})," (Optional) Original name of the column."]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["The actual name of the created table (which might be different if ",(0,a.jsx)(n.code,{children:'if_exists="add"'})," and a conflict occurred)."]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"33-inserting-data",children:"3.3 Inserting Data"}),"\n",(0,a.jsx)(n.p,{children:"Insert data into a previously created table:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'# Prepare data as a list of dictionaries\ndata = [\n    {"id": 1, "name": "Widget A", "category": "Widgets", "price": 19.99, "in_stock": 1},\n    {"id": 2, "name": "Gadget B", "category": "Gadgets", "price": 24.99, "in_stock": 1},\n    {"id": 3, "name": "Thingamajig C", "category": "Misc", "price": 15.50, "in_stock": 0}\n]\n\n# Insert the data\ndb.insert_data(table_name="products", data=data)\n'})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsxs)(n.strong,{children:[(0,a.jsx)(n.code,{children:"table_name"}),":"]})," The name of the target table."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsxs)(n.strong,{children:[(0,a.jsx)(n.code,{children:"data"}),":"]})," List of dictionaries mapping column names to values."]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"34-writing-dataframes-directly",children:"3.4 Writing DataFrames Directly"}),"\n",(0,a.jsxs)(n.p,{children:["When working with pandas DataFrames, you can use ",(0,a.jsx)(n.code,{children:"write_dataframe"})," to handle table creation and data insertion in one step:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'import pandas as pd\n\n# Create a DataFrame\ndf = pd.DataFrame({\n    "id": [1, 2, 3],\n    "name": ["Product A", "Product B", "Product C"],\n    "price": [19.99, 24.99, 15.50],\n    "in_stock": [True, True, False]\n})\n\n# Write the DataFrame to a table\ndb.write_dataframe(\n    df=df,                         # DataFrame to write\n    table_name="products",         # Desired table name\n    source_id=source_id,           # Source ID\n    description="Product catalog", # Optional description\n    if_exists="fail",              # Behavior if table exists: \'fail\', \'replace\', \'append\'\n    columns_metadata={             # Optional metadata for columns\n        "name": {"description": "Product name"},\n        "price": {"description": "Price in USD", "original_column_name": "unit_price"}\n    }\n)\n'})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsxs)(n.strong,{children:[(0,a.jsx)(n.code,{children:"df"}),":"]})," The pandas DataFrame to write."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsxs)(n.strong,{children:[(0,a.jsx)(n.code,{children:"table_name"}),":"]})," The name for the new table."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsxs)(n.strong,{children:[(0,a.jsx)(n.code,{children:"source_id"}),":"]})," The source ID (from ",(0,a.jsx)(n.code,{children:"add_source"}),")."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsxs)(n.strong,{children:[(0,a.jsx)(n.code,{children:"description"}),":"]})," (Optional) Description for the table."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsxs)(n.strong,{children:[(0,a.jsx)(n.code,{children:"original_identifier"}),":"]})," (Optional) Original identifier for the table."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsxs)(n.strong,{children:[(0,a.jsx)(n.code,{children:"if_exists"}),":"]})," Behavior if the table already exists:\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:'"fail"'})," (default): Raise an error if table exists."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:'"replace"'}),": Drop existing table and recreate."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:'"append"'}),": Append data to existing table (not fully implemented yet)."]}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsxs)(n.strong,{children:[(0,a.jsx)(n.code,{children:"columns_metadata"}),":"]})," (Optional) Dictionary with column metadata."]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"35-adding-json-objects",children:"3.5 Adding JSON Objects"}),"\n",(0,a.jsx)(n.p,{children:"Store structured JSON data:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'# Define a JSON object\nconfig = {\n    "settings": {\n        "theme": "dark",\n        "notifications": True,\n        "refresh_interval": 60\n    },\n    "permissions": ["read", "write", "admin"]\n}\n\n# Add the JSON object to the SDIF file\ndb.add_object(\n    object_name="app_config",      # Unique name\n    json_data=config,              # JSON-serializable data\n    source_id=source_id,           # Source ID\n    description="Application configuration", # Optional description\n    schema_hint={                  # Optional JSON schema\n        "type": "object",\n        "properties": {\n            "settings": {"type": "object"},\n            "permissions": {"type": "array", "items": {"type": "string"}}\n        }\n    }\n)\n'})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsxs)(n.strong,{children:[(0,a.jsx)(n.code,{children:"object_name"}),":"]})," A unique name for the object."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsxs)(n.strong,{children:[(0,a.jsx)(n.code,{children:"json_data"}),":"]})," The data to store (will be converted to a JSON string)."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsxs)(n.strong,{children:[(0,a.jsx)(n.code,{children:"source_id"}),":"]})," The source ID (from ",(0,a.jsx)(n.code,{children:"add_source"}),")."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsxs)(n.strong,{children:[(0,a.jsx)(n.code,{children:"description"}),":"]})," (Optional) Description of the object."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsxs)(n.strong,{children:[(0,a.jsx)(n.code,{children:"schema_hint"}),":"]})," (Optional) JSON schema as a dictionary."]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"36-adding-binary-media",children:"3.6 Adding Binary Media"}),"\n",(0,a.jsx)(n.p,{children:"Store binary data such as images, audio, or any other binary content:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'# Read binary data\nwith open("logo.png", "rb") as f:\n    image_data = f.read()\n\n# Add the media to the SDIF file\ndb.add_media(\n    media_name="company_logo",     # Unique name\n    media_data=image_data,         # Binary data (bytes)\n    media_type="image",            # Type: image, audio, video, binary\n    source_id=source_id,           # Source ID\n    description="Company logo image", # Optional description\n    original_format="png",         # Optional format information\n    technical_metadata={           # Optional technical details\n        "width": 512,\n        "height": 512,\n        "color_mode": "RGB"\n    }\n)\n'})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsxs)(n.strong,{children:[(0,a.jsx)(n.code,{children:"media_name"}),":"]})," A unique name for the media."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsxs)(n.strong,{children:[(0,a.jsx)(n.code,{children:"media_data"}),":"]})," The binary data (must be bytes)."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsxs)(n.strong,{children:[(0,a.jsx)(n.code,{children:"media_type"}),":"]}),' The type of media (e.g., "image", "audio", "video", "binary").']}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsxs)(n.strong,{children:[(0,a.jsx)(n.code,{children:"source_id"}),":"]})," The source ID (from ",(0,a.jsx)(n.code,{children:"add_source"}),")."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsxs)(n.strong,{children:[(0,a.jsx)(n.code,{children:"description"}),":"]})," (Optional) Description of the media."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsxs)(n.strong,{children:[(0,a.jsx)(n.code,{children:"original_format"}),":"]}),' (Optional) Original format (e.g., "png", "mp3").']}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsxs)(n.strong,{children:[(0,a.jsx)(n.code,{children:"technical_metadata"}),":"]})," (Optional) Technical metadata as a dictionary."]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"37-adding-semantic-links",children:"3.7 Adding Semantic Links"}),"\n",(0,a.jsx)(n.p,{children:"Create semantic relationships between elements:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'# Create a semantic link (e.g., relating a product to its image)\ndb.add_semantic_link(\n    link_type="reference",         # Type of link\n    from_element_type="table",     # Source element type\n    from_element_spec={            # Source element specification\n        "table": "products",\n        "column": "id",\n        "value": 1\n    },\n    to_element_type="media",       # Target element type\n    to_element_spec={              # Target element specification\n        "media_name": "product_1_image"\n    },\n    description="Product image reference" # Optional description\n)\n'})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsxs)(n.strong,{children:[(0,a.jsx)(n.code,{children:"link_type"}),":"]}),' The type of link (e.g., "annotation", "reference", "logical_foreign_key").']}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsxs)(n.strong,{children:[(0,a.jsx)(n.code,{children:"from_element_type"}),":"]}),' Type of source element (one of "table", "column", "object", "media", "json_path", "source").']}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsxs)(n.strong,{children:[(0,a.jsx)(n.code,{children:"from_element_spec"}),":"]})," Specification of the source element (as a dictionary)."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsxs)(n.strong,{children:[(0,a.jsx)(n.code,{children:"to_element_type"}),":"]}),' Type of target element (one of "table", "column", "object", "media", "json_path", "source").']}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsxs)(n.strong,{children:[(0,a.jsx)(n.code,{children:"to_element_spec"}),":"]})," Specification of the target element (as a dictionary)."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsxs)(n.strong,{children:[(0,a.jsx)(n.code,{children:"description"}),":"]})," (Optional) Description of the semantic link."]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"4-reading-data",children:"4. Reading Data"}),"\n",(0,a.jsx)(n.h3,{id:"41-reading-tables",children:"4.1 Reading Tables"}),"\n",(0,a.jsx)(n.p,{children:"Read tabular data into a pandas DataFrame:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'# Read an entire table\nproducts_df = db.read_table("products")\n\n# Process the data\nfiltered_products = products_df[products_df["price"] < 20]\n'})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsxs)(n.strong,{children:[(0,a.jsx)(n.code,{children:"table_name"}),":"]})," The name of the table to read."]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"A pandas DataFrame containing the table data."}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"42-querying-with-sql",children:"4.2 Querying with SQL"}),"\n",(0,a.jsx)(n.p,{children:"Execute SQL queries for custom data retrieval:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'# Execute a query and get results as a DataFrame\nresults_df = db.query(\n    plain_sql="SELECT p.name, p.price FROM products p WHERE p.category = \'Widgets\' ORDER BY p.price DESC",\n    return_format="dataframe"  # Options: "dataframe" or "dict"\n)\n\n# Execute a query and get results as a list of dictionaries\nresults_dict = db.query(\n    plain_sql="SELECT COUNT(*) as count, category FROM products GROUP BY category",\n    return_format="dict"\n)\n'})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsxs)(n.strong,{children:[(0,a.jsx)(n.code,{children:"plain_sql"}),":"]})," The SQL query string to execute (SELECT statements only)."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsxs)(n.strong,{children:[(0,a.jsx)(n.code,{children:"return_format"}),":"]})," The desired return format:\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:'"dataframe"'})," (default): Returns a pandas DataFrame."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:'"dict"'}),": Returns a list of dictionary rows."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Results in the specified format (pandas DataFrame or list of dictionaries)."}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Security Note:"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["The ",(0,a.jsx)(n.code,{children:"query"})," method performs checks to ensure only read-only operations are executed, preventing modifications to the database."]}),"\n",(0,a.jsxs)(n.li,{children:["Opening the database in read-only mode (",(0,a.jsx)(n.code,{children:"read_only=True"}),") provides the strongest protection against unintended changes."]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"43-retrieving-json-objects",children:"4.3 Retrieving JSON Objects"}),"\n",(0,a.jsx)(n.p,{children:"Get stored JSON objects:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'# Get and parse an object\napp_config = db.get_object(\n    object_name="app_config",      # Object name\n    parse_json=True                # Parse JSON string to Python object\n)\n\n# Access the data\nif app_config:\n    theme = app_config["json_data"]["settings"]["theme"]\n    permissions = app_config["json_data"]["permissions"]\n'})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsxs)(n.strong,{children:[(0,a.jsx)(n.code,{children:"object_name"}),":"]})," The name of the object to retrieve."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsxs)(n.strong,{children:[(0,a.jsx)(n.code,{children:"parse_json"}),":"]})," If ",(0,a.jsx)(n.code,{children:"True"})," (default), parse the JSON data into Python objects."]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["A dictionary containing object data and metadata, including:\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:'"json_data"'}),": The stored data (parsed if ",(0,a.jsx)(n.code,{children:"parse_json=True"}),")."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:'"source_id"'}),": The source ID."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:'"description"'}),": Object description."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:'"schema_hint"'}),": Schema information (parsed if ",(0,a.jsx)(n.code,{children:"parse_json=True"}),")."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"44-retrieving-binary-media",children:"4.4 Retrieving Binary Media"}),"\n",(0,a.jsx)(n.p,{children:"Get stored binary media:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'# Get media item\nlogo = db.get_media(\n    media_name="company_logo",     # Media name\n    parse_json=True                # Parse technical_metadata JSON\n)\n\n# Use the binary data\nif logo:\n    image_bytes = logo["media_data"]\n    image_format = logo["original_format"]\n    width = logo["technical_metadata"]["width"]\n\n    # Example: save to file\n    with open(f"retrieved_logo.{image_format}", "wb") as f:\n        f.write(image_bytes)\n'})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsxs)(n.strong,{children:[(0,a.jsx)(n.code,{children:"media_name"}),":"]})," The name of the media item to retrieve."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsxs)(n.strong,{children:[(0,a.jsx)(n.code,{children:"parse_json"}),":"]})," If ",(0,a.jsx)(n.code,{children:"True"})," (default), parse the technical metadata into a Python object."]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["A dictionary containing media data and metadata, including:\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:'"media_data"'}),": The binary data (as bytes)."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:'"source_id"'}),": The source ID."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:'"media_type"'}),": Type of media."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:'"description"'}),": Media description."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:'"original_format"'}),": Original format information."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:'"technical_metadata"'}),": Technical metadata (parsed if ",(0,a.jsx)(n.code,{children:"parse_json=True"}),")."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"5-metadata-and-analysis",children:"5. Metadata and Analysis"}),"\n",(0,a.jsx)(n.h3,{id:"51-listing-resources",children:"5.1 Listing Resources"}),"\n",(0,a.jsx)(n.p,{children:"Get information about available resources:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"# List all sources\nsources = db.list_sources()\n\n# List all tables\ntables = db.list_tables()\n\n# List all objects\nobjects = db.list_objects()\n\n# List all media items\nmedia_items = db.list_media()\n\n# List all semantic links\nlinks = db.list_semantic_links()\n"})}),"\n",(0,a.jsx)(n.h3,{id:"52-getting-schema-information",children:"5.2 Getting Schema Information"}),"\n",(0,a.jsx)(n.p,{children:"Retrieve the complete database schema:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'# Get the full database schema\nschema = db.get_schema()\n\n# Access schema components\nsdif_properties = schema["sdif_properties"]\nsources = schema["sources"]\ntable_info = schema["tables"]["products"]\nobjects_info = schema["objects"]\nmedia_info = schema["media"]\nlinks = schema["semantic_links"]\n\n# Example: Get column information for a specific table\ncolumns = schema["tables"]["products"]["columns"]\nforeign_keys = schema["tables"]["products"]["foreign_keys"]\n'})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["A comprehensive dictionary with the complete database structure, including:\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Global properties"}),"\n",(0,a.jsx)(n.li,{children:"Sources"}),"\n",(0,a.jsx)(n.li,{children:"Tables (with columns, types, constraints, metadata)"}),"\n",(0,a.jsx)(n.li,{children:"Objects metadata (excluding actual data)"}),"\n",(0,a.jsx)(n.li,{children:"Media metadata (excluding binary data)"}),"\n",(0,a.jsx)(n.li,{children:"Semantic links"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"53-data-sampling-and-analysis",children:"5.3 Data Sampling and Analysis"}),"\n",(0,a.jsx)(n.p,{children:"Generate statistical analysis of the data:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'# Get sample data and analysis\nanalysis = db.get_sample_analysis(\n    num_sample_rows=5,             # Number of sample rows per table\n    top_n_common_values=10,        # Number of most common values to report\n    include_objects=True,          # Include object metadata\n    include_media=True             # Include media metadata\n)\n\n# Access analysis components\ntables_analysis = analysis["tables"]\nproducts_analysis = analysis["tables"]["products"]\nsample_rows = products_analysis["sample_rows"]\ncolumn_stats = products_analysis["column_analysis"]["price"]\n\n# Check numeric statistics for a column (if available)\nif "numeric_summary" in column_stats:\n    min_price = column_stats["numeric_summary"]["min"]\n    max_price = column_stats["numeric_summary"]["max"]\n    avg_price = column_stats["numeric_summary"]["mean"]\n'})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsxs)(n.strong,{children:[(0,a.jsx)(n.code,{children:"num_sample_rows"}),":"]})," The number of random rows to sample from each table."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsxs)(n.strong,{children:[(0,a.jsx)(n.code,{children:"top_n_common_values"}),":"]})," The number of most frequent distinct values to report per column."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsxs)(n.strong,{children:[(0,a.jsx)(n.code,{children:"include_objects"}),":"]})," If ",(0,a.jsx)(n.code,{children:"True"}),", includes a list of object names and descriptions."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsxs)(n.strong,{children:[(0,a.jsx)(n.code,{children:"include_media"}),":"]})," If ",(0,a.jsx)(n.code,{children:"True"}),", includes a list of media names and descriptions."]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["A detailed analysis dictionary containing:\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Table information (row counts, sample rows)"}),"\n",(0,a.jsx)(n.li,{children:"Column analyses (types, null percentages, distinct counts, common values)"}),"\n",(0,a.jsx)(n.li,{children:"Numeric summaries for numeric columns (min, max, mean, median, etc.)"}),"\n",(0,a.jsx)(n.li,{children:"Optional object and media information"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"6-error-handling",children:"6. Error Handling"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"SDIFDatabase"})," provides specific exceptions for various error conditions:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'from sdif_db import SDIFDatabase\nfrom pathlib import Path\n\ntry:\n    with SDIFDatabase("data.sdif") as db:\n        # Attempt operations\n        source_id = db.add_source("data.csv", "csv")\n        db.create_table("products", {...}, source_id)\n\nexcept FileNotFoundError:\n    # Handle case where file doesn\'t exist in read_only mode\n    print("The SDIF file was not found.")\n\nexcept PermissionError:\n    # Handle permission errors (e.g., writing to read_only database)\n    print("Operation not permitted. Check if database is read-only.")\n\nexcept ValueError as e:\n    # Handle validation errors (e.g., invalid table/column names)\n    print(f"Validation error: {e}")\n\nexcept sqlite3.IntegrityError as e:\n    # Handle integrity constraint violations\n    print(f"Data integrity error: {e}")\n\nexcept sqlite3.Error as e:\n    # Handle other SQLite errors\n    print(f"Database error: {e}")\n\nexcept Exception as e:\n    # Catch other unexpected errors\n    print(f"Unexpected error: {e}")\n    # Potentially log the full stack trace for debugging\n'})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Common Exception Types:"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.code,{children:"FileNotFoundError"})}),": When trying to open a non-existent file in read-only mode."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.code,{children:"PermissionError"})}),": When attempting to write to a read-only database."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.code,{children:"ValueError"})}),": For validation errors in input parameters."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.code,{children:"TypeError"})}),": For type-related errors (e.g., providing bytes where str is expected)."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.code,{children:"sqlite3.IntegrityError"})}),": For constraint violations (e.g., duplicate unique values)."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.code,{children:"sqlite3.OperationalError"})}),": For SQL syntax errors or operational issues."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.code,{children:"sqlite3.Error"})}),": General SQLite database errors."]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"7-database-lifecycle-management",children:"7. Database Lifecycle Management"}),"\n",(0,a.jsx)(n.h3,{id:"71-opening-and-closing",children:"7.1 Opening and Closing"}),"\n",(0,a.jsx)(n.p,{children:"Best practices for managing database connections:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'# Recommended: Using the context manager\nwith SDIFDatabase("data.sdif") as db:\n    # Operations inside the block\n    db.add_source(...)\n    # Connection is automatically closed when leaving the block\n\n# Alternative: Manual opening and closing\ndb = SDIFDatabase("data.sdif")\ntry:\n    # Operations\n    db.add_source(...)\nfinally:\n    # Always close the connection\n    db.close()\n'})}),"\n",(0,a.jsx)(n.h3,{id:"72-modifications-to-existing-data",children:"7.2 Modifications to Existing Data"}),"\n",(0,a.jsx)(n.p,{children:"Handle changes to existing database content:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'# Drop a table and its metadata\ndb.drop_table("outdated_table")\n\n# Replace a table with new data\ndb.create_table("products", columns, source_id, if_exists="replace")\n\n# Update data (using standard SQL)\ndb.query("UPDATE products SET price = price * 1.1 WHERE category = \'Widgets\'")\n'})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(o,{...e})}):o(e)}}}]);