"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9511],{5243:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>t,default:()=>h,frontMatter:()=>l,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"standardizers/csv_standardizer","title":"CSV Standardizer","description":"The CSVStandardizer is a component that transforms CSV files into SDIF. It handles complex CSV parsing scenarios with extensive configuration options for delimiter detection, encoding, header handling, row/column skipping, column renaming, and type inference.","source":"@site/docs/standardizers/csv_standardizer.md","sourceDirName":"standardizers","slug":"/standardizers/csv_standardizer","permalink":"/satif/docs/standardizers/csv_standardizer","draft":false,"unlisted":false,"editUrl":"https://github.com/syncpulse-solutions/satif/tree/main/docs/docs/standardizers/csv_standardizer.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"AI XLSX Standardizer","permalink":"/satif/docs/standardizers/ai_xslx_standardizer"},"next":{"title":"Transformers","permalink":"/satif/docs/transformers"}}');var r=i(4848),a=i(8453);const l={sidebar_position:4},t="CSV Standardizer",d={},o=[{value:"1. Basic Usage",id:"1-basic-usage",level:2},{value:"2. Initialization Parameters",id:"2-initialization-parameters",level:2},{value:"2.1 Core Parsing Parameters",id:"21-core-parsing-parameters",level:3},{value:"2.2 Skip Configuration",id:"22-skip-configuration",level:3},{value:"2.3 Naming and Metadata",id:"23-naming-and-metadata",level:3},{value:"2.4 Column Definitions",id:"24-column-definitions",level:3},{value:"2.5 Per-File Configuration",id:"25-per-file-configuration",level:3},{value:"3. Type Inference",id:"3-type-inference",level:2},{value:"4. Multiple File Handling",id:"4-multiple-file-handling",level:2},{value:"5. Advanced Usage Examples",id:"5-advanced-usage-examples",level:2},{value:"5.1 Auto-detection with Fallbacks",id:"51-auto-detection-with-fallbacks",level:3},{value:"5.2 Skipping Metadata and Comments",id:"52-skipping-metadata-and-comments",level:3},{value:"5.3 Column Selection and Renaming",id:"53-column-selection-and-renaming",level:3},{value:"5.4 Different Configurations for Multiple Files",id:"54-different-configurations-for-multiple-files",level:3},{value:"5.5 Advanced Column Definitions",id:"55-advanced-column-definitions",level:3},{value:"6. Output",id:"6-output",level:2},{value:"7. Error Handling",id:"7-error-handling",level:2},{value:"8. CSV Format Heuristics",id:"8-csv-format-heuristics",level:2},{value:"9. Performance Considerations",id:"9-performance-considerations",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"csv-standardizer",children:"CSV Standardizer"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"CSVStandardizer"})," is a component that transforms CSV files into SDIF. It handles complex CSV parsing scenarios with extensive configuration options for delimiter detection, encoding, header handling, row/column skipping, column renaming, and type inference."]}),"\n",(0,r.jsx)(n.h2,{id:"1-basic-usage",children:"1. Basic Usage"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from satif_sdk.standardizers.csv import CSVStandardizer\nfrom pathlib import Path\n\n# Initialize with default settings\nstandardizer = CSVStandardizer()\n\n# Standardize a single CSV file\nresult = standardizer.standardize(\n    datasource="data.csv",\n    output_path="standardized_data.sdif",\n    overwrite=True\n)\n\nprint(f"Standardization complete. Output at: {result.output_path}")\n'})}),"\n",(0,r.jsx)(n.h2,{id:"2-initialization-parameters",children:"2. Initialization Parameters"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"CSVStandardizer"})," accepts numerous parameters to customize its behavior:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'standardizer = CSVStandardizer(\n    delimiter=",",                # CSV delimiter character\n    encoding="utf-8",             # File encoding\n    has_header=True,              # Whether files have header rows\n    skip_rows=0,                  # Rows to skip\n    skip_columns=None,            # Columns to skip\n    descriptions=None,            # Table descriptions\n    table_names=None,             # Output table names\n    column_definitions=None,      # Column specifications\n    file_configs=None             # Per-file configuration overrides\n)\n'})}),"\n",(0,r.jsx)(n.h3,{id:"21-core-parsing-parameters",children:"2.1 Core Parsing Parameters"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"delimiter"})}),": Character that separates fields in the CSV"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["If ",(0,r.jsx)(n.code,{children:"None"}),", auto-detection is attempted using ",(0,r.jsx)(n.code,{children:"clevercsv.Sniffer"})]}),"\n",(0,r.jsxs)(n.li,{children:["Defaults to ",(0,r.jsx)(n.code,{children:","})," if auto-detection fails"]}),"\n",(0,r.jsxs)(n.li,{children:["Example values: ",(0,r.jsx)(n.code,{children:","}),", ",(0,r.jsx)(n.code,{children:";"}),", ",(0,r.jsx)(n.code,{children:"\\t"}),", ",(0,r.jsx)(n.code,{children:"|"})]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"encoding"})}),": Character encoding of the input files"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["If ",(0,r.jsx)(n.code,{children:"None"}),", auto-detection is attempted using ",(0,r.jsx)(n.code,{children:"charset-normalizer"})]}),"\n",(0,r.jsxs)(n.li,{children:["Defaults to ",(0,r.jsx)(n.code,{children:"utf-8"})," if auto-detection fails"]}),"\n",(0,r.jsxs)(n.li,{children:["Common values: ",(0,r.jsx)(n.code,{children:"utf-8"}),", ",(0,r.jsx)(n.code,{children:"latin-1"}),", ",(0,r.jsx)(n.code,{children:"cp1252"}),", ",(0,r.jsx)(n.code,{children:"utf-16"})]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"has_header"})}),": Whether CSV files have a header row (default: ",(0,r.jsx)(n.code,{children:"True"}),")"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["If ",(0,r.jsx)(n.code,{children:"True"}),", the first non-skipped row is treated as column names"]}),"\n",(0,r.jsxs)(n.li,{children:["If ",(0,r.jsx)(n.code,{children:"False"}),", column names are generated as ",(0,r.jsx)(n.code,{children:"column_0"}),", ",(0,r.jsx)(n.code,{children:"column_1"}),", etc."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"22-skip-configuration",children:"2.2 Skip Configuration"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"skip_rows"})}),": Rows to exclude from processing"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Integer: Skip the first N rows (e.g., ",(0,r.jsx)(n.code,{children:"skip_rows=3"}),")"]}),"\n",(0,r.jsxs)(n.li,{children:["List/Set of integers: Skip specific rows by 0-based index (e.g., ",(0,r.jsx)(n.code,{children:"skip_rows=[0, 5, 10]"}),")"]}),"\n",(0,r.jsxs)(n.li,{children:["Supports negative indices to count from the end (e.g., ",(0,r.jsx)(n.code,{children:"skip_rows=[0, 1, -1]"})," to skip first two rows and last row)"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"skip_columns"})}),": Columns to exclude from processing"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Integer: Skip a specific column by 0-based index (e.g., ",(0,r.jsx)(n.code,{children:"skip_columns=0"}),")"]}),"\n",(0,r.jsxs)(n.li,{children:["String: Skip a column by its name (only if ",(0,r.jsx)(n.code,{children:"has_header=True"}),") (e.g., ",(0,r.jsx)(n.code,{children:'skip_columns="timestamp"'}),")"]}),"\n",(0,r.jsxs)(n.li,{children:["List/Set of integers/strings: Skip multiple columns (e.g., ",(0,r.jsx)(n.code,{children:'skip_columns=["id", 2, "notes"]'}),")"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"23-naming-and-metadata",children:"2.3 Naming and Metadata"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"descriptions"})}),": Descriptions for tables in the SDIF output"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Single string: Same description for all tables"}),"\n",(0,r.jsx)(n.li,{children:"List of strings: One description per input file"}),"\n",(0,r.jsx)(n.li,{children:"Used in the SDIF metadata"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"table_names"})}),": Names for tables in the SDIF output"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Single string: Base name for all tables (will be suffixed with index for multiple files)"}),"\n",(0,r.jsx)(n.li,{children:"List of strings: One name per input file"}),"\n",(0,r.jsxs)(n.li,{children:["If ",(0,r.jsx)(n.code,{children:"None"}),", names are derived from input file names"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"24-column-definitions",children:"2.4 Column Definitions"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"column_definitions"})}),": Explicit column specifications to control output\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["List of column specs:\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'column_definitions=[\n    {"original_identifier": "Customer ID", "final_column_name": "customer_id", "description": "Unique customer identifier"},\n    {"original_identifier": "2", "final_column_name": "purchase_amount", "description": "Amount in USD"}\n]\n'})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["Dictionary mapping table names to column specs:\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'column_definitions={\n    "customers": [\n        {"original_identifier": "ID", "final_column_name": "customer_id"},\n        {"original_identifier": "Name", "final_column_name": "customer_name"}\n    ]\n}\n'})}),"\n"]}),"\n",(0,r.jsx)(n.li,{children:"List of definitions (one per input file)"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"25-per-file-configuration",children:"2.5 Per-File Configuration"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"file_configs"})}),": Overrides defaults for specific files\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Dictionary of configurations (applies to all files):\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'file_configs={\n    "delimiter": ";",\n    "encoding": "latin-1",\n    "has_header": False\n}\n'})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["List of configurations (one per input file):\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'file_configs=[\n    {"delimiter": ",", "encoding": "utf-8"},\n    {"delimiter": ";", "encoding": "latin-1", "skip_rows": 3},\n    None  # Use defaults for third file\n]\n'})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"3-type-inference",children:"3. Type Inference"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"CSVStandardizer"})," automatically infers column data types from a sample of the data:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"INTEGER"}),": If all non-empty values in the sample can be parsed as integers"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"REAL"}),": If all non-empty values in the sample can be parsed as floating-point numbers"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"TEXT"}),": If any value cannot be parsed as a number or if explicitly specified"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"The type inference process:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Examines up to 100 rows (configurable via ",(0,r.jsx)(n.code,{children:"SAMPLE_SIZE"})," constant)"]}),"\n",(0,r.jsx)(n.li,{children:"Initially considers all possible types (INTEGER, REAL, TEXT) for each column"}),"\n",(0,r.jsx)(n.li,{children:"Progressively eliminates types that don't match the data"}),"\n",(0,r.jsx)(n.li,{children:"Follows a type hierarchy: INTEGER > REAL > TEXT (prioritizes more specific types)"}),"\n",(0,r.jsx)(n.li,{children:"Falls back to TEXT if any ambiguity exists"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"4-multiple-file-handling",children:"4. Multiple File Handling"}),"\n",(0,r.jsx)(n.p,{children:"The standardizer can process multiple CSV files into a single SDIF database:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# Process multiple files\nresult = standardizer.standardize(\n    datasource=["customers.csv", "orders.csv", "products.csv"],\n    output_path="combined_data.sdif"\n)\n'})}),"\n",(0,r.jsx)(n.p,{children:"When standardizing multiple files:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Each file becomes a separate table in the SDIF output"}),"\n",(0,r.jsxs)(n.li,{children:["Table names are automatically derived and made unique:\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"First file: Uses the base name"}),"\n",(0,r.jsxs)(n.li,{children:["Subsequent files: Base name with suffix ",(0,r.jsx)(n.code,{children:"_1"}),", ",(0,r.jsx)(n.code,{children:"_2"}),", etc."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["File-specific configurations can be provided via the ",(0,r.jsx)(n.code,{children:"file_configs"})," parameter"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"5-advanced-usage-examples",children:"5. Advanced Usage Examples"}),"\n",(0,r.jsx)(n.h3,{id:"51-auto-detection-with-fallbacks",children:"5.1 Auto-detection with Fallbacks"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# Let the standardizer auto-detect parameters with fallbacks\nstandardizer = CSVStandardizer(\n    delimiter=None,  # Try to auto-detect\n    encoding=None,   # Try to auto-detect\n    has_header=True\n)\n"})}),"\n",(0,r.jsx)(n.h3,{id:"52-skipping-metadata-and-comments",children:"5.2 Skipping Metadata and Comments"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# Skip header metadata and footer rows\nstandardizer = CSVStandardizer(\n    skip_rows=[0, 1, 2, -1, -2],  # Skip first 3 rows and last 2 rows\n)\n\n# Skip metadata rows at the beginning\nstandardizer = CSVStandardizer(\n    skip_rows=5,  # Skip first 5 rows\n)\n"})}),"\n",(0,r.jsx)(n.h3,{id:"53-column-selection-and-renaming",children:"5.3 Column Selection and Renaming"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# Select specific columns and rename them\nstandardizer = CSVStandardizer(\n    column_definitions=[\n        {"original_identifier": "ID", "final_column_name": "customer_id"},\n        {"original_identifier": "First Name", "final_column_name": "first_name"},\n        {"original_identifier": "Last Name", "final_column_name": "last_name"},\n        # Skip other columns by not including them\n    ]\n)\n'})}),"\n",(0,r.jsx)(n.h3,{id:"54-different-configurations-for-multiple-files",children:"5.4 Different Configurations for Multiple Files"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# Configure each file differently\nstandardizer = CSVStandardizer(\n    # File-specific configurations\n    file_configs=[\n        {\n            "delimiter": ",",\n            "encoding": "utf-8",\n            "has_header": True,\n            "skip_rows": 2\n        },\n        {\n            "delimiter": ";",\n            "encoding": "latin-1",\n            "has_header": False\n        }\n    ],\n    # Table names\n    table_names=["customers", "orders"],\n    # Table descriptions\n    descriptions=[\n        "Customer master data",\n        "Order transactions"\n    ]\n)\n\n# Standardize multiple files\nresult = standardizer.standardize(\n    datasource=["customers.csv", "orders.csv"],\n    output_path="data.sdif"\n)\n'})}),"\n",(0,r.jsx)(n.h3,{id:"55-advanced-column-definitions",children:"5.5 Advanced Column Definitions"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# Define columns with descriptions and position-based identifiers\nstandardizer = CSVStandardizer(\n    has_header=False,\n    column_definitions=[\n        {"original_identifier": "0", "final_column_name": "id", "description": "Unique identifier"},\n        {"original_identifier": "1", "final_column_name": "name", "description": "Full name"},\n        {"original_identifier": "3", "final_column_name": "email", "description": "Contact email"}\n        # Note: Column at position 2 is skipped\n    ]\n)\n'})}),"\n",(0,r.jsx)(n.h2,{id:"6-output",children:"6. Output"}),"\n",(0,r.jsxs)(n.p,{children:["The standardization process returns a ",(0,r.jsx)(n.code,{children:"StandardizationResult"})," object with:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"output_path"})}),": Path to the generated SDIF file"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"file_configs"})}),": Configurations used for each processed file"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'result = standardizer.standardize(...)\nprint(f"Output SDIF file: {result.output_path}")\nprint(f"Configurations used: {result.file_configs}")\n'})}),"\n",(0,r.jsx)(n.h2,{id:"7-error-handling",children:"7. Error Handling"}),"\n",(0,r.jsx)(n.p,{children:"The standardizer provides comprehensive error handling:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"FileNotFoundError"})}),": If input files don't exist"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"ValueError"})}),": For invalid parameters or configurations"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"TypeError"})}),": For incorrect argument types"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"UnicodeDecodeError"})}),": For encoding issues"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'try:\n    result = standardizer.standardize(\n        datasource="data.csv",\n        output_path="output.sdif"\n    )\nexcept FileNotFoundError:\n    print("Input file not found")\nexcept ValueError as e:\n    print(f"Invalid parameter: {e}")\nexcept UnicodeDecodeError:\n    print("Encoding issue - try specifying the correct encoding")\n'})}),"\n",(0,r.jsx)(n.h2,{id:"8-csv-format-heuristics",children:"8. CSV Format Heuristics"}),"\n",(0,r.jsx)(n.p,{children:"The standardizer employs several heuristics to handle common CSV format issues:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Blank Line Handling"}),": Blank lines after the initial skip count are automatically skipped"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Mismatched Column Counts"}),": Rows with too few columns have missing values treated as NULL; extra columns are ignored"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Header Name Collisions"}),": Duplicate column names are disambiguated with numeric suffixes"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Case-Insensitive Column Matching"}),": When resolving column names for skipping, falls back to case-insensitive matching"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Name Sanitization"}),": Column names are sanitized for SQL compatibility (replacing special characters, ensuring valid identifiers)"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"9-performance-considerations",children:"9. Performance Considerations"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"For large files with negative skip indices, a preliminary pass is required to count total rows"}),"\n",(0,r.jsx)(n.li,{children:"Type inference uses a configurable sample size (default: 100 rows) to balance accuracy and performance"}),"\n",(0,r.jsx)(n.li,{children:"Automatic encoding and delimiter detection read only small samples from the beginning of files"}),"\n",(0,r.jsx)(n.li,{children:"Memory usage is optimized by processing files row-by-row rather than loading the entire file"}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>l,x:()=>t});var s=i(6540);const r={},a=s.createContext(r);function l(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);