"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2099],{609:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>c,toc:()=>d});const c=JSON.parse('{"id":"api_reference/sdif_db/utils","title":"sdif_db.utils","description":"DBConnectionError Objects","source":"@site/docs/api_reference/sdif_db/utils.md","sourceDirName":"api_reference/sdif_db","slug":"/api_reference/sdif_db/utils","permalink":"/satif/docs/api_reference/sdif_db/utils","draft":false,"unlisted":false,"editUrl":"https://github.com/syncpulse-solutions/satif/tree/main/docs/docs/api_reference/sdif_db/utils.md","tags":[],"version":"current","frontMatter":{"sidebar_label":"utils","title":"sdif_db.utils"},"sidebar":"tutorialSidebar","previous":{"title":"schema","permalink":"/satif/docs/api_reference/sdif_db/schema"},"next":{"title":"RFC","permalink":"/satif/docs/rfc"}}');var t=s(4848),i=s(8453);const o={sidebar_label:"utils",title:"sdif_db.utils"},r=void 0,l={},d=[{value:"DBConnectionError Objects",id:"dbconnectionerror-objects",level:2},{value:"create_db_connection",id:"create_db_connection",level:4},{value:"cleanup_db_connection",id:"cleanup_db_connection",level:4}];function a(e){const n={blockquote:"blockquote",code:"code",h2:"h2",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"dbconnectionerror-objects",children:"DBConnectionError Objects"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"class DBConnectionError(Exception)\n"})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"Exception raised for errors in SDIF database connection."}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"create_db_connection",children:"create_db_connection"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"def create_db_connection(\n    sdif_sources: Dict[str, Union[Path, str]]\n) -> Tuple[sqlite3.Connection, Dict[str, Path]]\n"})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"Creates an SQLite connection and attaches SDIF sources as schemas."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"If one source is provided, connects directly to that file and attaches it\nunder its specified schema name. The main connection will be to the file itself."}),"\n",(0,t.jsx)(n.li,{children:"If multiple sources are provided, creates an in-memory database and attaches\nall sources."}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"sdif_sources"})," - Dictionary mapping schema names to resolved SDIF file paths."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Returns"}),":"]}),"\n",(0,t.jsx)(n.p,{children:"A tuple containing the sqlite3.Connection and a dictionary of\nsuccessfully attached schemas (schema_name: path)."}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Raises"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"DBConnectionError"})," - If no sources are provided, a file is not found,\nor an SQLite error occurs during connection/attachment."]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"cleanup_db_connection",children:"cleanup_db_connection"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"def cleanup_db_connection(conn: Optional[sqlite3.Connection],\n                          attached_schemas: Dict[str, Path],\n                          should_close: bool = True) -> None\n"})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"Cleans up an SQLite connection by detaching schemas and optionally closing it."}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"conn"})," - The sqlite3.Connection to clean up. Can be None."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"attached_schemas"})," - A dictionary of schemas (schema_name: path) that were attached\nand should be detached."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"should_close"})," - Whether to close the connection after detaching schemas."]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>r});var c=s(6540);const t={},i=c.createContext(t);function o(e){const n=c.useContext(i);return c.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),c.createElement(i.Provider,{value:n},e.children)}}}]);