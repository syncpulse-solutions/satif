"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4758],{8453:(e,s,n)=>{n.d(s,{R:()=>t,x:()=>a});var r=n(6540);const c={},i=r.createContext(c);function t(e){const s=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function a(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:t(e.components),r.createElement(i.Provider,{value:s},e.children)}},8639:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>o,contentTitle:()=>a,default:()=>h,frontMatter:()=>t,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"api_reference/satif_sdk/comparators/sdif_schema","title":"satif_sdk.comparators.sdif_schema","description":"SDIFSchemaComparator Objects","source":"@site/docs/api_reference/satif_sdk/comparators/sdif_schema.md","sourceDirName":"api_reference/satif_sdk/comparators","slug":"/api_reference/satif_sdk/comparators/sdif_schema","permalink":"/satif/docs/api_reference/satif_sdk/comparators/sdif_schema","draft":false,"unlisted":false,"editUrl":"https://github.com/syncpulse-solutions/satif/tree/main/docs/docs/api_reference/satif_sdk/comparators/sdif_schema.md","tags":[],"version":"current","frontMatter":{"sidebar_label":"sdif_schema","title":"satif_sdk.comparators.sdif_schema"},"sidebar":"tutorialSidebar","previous":{"title":"sdif","permalink":"/satif/docs/api_reference/satif_sdk/comparators/sdif"},"next":{"title":"csv","permalink":"/satif/docs/api_reference/satif_sdk/representers/csv"}}');var c=n(4848),i=n(8453);const t={sidebar_label:"sdif_schema",title:"satif_sdk.comparators.sdif_schema"},a=void 0,o={},l=[{value:"SDIFSchemaComparator Objects",id:"sdifschemacomparator-objects",level:2},{value:"__init__",id:"__init__",level:4},{value:"compare",id:"compare",level:4},{value:"is_compatible_with",id:"is_compatible_with",level:4}];function d(e){const s={blockquote:"blockquote",code:"code",em:"em",h2:"h2",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)(s.h2,{id:"sdifschemacomparator-objects",children:"SDIFSchemaComparator Objects"}),"\n",(0,c.jsx)(s.pre,{children:(0,c.jsx)(s.code,{className:"language-python",children:"class SDIFSchemaComparator()\n"})}),"\n",(0,c.jsxs)(s.blockquote,{children:["\n",(0,c.jsx)(s.p,{children:"Compares two SDIF structural schemas based on a flexible configuration.\nProvides methods for checking equivalence and compatibility (subset relationship).\nThe input schemas are expected to be the direct output of SDIFDatabase.get_schema()."}),"\n"]}),"\n",(0,c.jsx)(s.h4,{id:"__init__",children:"__init__"}),"\n",(0,c.jsx)(s.pre,{children:(0,c.jsx)(s.code,{className:"language-python",children:"def __init__(config: Optional[SDIFSchemaConfig] = None)\n"})}),"\n",(0,c.jsxs)(s.blockquote,{children:["\n",(0,c.jsx)(s.p,{children:"Initializes the comparator with a specific configuration."}),"\n",(0,c.jsxs)(s.p,{children:[(0,c.jsx)(s.strong,{children:"Arguments"}),":"]}),"\n",(0,c.jsxs)(s.ul,{children:["\n",(0,c.jsxs)(s.li,{children:[(0,c.jsx)(s.code,{children:"config"})," - An SDIFSchemaConfig instance. If None, a default config is used."]}),"\n"]}),"\n"]}),"\n",(0,c.jsx)(s.h4,{id:"compare",children:"compare"}),"\n",(0,c.jsx)(s.pre,{children:(0,c.jsx)(s.code,{className:"language-python",children:"def compare(\n    schema1: Dict[str, Any],\n    schema2: Dict[str, Any],\n    verbose_diff_level: int = 0\n) -> Tuple[bool, Union[List[str], Dict[str, Any]]]\n"})}),"\n",(0,c.jsxs)(s.blockquote,{children:["\n",(0,c.jsx)(s.p,{children:"Compares two structural SDIF schemas."}),"\n",(0,c.jsxs)(s.p,{children:[(0,c.jsx)(s.strong,{children:"Arguments"}),":"]}),"\n",(0,c.jsxs)(s.ul,{children:["\n",(0,c.jsxs)(s.li,{children:["\n",(0,c.jsxs)(s.p,{children:[(0,c.jsx)(s.code,{children:"schema1"})," - The first structural schema (output of SDIFDatabase.get_schema())."]}),"\n"]}),"\n",(0,c.jsxs)(s.li,{children:["\n",(0,c.jsxs)(s.p,{children:[(0,c.jsx)(s.code,{children:"schema2"})," - The second structural schema."]}),"\n"]}),"\n",(0,c.jsxs)(s.li,{children:["\n",(0,c.jsxs)(s.p,{children:[(0,c.jsx)(s.code,{children:"verbose_diff_level"})," - Controls verbosity of the difference report."]}),"\n"]}),"\n",(0,c.jsxs)(s.li,{children:["\n",(0,c.jsxs)(s.p,{children:[(0,c.jsx)(s.code,{children:"0"})," - Returns a summarized list of human-readable differences."]}),"\n"]}),"\n",(0,c.jsxs)(s.li,{children:["\n",(0,c.jsxs)(s.p,{children:[(0,c.jsx)(s.code,{children:"1"})," - Returns the DeepDiff object as a dictionary."]}),"\n"]}),"\n",(0,c.jsxs)(s.li,{children:["\n",(0,c.jsxs)(s.p,{children:[(0,c.jsx)(s.code,{children:"2"})," ",(0,c.jsx)(s.em,{children:"or more"})," - Returns the full DeepDiff object (can be large)."]}),"\n"]}),"\n"]}),"\n",(0,c.jsxs)(s.p,{children:[(0,c.jsx)(s.strong,{children:"Returns"}),":"]}),"\n",(0,c.jsx)(s.p,{children:"A tuple: (are_equivalent: bool, differences: Union[List[str], Dict[str, Any]]).\n'differences' depends on verbose_diff_level."}),"\n"]}),"\n",(0,c.jsx)(s.h4,{id:"is_compatible_with",children:"is_compatible_with"}),"\n",(0,c.jsx)(s.pre,{children:(0,c.jsx)(s.code,{className:"language-python",children:"def is_compatible_with(consumer_schema: Dict[str, Any],\n                       producer_schema: Dict[str, Any]) -> bool\n"})}),"\n",(0,c.jsxs)(s.blockquote,{children:["\n",(0,c.jsx)(s.p,{children:"Checks if the producer_schema is structurally compatible with the consumer_schema,\nbased on the requirements defined in the comparator's configuration (self.config)."}),"\n",(0,c.jsx)(s.p,{children:"Compatibility means the producer_schema provides at least all the structural\nelements and guarantees required by the consumer_schema according to the config.\nThe producer_schema can have additional elements not required by the consumer."}),"\n",(0,c.jsxs)(s.p,{children:[(0,c.jsx)(s.strong,{children:"Arguments"}),":"]}),"\n",(0,c.jsxs)(s.ul,{children:["\n",(0,c.jsxs)(s.li,{children:["\n",(0,c.jsxs)(s.p,{children:[(0,c.jsx)(s.code,{children:"consumer_schema"})," - The schema defining the requirements (consumer's view)."]}),"\n"]}),"\n",(0,c.jsxs)(s.li,{children:["\n",(0,c.jsxs)(s.p,{children:[(0,c.jsx)(s.code,{children:"producer_schema"})," - The schema being checked for compliance (producer's actual schema)."]}),"\n"]}),"\n"]}),"\n",(0,c.jsxs)(s.p,{children:[(0,c.jsx)(s.strong,{children:"Returns"}),":"]}),"\n",(0,c.jsx)(s.p,{children:"True if producer_schema is compatible with consumer_schema's requirements,\nFalse otherwise."}),"\n"]})]})}function h(e={}){const{wrapper:s}={...(0,i.R)(),...e.components};return s?(0,c.jsx)(s,{...e,children:(0,c.jsx)(d,{...e})}):d(e)}}}]);