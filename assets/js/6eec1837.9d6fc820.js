"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6057],{3879:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"api_reference/satif_core/adapters/base","title":"satif_core.adapters.base","description":"Adapter Objects","source":"@site/docs/api_reference/satif_core/adapters/base.md","sourceDirName":"api_reference/satif_core/adapters","slug":"/api_reference/satif_core/adapters/base","permalink":"/satif/docs/api_reference/satif_core/adapters/base","draft":false,"unlisted":false,"editUrl":"https://github.com/syncpulse-solutions/satif/tree/main/docs/docs/api_reference/satif_core/adapters/base.md","tags":[],"version":"current","frontMatter":{"sidebar_label":"base","title":"satif_core.adapters.base"},"sidebar":"tutorialSidebar","previous":{"title":"zip","permalink":"/satif/docs/api_reference/satif_ai/utils/zip"},"next":{"title":"base","permalink":"/satif/docs/api_reference/satif_core/code_executors/base"}}');var a=t(4848),r=t(8453);const i={sidebar_label:"base",title:"satif_core.adapters.base"},o=void 0,c={},d=[{value:"Adapter Objects",id:"adapter-objects",level:2},{value:"adapt",id:"adapt",level:4}];function l(e){const n={blockquote:"blockquote",code:"code",h2:"h2",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h2,{id:"adapter-objects",children:"Adapter Objects"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"class Adapter(ABC)\n"})}),"\n",(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsx)(n.p,{children:"Abstract Base Class for SDIF adapters."}),"\n",(0,a.jsx)(n.p,{children:"An Adapter defines a standardized interface for components that transform\nan input SDIF (Standardized Data Interchange Format) database into an output\nSDIF database. Transformations can include schema modifications, data\nreshaping, content enrichment, or other alterations."}),"\n",(0,a.jsx)(n.p,{children:"The core principle is to take one SDIF representation (specified by its file path)\nand produce another, typically aiming to preserve or appropriately modify\nthe informational content while potentially changing its structure to suit\ndifferent analytical or processing needs."}),"\n",(0,a.jsx)(n.p,{children:"Adapters are expected to operate asynchronously."}),"\n"]}),"\n",(0,a.jsx)(n.h4,{id:"adapt",children:"adapt"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"@abstractmethod\ndef adapt(sdif: SDIFPath) -> Path\n"})}),"\n",(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsx)(n.p,{children:"Adapts an SDIF database file."}),"\n",(0,a.jsx)(n.p,{children:"Implementations of this method are responsible for:"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsx)(n.li,{children:"Accepting the file path to an input SDIF database."}),"\n",(0,a.jsx)(n.li,{children:"Performing a transformation on the data. This typically involves\nreading from the input, processing, and writing to a new SDIF file."}),"\n",(0,a.jsx)(n.li,{children:"Returning the file path to the newly created, adapted SDIF database."}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"The input SDIF file should generally be treated as read-only by the\nadapter's direct logic; modifications should be made to a copy or\na new file to ensure the original input is preserved."}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"sdif"})," - The SDIF data source(s) to adapt. This can be:\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"A single SDIF file path (str or Path)."}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:["An ",(0,a.jsx)(n.code,{children:"SDIFDatabase"})," instance."]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Returns"}),":"]}),"\n",(0,a.jsxs)(n.p,{children:["A ",(0,a.jsx)(n.code,{children:"pathlib.Path"})," object pointing to the newly created and\nadapted SDIF database file."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Raises"}),":"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"FileNotFoundError"})," - If the ",(0,a.jsx)(n.code,{children:"sdif_input_path"})," does not exist, is not a file,\nor is otherwise inaccessible."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"AdapterError"})," - (Or a subclass thereof) For errors specific to the\nadaptation process itself. Concrete implementations may define\nand raise more specific error types."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"Exception"})," - For other unexpected errors encountered during adaptation."]}),"\n"]}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>o});var s=t(6540);const a={},r=s.createContext(a);function i(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);