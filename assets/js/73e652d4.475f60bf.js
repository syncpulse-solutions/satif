"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9709],{8314:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>d,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>o});const i=JSON.parse('{"id":"api_reference/satif_core/satif_ai/standardizers/ai_xlsx","title":"satif_ai.standardizers.ai_xlsx","description":"AIXLSXStandardizer Objects","source":"@site/docs/api_reference/satif_core/satif_ai/standardizers/ai_xlsx.md","sourceDirName":"api_reference/satif_core/satif_ai/standardizers","slug":"/api_reference/satif_core/satif_ai/standardizers/ai_xlsx","permalink":"/satif/docs/api_reference/satif_core/satif_ai/standardizers/ai_xlsx","draft":false,"unlisted":false,"editUrl":"https://github.com/syncpulse-solutions/satif/tree/main/docs/docs/api_reference/satif_core/satif_ai/standardizers/ai_xlsx.md","tags":[],"version":"current","frontMatter":{"sidebar_label":"ai_xlsx","title":"satif_ai.standardizers.ai_xlsx"},"sidebar":"tutorialSidebar","previous":{"title":"ai_csv","permalink":"/satif/docs/api_reference/satif_core/satif_ai/standardizers/ai_csv"},"next":{"title":"transform","permalink":"/satif/docs/api_reference/satif_core/satif_ai/transform"}}');var r=s(4848),t=s(8453);const a={sidebar_label:"ai_xlsx",title:"satif_ai.standardizers.ai_xlsx"},d=void 0,l={},o=[{value:"AIXLSXStandardizer Objects",id:"aixlsxstandardizer-objects",level:2},{value:"__init__",id:"__init__",level:4},{value:"standardize",id:"standardize",level:4}];function c(e){const n={blockquote:"blockquote",code:"code",h2:"h2",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"aixlsxstandardizer-objects",children:"AIXLSXStandardizer Objects"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"class AIXLSXStandardizer(AsyncStandardizer)\n"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["An asynchronous standardizer for XLSX files that leverages the ",(0,r.jsx)(n.code,{children:"xlsx-to-sdif"})," library."]}),"\n",(0,r.jsxs)(n.p,{children:["This standardizer processes one or more XLSX files, converts each to an\nintermediate SDIF (Standardized Data Interchange Format) file using the\n",(0,r.jsx)(n.code,{children:"xlsx-to-sdif"})," processing graph, and then consolidates these intermediate\nfiles into a single final SDIF file."]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"__init__",children:"__init__"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"def __init__(*args: Any, **kwargs: Any)\n"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"Initializes the AIXLSXStandardizer."}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,r.jsx)(n.p,{children:"..."}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"standardize",children:"standardize"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"async def standardize(datasource: Datasource,\n                      output_path: SDIFPath,\n                      *,\n                      overwrite: bool = False,\n                      config: Optional[Dict[str, Any]] = None,\n                      **kwargs: Any) -> StandardizationResult\n"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"Standardizes one or more XLSX files into a single SDIF file."}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"datasource"})," - A single file path (str or Path) or a list of file paths\nto XLSX files."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"output_path"})," - The path where the final consolidated SDIF file will be saved."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"overwrite"})," - If True, overwrite the output_path if it already exists.\nDefaults to False."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"config"})," - General configuration options (currently not used by this standardizer\nfor graph interaction but preserved for API consistency)."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"**kwargs"})," - Additional keyword arguments (currently ignored)."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Returns"}),":"]}),"\n",(0,r.jsx)(n.p,{children:"A StandardizationResult object containing the path to the final SDIF file."}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Raises"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"ValueError"})," - If the datasource is invalid or no XLSX files are found."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"RuntimeError"})," - If critical errors occur during processing, such as the\n",(0,r.jsx)(n.code,{children:"xlsx-to-sdif"})," graph not being available or failing."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"FileNotFoundError"})," - If input files are not found or graph outputs are invalid."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"FileExistsError"})," - If output_path exists and overwrite is False."]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>d});var i=s(6540);const r={},t=i.createContext(r);function a(e){const n=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);