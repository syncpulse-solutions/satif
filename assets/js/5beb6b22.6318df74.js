"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9791],{6714:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>d,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"concepts/transformation","title":"Transformation","description":"The Transformation Layer is the second stage in the SATIF pipeline. Its core responsibility is to apply business-specific logic to the standardized data\u2014contained within an SDIF file generated by the Standardization Layer\u2014to produce the final output files in their required formats (e.g., XLSX, CSV, JSON, XML).","source":"@site/docs/concepts/transformation.md","sourceDirName":"concepts","slug":"/concepts/transformation","permalink":"/satif/docs/concepts/transformation","draft":false,"unlisted":false,"editUrl":"https://github.com/syncpulse-solutions/satif/tree/main/docs/docs/concepts/transformation.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Standardization","permalink":"/satif/docs/concepts/standardization"},"next":{"title":"Quickstart","permalink":"/satif/docs/quickstart"}}');var i=t(4848),r=t(8453);const o={sidebar_position:3},d="Transformation",a={},c=[{value:"Dual Nature: Code Generation &amp; Execution",id:"dual-nature-code-generation--execution",level:2},{value:"1. Transformation Code Generation (<code>BUILD</code> Cycle)",id:"1-transformation-code-generation-build-cycle",level:2},{value:"2. Transformation Execution (<code>RUN</code> Cycle)",id:"2-transformation-execution-run-cycle",level:2},{value:"Inputs &amp; Outputs (Summary)",id:"inputs--outputs-summary",level:2},{value:"Components",id:"components",level:2}];function l(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"transformation",children:"Transformation"})}),"\n",(0,i.jsxs)(n.p,{children:["The Transformation Layer is the second stage in the SATIF pipeline. Its core responsibility is to apply business-specific logic to the standardized data\u2014contained within an ",(0,i.jsx)(n.a,{href:"/satif/docs/concepts/sdif",children:(0,i.jsx)(n.strong,{children:"SDIF"})})," file generated by the ",(0,i.jsx)(n.a,{href:"/satif/docs/concepts/standardization",children:"Standardization Layer"}),"\u2014to produce the final output files in their required formats (e.g., XLSX, CSV, JSON, XML)."]}),"\n",(0,i.jsx)(n.p,{children:"This layer can execute transformation logic that is either:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"AI-Generated"}),": Developed by a ",(0,i.jsx)(n.code,{children:"Transformation Builder"})," based on examples and natural language."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"User-Provided"}),": Manually written by developers, conforming to SATIF's ",(0,i.jsx)(n.code,{children:"Transformer"})," interface."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"dual-nature-code-generation--execution",children:"Dual Nature: Code Generation & Execution"}),"\n",(0,i.jsxs)(n.p,{children:["Transformation within SATIF is a two-fold process, aligning with the ",(0,i.jsx)(n.code,{children:"BUILD"})," and ",(0,i.jsx)(n.code,{children:"RUN"})," cycles:"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsxs)(n.strong,{children:["Transformation Code Generation (",(0,i.jsx)(n.code,{children:"BUILD"})," Cycle)"]}),": The intelligent creation of executable code that defines the transformation rules."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsxs)(n.strong,{children:["Transformation Execution (",(0,i.jsx)(n.code,{children:"RUN"})," Cycle)"]}),": The application of this generated (or user-provided) code to actual standardized data."]}),"\n"]}),"\n",(0,i.jsxs)(n.h2,{id:"1-transformation-code-generation-build-cycle",children:["1. Transformation Code Generation (",(0,i.jsx)(n.code,{children:"BUILD"})," Cycle)"]}),"\n",(0,i.jsxs)(n.p,{children:["This phase focuses on automatically generating an executable script (e.g., a Python file like ",(0,i.jsx)(n.code,{children:"transformation.py"}),") that encapsulates the necessary data manipulation logic."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Key Component"}),": ",(0,i.jsx)(n.code,{children:"Transformation Builder"})," (also known as Transformation Code Builder - TCB), an AI-powered agent."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Primary Inputs for the Builder"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Input Data Examples"}),": Standardized input examples, typically an ",(0,i.jsx)(n.code,{children:"input.sdif"})," file, often accompanied by its ",(0,i.jsx)(n.code,{children:"input_schema"})," and representative ",(0,i.jsx)(n.code,{children:"input_sample"})," data to guide the AI."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Output Data Examples"}),": Samples of the desired output files (",(0,i.jsx)(n.code,{children:"output_example_files"}),"). These are internally converted to ",(0,i.jsx)(n.code,{children:"output_example.sdif"}),", ",(0,i.jsx)(n.code,{children:"output_repr"})," (textual/structural representation), ",(0,i.jsx)(n.code,{children:"output_schema"}),", and ",(0,i.jsx)(n.code,{children:"output_sample"})," for the AI to analyze and understand the target structure and content."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Natural Language Instructions"})," (",(0,i.jsx)(n.code,{children:"nl_instructions"}),"): User-provided text describing the transformation goals, rules, and mappings."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Target Output File Names"})," (",(0,i.jsx)(n.code,{children:"output_files_names"}),"): Specifies the naming convention for the final output files."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Iterative Generation Process"}),":"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Prompt Synthesis"}),": The ",(0,i.jsx)(n.code,{children:"Transformation Builder"})," constructs a detailed ",(0,i.jsx)(n.code,{children:"Prompt"})," by integrating all provided inputs (SDIF examples, output examples, NL instructions, file names)."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Code Generation & Evaluation Loop"})," (controlled by ",(0,i.jsx)(n.code,{children:"max_iteration"}),", e.g., 10 attempts):\na.  ",(0,i.jsx)(n.strong,{children:"Agent Logic"}),": The AI Agent generates a candidate ",(0,i.jsx)(n.code,{children:"transformation_code"})," string.\nb.  ",(0,i.jsx)(n.strong,{children:"Agent Analysis Tools"}),": To inform its code generation, the Agent can:\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"execute_sql"}),": Directly query the ",(0,i.jsx)(n.code,{children:"input_sdif_path"})," (example SDIF) to analyze its tables, schema, and content."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"represent_file"}),": Obtain a structured representation of the ",(0,i.jsx)(n.code,{children:"output_example_files"})," to better understand the target format and data organization.\nc.  ",(0,i.jsx)(n.strong,{children:"Code Execution"}),": A ",(0,i.jsx)(n.code,{children:"Code Executor"})," runs the generated ",(0,i.jsx)(n.code,{children:"transformation_code"})," using the ",(0,i.jsx)(n.code,{children:"input_sdif_path"})," as its data source.\nd.  ",(0,i.jsx)(n.strong,{children:"Comparison & Feedback"}),": A ",(0,i.jsx)(n.code,{children:"Files Comparator"})," compares the ",(0,i.jsx)(n.code,{children:"generated_files"})," (output from the trial execution) against the ",(0,i.jsx)(n.code,{children:"example_files"})," (user-provided output examples).\ne.  ",(0,i.jsx)(n.strong,{children:"Refinement"}),": Based on the ",(0,i.jsx)(n.code,{children:"are_equivalent?"})," status and detailed ",(0,i.jsx)(n.code,{children:"diff details"})," from the comparator, the Agent refines the ",(0,i.jsx)(n.code,{children:"transformation_code"})," in subsequent iterations."]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Output"}),": A finalized, optimized ",(0,i.jsx)(n.code,{children:"transformation_code"})," (string), ready to be saved as an executable script."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.h2,{id:"2-transformation-execution-run-cycle",children:["2. Transformation Execution (",(0,i.jsx)(n.code,{children:"RUN"})," Cycle)"]}),"\n",(0,i.jsxs)(n.p,{children:["This phase applies the validated ",(0,i.jsx)(n.code,{children:"transformation_code"})," (generated during the ",(0,i.jsx)(n.code,{children:"BUILD"})," cycle or provided by a user) to new, live standardized data."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Key Component"}),": ",(0,i.jsx)(n.code,{children:"Transformation Execution Layer"})," (the runtime environment that executes the transformation script)."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Inputs"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"sdif_standardized"})," file (e.g., ",(0,i.jsx)(n.code,{children:"invoices.sdif"}),"): The output from the ",(0,i.jsx)(n.a,{href:"/satif/docs/concepts/standardization",children:"Standardization Layer"})," for the actual datasource being processed."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"transformation_code"}),": The executable script (e.g., Python code in ",(0,i.jsx)(n.code,{children:"transformation.py"}),")."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Process"}),": The ",(0,i.jsx)(n.code,{children:"Transformation Execution Layer"})," invokes the ",(0,i.jsx)(n.code,{children:"transformation_code"}),", which reads from the ",(0,i.jsx)(n.code,{children:"sdif_standardized"})," input and applies the defined business logic (queries, data manipulation, restructuring, formatting)."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Output"}),": The final transformed data, written to one or more output files in the specified target formats (e.g., ",(0,i.jsx)(n.code,{children:"generated_output.xlsx"}),")."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"inputs--outputs-summary",children:"Inputs & Outputs (Summary)"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsxs)(n.strong,{children:["For Code Generation (",(0,i.jsx)(n.code,{children:"BUILD"}),")"]}),":\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Inputs: Example SDIF, example output files, NL instructions, target file names."}),"\n",(0,i.jsxs)(n.li,{children:["Output: Executable ",(0,i.jsx)(n.code,{children:"transformation_code"})," (e.g., a Python script)."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsxs)(n.strong,{children:["For Execution (",(0,i.jsx)(n.code,{children:"RUN"}),")"]}),":\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Inputs: Live ",(0,i.jsx)(n.code,{children:"sdif_standardized"})," file, ",(0,i.jsx)(n.code,{children:"transformation_code"})," script."]}),"\n",(0,i.jsxs)(n.li,{children:["Output: Final output files (e.g., ",(0,i.jsx)(n.code,{children:"generated_output.xlsx"}),")."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"components",children:"Components"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsxs)(n.strong,{children:[(0,i.jsx)(n.code,{children:"Transformation Builder"})," (AI Agent)"]}),": Generates transformation code."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"MCP Server"})}),": Serves effective prompts for the AI Agent."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"Code Executor"})}),": Runs the generated or user-provided transformation scripts in a controlled environment."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"Files Comparator"})}),": Validates generated outputs against examples during the BUILD cycle."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"Code Transformer"})}),": Executes the transformation logic."]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>d});var s=t(6540);const i={},r=s.createContext(i);function o(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);