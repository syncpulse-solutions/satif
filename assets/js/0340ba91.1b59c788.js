"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7293],{1800:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"api_reference/satif_core/transformation_builders/base","title":"satif_core.transformation_builders.base","description":"TransformationBuilder Objects","source":"@site/docs/api_reference/satif_core/transformation_builders/base.md","sourceDirName":"api_reference/satif_core/transformation_builders","slug":"/api_reference/satif_core/transformation_builders/base","permalink":"/satif/docs/api_reference/satif_core/transformation_builders/base","draft":false,"unlisted":false,"editUrl":"https://github.com/syncpulse-solutions/satif/tree/main/docs/docs/api_reference/satif_core/transformation_builders/base.md","tags":[],"version":"current","frontMatter":{"sidebar_label":"base","title":"satif_core.transformation_builders.base"},"sidebar":"tutorialSidebar","previous":{"title":"base","permalink":"/satif/docs/api_reference/satif_core/standardizers/base"},"next":{"title":"base","permalink":"/satif/docs/api_reference/satif_core/transformers/base"}}');var t=s(4848),i=s(8453);const o={sidebar_label:"base",title:"satif_core.transformation_builders.base"},a=void 0,c={},d=[{value:"TransformationBuilder Objects",id:"transformationbuilder-objects",level:2},{value:"build",id:"build",level:4},{value:"AsyncTransformationBuilder Objects",id:"asynctransformationbuilder-objects",level:2},{value:"build",id:"build-1",level:4}];function l(e){const n={blockquote:"blockquote",code:"code",h2:"h2",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"transformationbuilder-objects",children:"TransformationBuilder Objects"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"class TransformationBuilder(ABC)\n"})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"Abstract Base Class for synchronous transformation code builders."}),"\n",(0,t.jsx)(n.p,{children:"Transformation builders are responsible for generating the code (as a string)\nthat defines the logic for transforming data, typically from a standardized\nintermediate format (like SDIF) to the desired output format(s)."}),"\n",(0,t.jsxs)(n.p,{children:["Concrete implementations define how this transformation code is constructed,\noften leveraging AI based on various inputs provided via ",(0,t.jsx)(n.code,{children:"**kwargs"})," to the ",(0,t.jsx)(n.code,{children:"build"})," method."]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"build",children:"build"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"@abstractmethod\ndef build(**kwargs) -> str\n"})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"Generates the transformation code as a string."}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"**kwargs"})," - Arbitrary keyword arguments specific to the concrete\nbuilder implementation. These might include input data\nexamples, output specifications, user instructions, etc."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Returns"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"str"})," - The generated transformation code as a string."]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"asynctransformationbuilder-objects",children:"AsyncTransformationBuilder Objects"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"class AsyncTransformationBuilder(ABC)\n"})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"Abstract Base Class for asynchronous transformation code builders."}),"\n",(0,t.jsxs)(n.p,{children:["Similar to ",(0,t.jsx)(n.code,{children:"TransformationBuilder"}),", but designed for builders that require\nasynchronous operations (e.g., I/O-bound tasks like calling external APIs\nor services) during the code generation process."]}),"\n",(0,t.jsxs)(n.p,{children:["Concrete implementations define how transformation code is constructed\nasynchronously, based on inputs provided via ",(0,t.jsx)(n.code,{children:"**kwargs"})," to the ",(0,t.jsx)(n.code,{children:"build"})," method."]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"build-1",children:"build"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"@abstractmethod\nasync def build(**kwargs) -> str\n"})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"Asynchronously generates the transformation code as a string."}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"**kwargs"})," - Arbitrary keyword arguments specific to the concrete\nbuilder implementation. These might include input data\nexamples, output specifications, user instructions, etc."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Returns"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"str"})," - The generated transformation code as a string."]}),"\n"]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>a});var r=s(6540);const t={},i=r.createContext(t);function o(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);