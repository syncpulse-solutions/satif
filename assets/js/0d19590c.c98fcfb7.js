"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[104],{1303:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"code_executors/local_code_executor","title":"Local Code Executor","description":"The LocalCodeExecutor is a code execution engine that runs Python transformation functions directly in the current Python process. It provides a rich execution environment with database connectivity, common libraries, and comprehensive error handling for data transformation tasks.","source":"@site/docs/code_executors/local_code_executor.md","sourceDirName":"code_executors","slug":"/code_executors/local_code_executor","permalink":"/satif/docs/code_executors/local_code_executor","draft":false,"unlisted":false,"editUrl":"https://github.com/syncpulse-solutions/satif/tree/main/docs/docs/code_executors/local_code_executor.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Code Executors","permalink":"/satif/docs/code-executors"},"next":{"title":"API Reference","permalink":"/satif/docs/api-reference"}}');var o=t(4848),r=t(8453);const a={sidebar_position:1},i="Local Code Executor",c={},d=[{value:"1. Basic Usage",id:"1-basic-usage",level:2},{value:"2. Initialization Parameters",id:"2-initialization-parameters",level:2},{value:"2.1 Initial Context",id:"21-initial-context",level:3},{value:"3. Execution Method",id:"3-execution-method",level:2},{value:"3.1 Code Parameter",id:"31-code-parameter",level:3},{value:"3.2 SDIF Sources",id:"32-sdif-sources",level:3},{value:"3.3 Function Signatures",id:"33-function-signatures",level:3},{value:"Connection-Based Functions",id:"connection-based-functions",level:4},{value:"SDIFDatabase-Based Functions",id:"sdifdatabase-based-functions",level:4},{value:"4. Database Connectivity",id:"4-database-connectivity",level:2},{value:"4.1 Connection Mode",id:"41-connection-mode",level:3},{value:"4.2 SDIFDatabase Mode",id:"42-sdifdatabase-mode",level:3},{value:"5. Error Handling",id:"5-error-handling",level:2},{value:"5.1 Common Error Scenarios",id:"51-common-error-scenarios",level:3},{value:"6. Advanced Usage Examples",id:"6-advanced-usage-examples",level:2},{value:"6.1 Multi-Format Output",id:"61-multi-format-output",level:3},{value:"6.2 Custom Libraries and Utilities",id:"62-custom-libraries-and-utilities",level:3},{value:"7. Security Considerations",id:"7-security-considerations",level:2},{value:"7.1 Trusted Environment Only",id:"71-trusted-environment-only",level:3},{value:"7.2 Sandboxed Alternatives",id:"72-sandboxed-alternatives",level:3}];function l(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"local-code-executor",children:"Local Code Executor"})}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"LocalCodeExecutor"})," is a code execution engine that runs Python transformation functions directly in the current Python process. It provides a rich execution environment with database connectivity, common libraries, and comprehensive error handling for data transformation tasks."]}),"\n",(0,o.jsx)(n.h2,{id:"1-basic-usage",children:"1. Basic Usage"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'from satif_sdk.code_executors.local_executor import LocalCodeExecutor\nfrom pathlib import Path\n\n# Initialize the executor\nexecutor = LocalCodeExecutor()\n\n# Define transformation code\ntransformation_code = """\nimport pandas as pd\n\ndef transform(conn):\n    # Query the SDIF database\n    df = pd.read_sql_query("SELECT * FROM customers", conn)\n\n    # Apply transformations\n    df[\'full_name\'] = df[\'first_name\'] + \' \' + df[\'last_name\']\n\n    # Return output files\n    return {\n        "customers_processed.csv": df,\n        "summary.json": {"total_customers": len(df)}\n    }\n"""\n\n# Execute the transformation\nresult = executor.execute(\n    code=transformation_code,\n    function_name="transform",\n    sdif_sources={"main": Path("customers.sdif")},\n    extra_context={"config": {"format": "excel"}}\n)\n\nprint(result)  # Dictionary with output file names and data\n'})}),"\n",(0,o.jsx)(n.h2,{id:"2-initialization-parameters",children:"2. Initialization Parameters"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"executor = LocalCodeExecutor(\n    initial_context=None,           # Optional: Custom global variables\n    disable_security_warning=False  # Optional: Suppress security warnings\n)\n"})}),"\n",(0,o.jsx)(n.h3,{id:"21-initial-context",children:"2.1 Initial Context"}),"\n",(0,o.jsx)(n.p,{children:"The executor provides a rich set of pre-loaded libraries and utilities:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'# Default libraries available in transformation functions\n{\n    "pd": pandas,           # Data manipulation\n    "json": json,          # JSON handling\n    "Path": pathlib.Path,  # File path operations\n    "sqlite3": sqlite3,    # Database operations\n    "datetime": datetime,  # Date/time utilities\n    "timedelta": timedelta,# Time intervals\n    "re": re,             # Regular expressions\n    "uuid": uuid,         # UUID generation\n    "os": os,             # Operating system interface\n    "io": io,             # I/O operations\n    "BytesIO": BytesIO,   # Binary I/O\n    "csv": csv,           # CSV handling\n    "np": numpy,          # Numerical operations\n    "unicodedata": unicodedata,  # Unicode utilities\n    "SDIFDatabase": SDIFDatabase  # SDIF database wrapper\n}\n'})}),"\n",(0,o.jsxs)(n.p,{children:["You can extend or override these with custom ",(0,o.jsx)(n.code,{children:"initial_context"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'custom_context = {\n    "requests": requests,\n    "custom_utils": my_utility_module,\n    "config": {"api_key": "secret"}\n}\n\nexecutor = LocalCodeExecutor(initial_context=custom_context)\n'})}),"\n",(0,o.jsx)(n.h2,{id:"3-execution-method",children:"3. Execution Method"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"result = executor.execute(\n    code=code_string,               # Required: Python code to execute\n    function_name=function_name,    # Required: Function to call\n    sdif_sources=sdif_sources,      # Required: SDIF database sources\n    extra_context=extra_context     # Required: Additional context data\n)\n"})}),"\n",(0,o.jsx)(n.h3,{id:"31-code-parameter",children:"3.1 Code Parameter"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"code"})," parameter should contain a Python script that defines the specified function:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'code = """\nimport pandas as pd\nfrom datetime import datetime\n\ndef process_sales(conn, context):\n    # Access configuration from context\n    date_format = context.get(\'date_format\', \'%Y-%m-%d\')\n\n    # Query multiple tables\n    sales_df = pd.read_sql_query("SELECT * FROM sales", conn)\n    products_df = pd.read_sql_query("SELECT * FROM products", conn)\n\n    # Join and transform data\n    result_df = sales_df.merge(products_df, on=\'product_id\')\n    result_df[\'sale_date\'] = pd.to_datetime(result_df[\'sale_date\'])\n\n    # Generate multiple outputs\n    return {\n        "sales_report.xlsx": result_df,\n        "summary.json": {\n            "total_sales": result_df[\'amount\'].sum(),\n            "generated_at": datetime.now().strftime(date_format)\n        },\n        "raw_data.csv": result_df\n    }\n"""\n'})}),"\n",(0,o.jsx)(n.h3,{id:"32-sdif-sources",children:"3.2 SDIF Sources"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"sdif_sources"})," parameter maps schema names to SDIF file paths:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'# Single SDIF source\nsdif_sources = {"main": "data.sdif"}\n\n# Multiple SDIF sources\nsdif_sources = {\n    "sales": "sales_data.sdif",\n    "inventory": "inventory_data.sdif",\n    "customers": "customer_data.sdif"\n}\n'})}),"\n",(0,o.jsx)(n.p,{children:"Each SDIF file is attached as a schema in the SQLite database, allowing you to query tables like:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-sql",children:"SELECT * FROM sales.transactions\nSELECT * FROM inventory.products\nSELECT * FROM customers.profiles\n"})}),"\n",(0,o.jsx)(n.h3,{id:"33-function-signatures",children:"3.3 Function Signatures"}),"\n",(0,o.jsx)(n.p,{children:"The executor supports flexible function signatures:"}),"\n",(0,o.jsx)(n.h4,{id:"connection-based-functions",children:"Connection-Based Functions"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'def transform(conn):\n    """Function receives raw SQLite connection"""\n    df = pd.read_sql_query("SELECT * FROM table", conn)\n    return {"output.csv": df}\n\ndef transform_with_context(conn, context):\n    """Function receives connection and context"""\n    config = context.get(\'settings\', {})\n    # ... transformation logic\n    return {"output.csv": df}\n'})}),"\n",(0,o.jsx)(n.h4,{id:"sdifdatabase-based-functions",children:"SDIFDatabase-Based Functions"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'def transform(db):\n    """Function receives SDIFDatabase wrapper (single source only)"""\n    tables = db.list_tables()\n    df = db.query("SELECT * FROM main_table")\n    return {"output.csv": df}\n\ndef transform_with_context(db, context):\n    """Function receives database wrapper and context"""\n    # ... transformation logic\n    return {"output.csv": df}\n'})}),"\n",(0,o.jsx)(n.h2,{id:"4-database-connectivity",children:"4. Database Connectivity"}),"\n",(0,o.jsx)(n.h3,{id:"41-connection-mode",children:"4.1 Connection Mode"}),"\n",(0,o.jsxs)(n.p,{children:["For multiple SDIF sources or when your function expects a ",(0,o.jsx)(n.code,{children:"conn"})," parameter:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'# Multiple sources attached as schemas\nsdif_sources = {\n    "sales": "sales.sdif",\n    "inventory": "inventory.sdif"\n}\n\ndef transform(conn):\n    # Query across schemas\n    query = """\n    SELECT s.*, i.stock_level\n    FROM sales.transactions s\n    JOIN inventory.products i ON s.product_id = i.id\n    """\n    df = pd.read_sql_query(query, conn)\n    return {"combined_report.csv": df}\n'})}),"\n",(0,o.jsx)(n.h3,{id:"42-sdifdatabase-mode",children:"4.2 SDIFDatabase Mode"}),"\n",(0,o.jsxs)(n.p,{children:["For single SDIF source when your function expects a ",(0,o.jsx)(n.code,{children:"db"})," parameter:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'# Single source as SDIFDatabase wrapper\nsdif_sources = {"main": "data.sdif"}\n\ndef transform(db):\n    # Use SDIFDatabase methods\n    tables = db.list_tables()\n    schema = db.get_table_schema("customers")\n    df = db.query("SELECT * FROM customers WHERE active = 1")\n\n    return {"active_customers.csv": df}\n'})}),"\n",(0,o.jsx)(n.h2,{id:"5-error-handling",children:"5. Error Handling"}),"\n",(0,o.jsx)(n.p,{children:"The executor provides comprehensive error handling:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'from satif_core.exceptions import CodeExecutionError\n\ntry:\n    result = executor.execute(\n        code=transformation_code,\n        function_name="transform",\n        sdif_sources=sdif_sources,\n        extra_context={}\n    )\nexcept CodeExecutionError as e:\n    print(f"Execution failed: {e}")\n    # Handle specific execution errors\nexcept Exception as e:\n    print(f"Unexpected error: {e}")\n'})}),"\n",(0,o.jsx)(n.h3,{id:"51-common-error-scenarios",children:"5.1 Common Error Scenarios"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Function Not Found"}),": The specified ",(0,o.jsx)(n.code,{children:"function_name"})," doesn't exist in the code"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Invalid Signature"}),": Function doesn't accept required parameters (",(0,o.jsx)(n.code,{children:"conn"})," or ",(0,o.jsx)(n.code,{children:"db"}),")"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Invalid Return Type"}),": Function doesn't return a dictionary"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Database Errors"}),": Issues with SDIF file access or SQL queries"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Syntax Errors"}),": Invalid Python code in the ",(0,o.jsx)(n.code,{children:"code"})," string"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"6-advanced-usage-examples",children:"6. Advanced Usage Examples"}),"\n",(0,o.jsx)(n.h3,{id:"61-multi-format-output",children:"6.1 Multi-Format Output"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'transformation_code = """\nimport pandas as pd\nimport json\n\ndef generate_reports(conn, context):\n    # Query data\n    sales_df = pd.read_sql_query("SELECT * FROM sales", conn)\n\n    # Generate different format outputs\n    summary_stats = {\n        "total_sales": float(sales_df[\'amount\'].sum()),\n        "avg_sale": float(sales_df[\'amount\'].mean()),\n        "sale_count": len(sales_df)\n    }\n\n    # Create Excel with multiple sheets\n    excel_data = sales_df.copy()\n    excel_data[\'formatted_date\'] = pd.to_datetime(excel_data[\'sale_date\']).dt.strftime(\'%Y-%m-%d\')\n\n    return {\n        "sales_data.xlsx": excel_data,\n        "summary.json": summary_stats,\n        "raw_export.csv": sales_df,\n        "metadata.txt": f"Report generated with {len(sales_df)} records"\n    }\n"""\n\nresult = executor.execute(\n    code=transformation_code,\n    function_name="generate_reports",\n    sdif_sources={"main": "sales.sdif"},\n    extra_context={"report_date": "2024-01-01"}\n)\n'})}),"\n",(0,o.jsx)(n.h3,{id:"62-custom-libraries-and-utilities",children:"6.2 Custom Libraries and Utilities"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'# Custom utility module\nclass DataProcessor:\n    @staticmethod\n    def clean_names(df, column):\n        return df[column].str.strip().str.title()\n\n    @staticmethod\n    def calculate_metrics(df):\n        return {\n            "mean": df.mean(),\n            "median": df.median(),\n            "std": df.std()\n        }\n\n# Initialize executor with custom context\nexecutor = LocalCodeExecutor(\n    initial_context={\n        "DataProcessor": DataProcessor,\n        "custom_config": {"date_format": "%d/%m/%Y"}\n    }\n)\n\ntransformation_code = """\ndef advanced_transform(conn, context):\n    df = pd.read_sql_query("SELECT * FROM customers", conn)\n\n    # Use custom utility\n    df[\'clean_name\'] = DataProcessor.clean_names(df, \'name\')\n\n    # Access custom config\n    date_fmt = custom_config[\'date_format\']\n\n    return {"processed_customers.csv": df}\n"""\n'})}),"\n",(0,o.jsx)(n.h2,{id:"7-security-considerations",children:"7. Security Considerations"}),"\n",(0,o.jsx)(n.h3,{id:"71-trusted-environment-only",children:"7.1 Trusted Environment Only"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"LocalCodeExecutor"})," should ONLY be used when:"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Code source is completely trusted"}),"\n",(0,o.jsx)(n.li,{children:"Execution environment is isolated/controlled"}),"\n",(0,o.jsx)(n.li,{children:"No external user input affects the code"}),"\n",(0,o.jsx)(n.li,{children:"System security is not a concern"}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"72-sandboxed-alternatives",children:"7.2 Sandboxed Alternatives"}),"\n",(0,o.jsx)(n.p,{children:"For untrusted code execution, consider:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Containerized Executors"}),": Docker-based isolation"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Cloud Sandboxes"}),": Services like E2B, CodePen, etc."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Virtual Machines"}),": Complete OS-level isolation"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Process Isolation"}),": Restricted subprocess execution"]}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'# Example of safer alternatives (pseudocode)\nfrom satif_sdk.code_executors import SandboxedExecutor, ContainerExecutor\n\n# Use sandboxed execution for untrusted code\nsafe_executor = SandboxedExecutor(\n    max_memory="512MB",\n    max_execution_time=30,\n    network_access=False\n)\n\n# Or containerized execution\ncontainer_executor = ContainerExecutor(\n    image="python:3.11-slim",\n    resource_limits={"memory": "1GB", "cpu": "1.0"}\n)\n'})})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>i});var s=t(6540);const o={},r=s.createContext(o);function a(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);