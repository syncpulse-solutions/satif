"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[490],{1497:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>i,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"api_reference/satif_ai/transform","title":"satif_ai.transform","description":"atransform","source":"@site/docs/api_reference/satif_ai/transform.md","sourceDirName":"api_reference/satif_ai","slug":"/api_reference/satif_ai/transform","permalink":"/satif/docs/api_reference/satif_ai/transform","draft":false,"unlisted":false,"editUrl":"https://github.com/syncpulse-solutions/satif/tree/main/docs/docs/api_reference/satif_ai/transform.md","tags":[],"version":"current","frontMatter":{"sidebar_label":"transform","title":"satif_ai.transform"},"sidebar":"tutorialSidebar","previous":{"title":"ai_xlsx","permalink":"/satif/docs/api_reference/satif_ai/standardizers/ai_xlsx"},"next":{"title":"syncpulse","permalink":"/satif/docs/api_reference/satif_ai/transformation_builders/syncpulse"}}');var o=r(4848),s=r(8453);const i={sidebar_label:"transform",title:"satif_ai.transform"},a=void 0,c={},d=[{value:"atransform",id:"atransform",level:4}];function l(e){const n={blockquote:"blockquote",code:"code",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h4,{id:"atransform",children:"atransform"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'async def atransform(\n    sdif: SDIFPath,\n    output_target_files: Dict[FilePath, str] | List[FilePath] | FilePath,\n    instructions: Optional[str] = None,\n    output_path: FilePath = Path("."),\n    *,\n    transformation_code: Optional[str] = None,\n    transformation_builder: Optional[AsyncTransformationBuilder] = None,\n    code_executor: Optional[CodeExecutor] = None,\n    mcp_server: Optional[FastMCP] = None,\n    mcp_client: Optional[Client] = None,\n    llm_model: str = "o4-mini",\n    schema_only: bool = False,\n    representer_kwargs: Optional[Dict[str,\n                                      Any]] = None) -> TransformationResult\n'})}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsx)(n.p,{children:"Asynchronously transforms an SDIF (Standard Data Interchange Format) input using\nan AI-generated or provided transformation code."}),"\n",(0,o.jsx)(n.p,{children:"This function orchestrates the process of:"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["Optionally generating transformation code using an AI model via a ",(0,o.jsx)(n.code,{children:"TransformationBuilder"}),"\nif ",(0,o.jsx)(n.code,{children:"transformation_code"})," is not provided.\nexplicitly passed."]}),"\n",(0,o.jsxs)(n.li,{children:["Executing the transformation code using a ",(0,o.jsx)(n.code,{children:"CodeTransformer"})," and a ",(0,o.jsx)(n.code,{children:"CodeExecutor"}),"."]}),"\n",(0,o.jsx)(n.li,{children:"Exporting the results to the specified output."}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"sdif"})," - Path to the input SDIF file or an ",(0,o.jsx)(n.code,{children:"SDIFDatabase"})," object."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"output_target_files"})," - A dictionary mapping original example file paths (or string identifiers)\nto their desired agent-facing filenames, or a list of output example\nfile paths, or a single output file path. These are used by the AI to understand the target\nformat and structure, and also by the ",(0,o.jsx)(n.code,{children:"CodeTransformer"})," to determine\noutput filenames if the transformation result keys match."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"instructions"})," - Optional. Natural language instructions for the AI to generate\nthe transformation code. Used if ",(0,o.jsx)(n.code,{children:"transformation_code"})," is None."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"transformation_code"}),"0 - Path to the directory where transformation outputs will be saved."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"transformation_code"})," - Optional. Pre-existing Python code for the transformation.\nIf None, code will be generated by the ",(0,o.jsx)(n.code,{children:"transformation_code"}),"2."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"transformation_code"}),"2 - Optional. An ",(0,o.jsx)(n.code,{children:"transformation_code"}),"4 instance responsible for generating\nthe transformation code if ",(0,o.jsx)(n.code,{children:"transformation_code"})," is not provided.\nIf None, a ",(0,o.jsx)(n.code,{children:"transformation_code"}),"6 is instantiated."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"transformation_code"}),"7 - Optional. A ",(0,o.jsx)(n.code,{children:"CodeExecutor"})," instance for running the transformation\ncode. If None, a ",(0,o.jsx)(n.code,{children:"transformation_code"}),"9 is used."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"CodeTransformer"}),"0 - Optional. A ",(0,o.jsx)(n.code,{children:"CodeTransformer"}),"1 server instance for the AI code builder.\nDefaults to the global ",(0,o.jsx)(n.code,{children:"CodeTransformer"}),"2 instance if ",(0,o.jsx)(n.code,{children:"transformation_code"}),"2 is None and\na new ",(0,o.jsx)(n.code,{children:"transformation_code"}),"6 is being created."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"CodeTransformer"}),"5 - Optional. A user-provided ",(0,o.jsx)(n.code,{children:"CodeTransformer"}),"6 instance. If provided when\n",(0,o.jsx)(n.code,{children:"transformation_code"}),"2 is None, it will be used by the internally\ncreated ",(0,o.jsx)(n.code,{children:"transformation_code"}),"6. The caller is responsible for\nmanaging the lifecycle of a provided client."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"CodeTransformer"}),'9 - The language model to use for code generation (e.g., "o4-mini").\nUsed if ',(0,o.jsx)(n.code,{children:"transformation_code"}),"2 is None."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"CodeExecutor"}),"1 - If True, the transformation aims to match only the schema (headers)\nof the ",(0,o.jsx)(n.code,{children:"output_target_files"}),", and input samples may be omitted or marked\nas empty for the AI. This is useful for structural transformations\nwithout processing actual data rows."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"CodeExecutor"}),"3 - Optional dictionary of keyword arguments to pass to the\nrepresenter when analyzing ",(0,o.jsx)(n.code,{children:"output_target_files"}),"."]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Returns"}),":"]}),"\n",(0,o.jsxs)(n.p,{children:["A ",(0,o.jsx)(n.code,{children:"CodeExecutor"}),"5 object containing the path to the output\nand the transformation code used."]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>a});var t=r(6540);const o={},s=t.createContext(o);function i(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);