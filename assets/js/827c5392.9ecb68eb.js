"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1886],{7562:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>d,frontMatter:()=>l,metadata:()=>s,toc:()=>r});const s=JSON.parse('{"id":"api_reference/satif_ai/utils/openai_mcp","title":"satif_ai.utils.openai_mcp","description":"OpenAICompatibleMCP Objects","source":"@site/docs/api_reference/satif_ai/utils/openai_mcp.md","sourceDirName":"api_reference/satif_ai/utils","slug":"/api_reference/satif_ai/utils/openai_mcp","permalink":"/satif/docs/api_reference/satif_ai/utils/openai_mcp","draft":false,"unlisted":false,"editUrl":"https://github.com/syncpulse-solutions/satif/tree/main/docs/docs/api_reference/satif_ai/utils/openai_mcp.md","tags":[],"version":"current","frontMatter":{"sidebar_label":"openai_mcp","title":"satif_ai.utils.openai_mcp"},"sidebar":"tutorialSidebar","previous":{"title":"merge_sdif","permalink":"/satif/docs/api_reference/satif_ai/utils/merge_sdif"},"next":{"title":"zip","permalink":"/satif/docs/api_reference/satif_ai/utils/zip"}}');var a=t(4848),i=t(8453);const l={sidebar_label:"openai_mcp",title:"satif_ai.utils.openai_mcp"},c=void 0,o={},r=[{value:"OpenAICompatibleMCP Objects",id:"openaicompatiblemcp-objects",level:2},{value:"connect",id:"connect",level:4},{value:"name",id:"name",level:4},{value:"cleanup",id:"cleanup",level:4},{value:"list_tools",id:"list_tools",level:4},{value:"call_tool",id:"call_tool",level:4}];function p(e){const n={blockquote:"blockquote",code:"code",h2:"h2",h4:"h4",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h2,{id:"openaicompatiblemcp-objects",children:"OpenAICompatibleMCP Objects"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"class OpenAICompatibleMCP(MCPServer)\n"})}),"\n",(0,a.jsx)(n.h4,{id:"connect",children:"connect"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"async def connect()\n"})}),"\n",(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsx)(n.p,{children:"Connect to the server.\nFor FastMCP, connection is managed externally when the server is run.\nThis method marks the wrapper as connected."}),"\n"]}),"\n",(0,a.jsx)(n.h4,{id:"name",children:"name"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"@property\ndef name() -> str\n"})}),"\n",(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsx)(n.p,{children:"A readable name for the server."}),"\n"]}),"\n",(0,a.jsx)(n.h4,{id:"cleanup",children:"cleanup"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"async def cleanup()\n"})}),"\n",(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsx)(n.p,{children:"Cleanup the server.\nFor FastMCP, cleanup is managed externally. This method marks the wrapper as disconnected."}),"\n"]}),"\n",(0,a.jsx)(n.h4,{id:"list_tools",children:"list_tools"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"async def list_tools() -> list[MCPTool]\n"})}),"\n",(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsx)(n.p,{children:"List the tools available on the server."}),"\n"]}),"\n",(0,a.jsx)(n.h4,{id:"call_tool",children:"call_tool"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"async def call_tool(tool_name: str,\n                    arguments: dict[str, Any] | None) -> CallToolResult\n"})}),"\n",(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsx)(n.p,{children:"Invoke a tool on the server."}),"\n"]})]})}function d(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(p,{...e})}):p(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>c});var s=t(6540);const a={},i=s.createContext(a);function l(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:l(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);