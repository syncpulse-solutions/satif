"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7047],{8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var s=t(6540);const i={},r=s.createContext(i);function a(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(r.Provider,{value:n},e.children)}},9055:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"use_cases/build_a_transformation_pipeline","title":"Building a transformation pipeline","description":"This guide walks you through the simplest possible SATIF AI pipeline:","source":"@site/docs/use_cases/build_a_transformation_pipeline.md","sourceDirName":"use_cases","slug":"/use_cases/build_a_transformation_pipeline","permalink":"/satif/docs/use_cases/build_a_transformation_pipeline","draft":false,"unlisted":false,"editUrl":"https://github.com/syncpulse-solutions/satif/tree/main/docs/docs/use_cases/build_a_transformation_pipeline.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Use Cases","permalink":"/satif/docs/use-cases"},"next":{"title":"Chatting with your files","permalink":"/satif/docs/use_cases/chatting_with_your_files"}}');var i=t(4848),r=t(8453);const a={sidebar_position:1},o="Building a transformation pipeline",l={},d=[{value:"1  Install the dependencies",id:"1--install-the-dependencies",level:2},{value:"2  Project layout",id:"2--project-layout",level:2},{value:"3  The script (both phases)",id:"3--the-script-both-phases",level:2},{value:"4  Run it",id:"4--run-it",level:2},{value:"5  Where to go next",id:"5--where-to-go-next",level:2}];function c(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"building-a-transformation-pipeline",children:"Building a transformation pipeline"})}),"\n",(0,i.jsx)(n.p,{children:"This guide walks you through the simplest possible SATIF AI pipeline:"}),"\n",(0,i.jsxs)(n.p,{children:["\u2022 ",(0,i.jsx)(n.strong,{children:"Build Phase"}),"  : generate the transformation code once by feeding SATIF ",(0,i.jsx)(n.strong,{children:"both"})," the standardized data and an ",(0,i.jsx)(n.em,{children:"example"})," of the desired output.\n\u2022 ",(0,i.jsx)(n.strong,{children:"Run Phase"}),"  : apply that code to any number of new datasources to get fresh output files."]}),"\n",(0,i.jsx)(n.p,{children:"Everything below fits in \xb150 lines of Python."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"1--install-the-dependencies",children:"1  Install the dependencies"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'pip install "satif-ai>=0.1" fastmcp\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"Python 3.10+ is required."})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"2--project-layout",children:"2  Project layout"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"my_project/\n\u251c\u2500\u2500 input_files/\n\u2502   \u2514\u2500\u2500 sales.csv\n\u251c\u2500\u2500 output_examples/\n\u2502   \u2514\u2500\u2500 expected_sales.json\n\u2514\u2500\u2500 run_satif.py\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"sales.csv"})," is the raw source file."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"expected_sales.json"})," is a single example of the desired result."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"SATIF will learn the transformation by comparing the generated output with the output example file."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"3--the-script-both-phases",children:"3  The script (both phases)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# run_satif.py\n"""Minimal two-phase SATIF pipeline in explicit functions."""\n\nimport asyncio\nfrom pathlib import Path\n\nfrom fastmcp import FastMCP, Client\nfrom fastmcp.client.transports import FastMCPTransport\n\nfrom satif_ai.standardizers.ai import AIStandardizer\nfrom satif_ai.transformation_builders.syncpulse import (\n    SyncpulseTransformationBuilder,\n)\nfrom satif_ai.utils.openai_mcp import OpenAICompatibleMCP\nfrom satif_sdk.code_executors.local_executor import LocalCodeExecutor\nfrom satif_sdk.transformers.code import CodeTransformer\n\n\n# ---------------------------------------------------------------------------\n# Config\n# ---------------------------------------------------------------------------\nINPUT_FILE = "input_files/sales.csv"\nOUTPUT_EXAMPLE = "output_examples/expected_sales.json"\nMODEL = "o4-mini"\n\nSDIF_PATH = Path("input.sdif")\nCODE_PATH = Path("transform.py")\nOUTPUT_DIR = Path("generated_output")\n\n\n# ---------------------------------------------------------------------------\n# Phase A \u2013 BUILD (one-off)\n# ---------------------------------------------------------------------------\n\n\nasync def build_transformation() -> None:\n    """Standardize *INPUT_FILE* and generate *CODE_PATH*."""\n\n    mcp_server = FastMCP()\n    mcp_transport = FastMCPTransport(mcp=mcp_server)\n\n    async with Client(mcp_transport) as mcp_client:\n        openai_mcp = OpenAICompatibleMCP(mcp=mcp_server)\n        await openai_mcp.connect()\n\n        # 1  Standardize datasource \u2192 SDIF\n        standardizer = AIStandardizer(\n            mcp_server=openai_mcp,\n            mcp_session=mcp_client.session,\n            llm_model=MODEL,\n        )\n        await standardizer.standardize(\n            datasource=INPUT_FILE,\n            output_path=SDIF_PATH,\n            overwrite=True,\n        )\n\n        # 2  Generate Python transformation code\n        builder = SyncpulseTransformationBuilder(\n            mcp_server=openai_mcp,\n            mcp_session=mcp_client.session,\n            llm_model=MODEL,\n        )\n        code_str = await builder.build(\n            sdif=SDIF_PATH,\n            output_target_files={OUTPUT_EXAMPLE: Path(OUTPUT_EXAMPLE).name},\n            instructions=(\n                "For every customer in sales.csv, compute total_amount and "\n                "output JSON with fields: customer_id and total_amount."\n            ),\n        )\n        CODE_PATH.write_text(code_str)\n\n\n# ---------------------------------------------------------------------------\n# Phase B \u2013 RUN (repeatable)\n# ---------------------------------------------------------------------------\n\n\nasync def run_transformation() -> None:\n    """Apply *CODE_PATH* to *SDIF_PATH* to produce files in *OUTPUT_DIR*."""\n\n    transformer = CodeTransformer(\n        function=CODE_PATH,\n        code_executor=LocalCodeExecutor(disable_security_warning=True),\n    )\n    transformer.export(\n        sdif=SDIF_PATH,\n        output_path=OUTPUT_DIR,\n    )\n\n\n# ---------------------------------------------------------------------------\n# Entrypoint (dev convenience): build then run.\n# ---------------------------------------------------------------------------\n\n\nif __name__ == "__main__":\n    asyncio.run(build_transformation())\n    asyncio.run(run_transformation())\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"4--run-it",children:"4  Run it"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"python run_satif.py\n"})}),"\n",(0,i.jsx)(n.p,{children:"You will obtain:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"input.sdif"})," \u2013 the standardized SQLite database."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"transform.py"})," \u2013 the AI-generated transformation script."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"generated_output/expected_sales.json"})," \u2013 the file produced by the script."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Compare the generated file with ",(0,i.jsx)(n.code,{children:"output_examples/expected_sales.json"}),". If they differ, tweak the ",(0,i.jsx)(n.code,{children:"instructions"})," string or provide additional example files."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"5--where-to-go-next",children:"5  Where to go next"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Pass a list of paths to ",(0,i.jsx)(n.code,{children:"datasource"})," to merge multiple inputs into one SDIF."]}),"\n",(0,i.jsxs)(n.li,{children:["Map several example outputs in ",(0,i.jsx)(n.code,{children:"output_target_files"})," to generate multi-file transformations."]}),"\n",(0,i.jsxs)(n.li,{children:["Tune ",(0,i.jsx)(n.code,{children:"llm_model"})," for different speed/quality trade-offs."]}),"\n",(0,i.jsxs)(n.li,{children:["Use the higher-level helpers ",(0,i.jsx)(n.code,{children:"astandardize()"})," and ",(0,i.jsx)(n.code,{children:"atransform()"})," when you don't need fine-grained control over the builder."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"That's all \u2013 you now have a working SATIF transformation pipeline in two explicit steps."})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}}}]);