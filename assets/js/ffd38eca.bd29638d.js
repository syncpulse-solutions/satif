"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4413],{1129:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>a});const s=JSON.parse('{"id":"rfc/sp-rfc-002","title":"SP-RFC-002: SDIF","description":"Standardized Data Interoperable Format (SDIF) Version 1.0","source":"@site/docs/rfc/sp-rfc-002.md","sourceDirName":"rfc","slug":"/rfc/sp-rfc-002","permalink":"/satif/docs/rfc/sp-rfc-002","draft":false,"unlisted":false,"editUrl":"https://github.com/syncpulse-solutions/satif/tree/main/docs/docs/rfc/sp-rfc-002.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"RFC","permalink":"/satif/docs/rfc"},"next":{"title":"Libs","permalink":"/satif/docs/libs"}}');var t=i(4848),d=i(8453);const r={},c="SP-RFC-002: SDIF",l={},a=[];function o(e){const n={code:"code",em:"em",h1:"h1",header:"header",li:"li",ol:"ol",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,d.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"sp-rfc-002-sdif",children:"SP-RFC-002: SDIF"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Standardized Data Interoperable Format (SDIF) Version 1.0"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"1. Summary"})}),"\n",(0,t.jsx)(n.p,{children:"SDIF is a standardized format using a single SQLite database file to represent heterogeneous data sources \u2014 including tabular data, JSON objects, and binary media files \u2014 as well as their structural metadata, semantic descriptions, and interrelationships. It aims to provide a structured and directly queryable input format for automated data processing systems, particularly AI agents involved in data analysis and transformation tasks."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"2. Motivation"})}),"\n",(0,t.jsx)(n.p,{children:"Organizations constantly handle data from diverse sources and varied formats (flat files like CSV, Excel spreadsheets, structured documents like JSON or XML, PDF, database exports, etc.). This intrinsic heterogeneity is a major obstacle to automating processing and integration workflows, particularly for AI systems that greatly benefit from a predictable, semantically rich, and easily queryable input representation. SDIF addresses this need by proposing a standardized intermediate format, encapsulated in a single SQLite database, that simplifies ingestion, structured analysis via SQL, and subsequent transformation of data by downstream systems."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"3. Objectives"})}),"\n",(0,t.jsx)(n.p,{children:"The main objectives of the SDIF version 1.0 specification are to:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Use a single SQLite database file as a standard container."}),"\n",(0,t.jsx)(n.li,{children:"Define a specific and mandatory database schema within the SQLite file to fully store the data source and associated metadata."}),"\n",(0,t.jsx)(n.li,{children:"Leverage SQLite's native features to the maximum: data types (INTEGER, REAL, TEXT, BLOB), constraints (PRIMARY KEY, FOREIGN KEY, NOT NULL), and SQL querying capabilities."}),"\n",(0,t.jsx)(n.li,{children:"Clearly specify how tabular data, JSON objects, and media files are stored in dedicated tables."}),"\n",(0,t.jsx)(n.li,{children:"Include comprehensive metadata describing the data itself as well as its original source(s)."}),"\n",(0,t.jsx)(n.li,{children:"Provide a clear mechanism to represent relationships between data, strongly favoring the use of SQLite's native foreign key (FOREIGN KEY) constraints when applicable."}),"\n",(0,t.jsx)(n.li,{children:"Establish a robust and extensible foundation for future versions or specializations."}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"4. Compliance"})}),"\n",(0,t.jsx)(n.p,{children:'The keywords "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all capitals. These keywords indicate the levels of requirement for implementations conforming to the SDIF Version 1.0 specification.'}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"5. SDIF Format Specification"})}),"\n",(0,t.jsxs)(n.p,{children:["5.1. An SDIF file ",(0,t.jsx)(n.strong,{children:"MUST"})," be a valid SQLite database file, compatible with SQLite version 3 [SQLITE_FORMAT]."]}),"\n",(0,t.jsxs)(n.p,{children:["5.2. The recommended file extension for an SDIF file ",(0,t.jsx)(n.strong,{children:"SHOULD"})," be ",(0,t.jsx)(n.code,{children:".sdif"}),". An alternative extension ",(0,t.jsx)(n.code,{children:".sqlite"})," ",(0,t.jsx)(n.strong,{children:"MAY"})," be used to facilitate recognition by operating systems or standard SQLite tools."]}),"\n",(0,t.jsxs)(n.p,{children:["5.3. Text Encoding: SQLite handles the internal encoding of the database. However, all textual data stored in TEXT type columns (including JSON strings and descriptions) ",(0,t.jsx)(n.strong,{children:"MUST"})," be encoded in UTF-8 [RFC3629] when inserted and interpreted as such when read."]}),"\n",(0,t.jsxs)(n.p,{children:["5.4. Naming: The table and column names defined in this schema (Section 6) ",(0,t.jsx)(n.strong,{children:"MUST"})," be used exactly as specified (in ",(0,t.jsx)(n.code,{children:"snake_case"}),"). The names of tables containing actual user data (see Section 7.1) ",(0,t.jsx)(n.strong,{children:"SHOULD"})," also use ",(0,t.jsx)(n.code,{children:"snake_case"})," and ",(0,t.jsx)(n.strong,{children:"MUST NOT"})," start with the ",(0,t.jsx)(n.code,{children:"sdif_"})," prefix to avoid conflicts with metadata tables."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"6. SDIF Database Schema"})}),"\n",(0,t.jsxs)(n.p,{children:["A valid SDIF file ",(0,t.jsx)(n.strong,{children:"MUST"})," contain at minimum the following metadata tables. Other tables containing user data will also be present (see Section 7)."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsxs)(n.strong,{children:["6.1. Table ",(0,t.jsx)(n.code,{children:"sdif_properties"})]})}),"\n",(0,t.jsxs)(n.p,{children:["This table contains global properties about the SDIF file itself. It ",(0,t.jsx)(n.strong,{children:"MUST"})," contain exactly one row."]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"sdif_version"})," (TEXT, NOT NULL): The version of the SDIF specification to which this file conforms. For this specification, the value ",(0,t.jsx)(n.strong,{children:"MUST"})," be ",(0,t.jsx)(n.code,{children:'"1.0"'}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"creation_timestamp"})," (TEXT): The date and time of creation of the SDIF file, in ISO 8601 [ISO8601] format (e.g., ",(0,t.jsx)(n.code,{children:'"2024-07-31T10:00:00Z"'}),"). ",(0,t.jsx)(n.strong,{children:"RECOMMENDED"}),"."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsxs)(n.strong,{children:["6.2. Table ",(0,t.jsx)(n.code,{children:"sdif_sources"})]})}),"\n",(0,t.jsxs)(n.p,{children:["This table describes the original source(s) of the data before integration into the SDIF file. Each distinct source (e.g., an Excel file, a CSV file, a database export) ",(0,t.jsx)(n.strong,{children:"SHOULD"})," have an entry in this table."]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"source_id"})," (INTEGER, PRIMARY KEY AUTOINCREMENT): A unique identifier for each source."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"original_file_name"})," (TEXT, NOT NULL): The name of the original file or source."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"original_file_type"}),' (TEXT, NOT NULL): The type of the original file or source (e.g., "csv", "xlsx", "json", "xml", "pdf", "database_export").']}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"source_description"})," (TEXT): A free-form textual description of the source. ",(0,t.jsx)(n.strong,{children:"RECOMMENDED"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"processing_timestamp"})," (TEXT): The date and time at which this specific source was processed and integrated into the SDIF file, in ISO 8601 format. ",(0,t.jsx)(n.strong,{children:"OPTIONAL"}),"."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsxs)(n.strong,{children:["6.3. Table ",(0,t.jsx)(n.code,{children:"sdif_tables_metadata"})]})}),"\n",(0,t.jsx)(n.p,{children:"This table stores metadata associated with each table containing user tabular data (see Section 7.1)."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"table_name"})," (TEXT, PRIMARY KEY): The name of the SQL table in the SDIF database containing user data (e.g., ",(0,t.jsx)(n.code,{children:'"delivery_details"'}),"). This name ",(0,t.jsx)(n.strong,{children:"MUST NOT"})," start with ",(0,t.jsx)(n.code,{children:"sdif_"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"source_id"})," (INTEGER, NOT NULL): Reference to the original source of the data in this table.\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["FOREIGN KEY (",(0,t.jsx)(n.code,{children:"source_id"}),") REFERENCES ",(0,t.jsx)(n.code,{children:"sdif_sources"}),"(",(0,t.jsx)(n.code,{children:"source_id"}),")"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"description"})," (TEXT): A semantic description of what the table represents. ",(0,t.jsx)(n.strong,{children:"RECOMMENDED"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"original_identifier"})," (TEXT): An identifier of the original structure if relevant (e.g., sheet name in an Excel file). ",(0,t.jsx)(n.strong,{children:"OPTIONAL"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"row_count"})," (INTEGER): The number of rows in the user data table. Can be calculated (",(0,t.jsx)(n.code,{children:"SELECT COUNT(*)"}),") but can be stored for quick access. ",(0,t.jsx)(n.strong,{children:"OPTIONAL"}),"."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsxs)(n.strong,{children:["6.4. Table ",(0,t.jsx)(n.code,{children:"sdif_columns_metadata"})]})}),"\n",(0,t.jsx)(n.p,{children:"This table stores metadata associated with each column of the user data tables."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"table_name"})," (TEXT, NOT NULL): The name of the user table containing the column."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"column_name"})," (TEXT, NOT NULL): The name of the column in the user table."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"description"})," (TEXT): A semantic description of what the column represents. ",(0,t.jsx)(n.strong,{children:"RECOMMENDED"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"original_column_name"})," (TEXT): The original name of the column as it appeared in the data source. ",(0,t.jsx)(n.strong,{children:"OPTIONAL"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["PRIMARY KEY (",(0,t.jsx)(n.code,{children:"table_name"}),", ",(0,t.jsx)(n.code,{children:"column_name"}),")"]}),"\n",(0,t.jsxs)(n.li,{children:["FOREIGN KEY (",(0,t.jsx)(n.code,{children:"table_name"}),") REFERENCES ",(0,t.jsx)(n.code,{children:"sdif_tables_metadata"}),"(",(0,t.jsx)(n.code,{children:"table_name"}),") ON DELETE CASCADE"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.em,{children:"Note:"})," Basic structural information such as SQLite data type (INTEGER, REAL, TEXT, BLOB) and nullability (NOT NULL constraint) are defined directly in the ",(0,t.jsx)(n.code,{children:"CREATE TABLE"})," statement of the user table itself and are not duplicated here."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsxs)(n.strong,{children:["6.5. Table ",(0,t.jsx)(n.code,{children:"sdif_objects"})]})}),"\n",(0,t.jsx)(n.p,{children:"This table stores non-tabular data represented as JSON objects."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"object_name"})," (TEXT, PRIMARY KEY): A unique logical name identifying this object within the SDIF file."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"source_id"})," (INTEGER, NOT NULL): Reference to the original source of this object.\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["FOREIGN KEY (",(0,t.jsx)(n.code,{children:"source_id"}),") REFERENCES ",(0,t.jsx)(n.code,{children:"sdif_sources"}),"(",(0,t.jsx)(n.code,{children:"source_id"}),")"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"json_data"})," (TEXT, NOT NULL): The complete representation of the object as a valid JSON string [RFC8259]. SQLite's JSON functions [SQLITE_JSON] can be used to query this content."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"description"})," (TEXT): A semantic description of what the JSON object represents. ",(0,t.jsx)(n.strong,{children:"RECOMMENDED"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"schema_hint"})," (TEXT): A JSON schema [JSON-Schema] describing the expected structure of ",(0,t.jsx)(n.code,{children:"json_data"}),", stored as a JSON string. ",(0,t.jsx)(n.strong,{children:"RECOMMENDED"}),"."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsxs)(n.strong,{children:["6.6. Table ",(0,t.jsx)(n.code,{children:"sdif_media"})]})}),"\n",(0,t.jsx)(n.p,{children:"This table stores media files or other binary data."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"media_name"})," (TEXT, PRIMARY KEY): A unique logical name identifying this media resource."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"source_id"})," (INTEGER, NOT NULL): Reference to the original source of this media.\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["FOREIGN KEY (",(0,t.jsx)(n.code,{children:"source_id"}),") REFERENCES ",(0,t.jsx)(n.code,{children:"sdif_sources"}),"(",(0,t.jsx)(n.code,{children:"source_id"}),")"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"media_type"})," (TEXT, NOT NULL): The general type of the media. ",(0,t.jsx)(n.strong,{children:"RECOMMENDED"})," values for v1.0 include: ",(0,t.jsx)(n.code,{children:'"image"'}),", ",(0,t.jsx)(n.code,{children:'"audio"'}),", ",(0,t.jsx)(n.code,{children:'"video"'}),", ",(0,t.jsx)(n.code,{children:'"binary"'}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"media_data"})," (BLOB, NOT NULL): The raw binary content of the media file."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"description"})," (TEXT): A semantic description of what the media represents. ",(0,t.jsx)(n.strong,{children:"RECOMMENDED"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"original_format"}),' (TEXT): The specific format of the original file (e.g., "png", "jpeg", "mp3", "wav", "pdf"). ',(0,t.jsx)(n.strong,{children:"RECOMMENDED"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"technical_metadata"})," (TEXT): Technical metadata extracted or known about the media, stored as a JSON string (e.g., ",(0,t.jsx)(n.code,{children:'{"width": 300, "height": 150}'})," for an image, ",(0,t.jsx)(n.code,{children:'{"duration_seconds": 125}'})," for audio). ",(0,t.jsx)(n.strong,{children:"OPTIONAL"}),"."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsxs)(n.strong,{children:["6.7. Table ",(0,t.jsx)(n.code,{children:"sdif_semantic_links"})]})}),"\n",(0,t.jsxs)(n.p,{children:["This table is ",(0,t.jsx)(n.strong,{children:"OPTIONAL"})," and serves to define logical or semantic relationships between different elements in the SDIF file that cannot be represented by native SQLite FOREIGN KEY constraints (see Section 8)."]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"link_id"})," (INTEGER, PRIMARY KEY AUTOINCREMENT): A unique identifier for this semantic link."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"link_type"})," (TEXT, NOT NULL): The type of the relationship. ",(0,t.jsx)(n.strong,{children:"RECOMMENDED"})," values include: ",(0,t.jsx)(n.code,{children:'"annotation"'})," (links descriptive information to an element), ",(0,t.jsx)(n.code,{children:'"reference"'})," (generic link), ",(0,t.jsx)(n.code,{children:'"logical_foreign_key"'})," (e.g., to link a value in a JSON to a table column). Other types can be used but should be documented by the application."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"description"})," (TEXT): A textual description of the relationship. ",(0,t.jsx)(n.strong,{children:"RECOMMENDED"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"from_element_type"})," (TEXT, NOT NULL): The type of the source element. Possible values: ",(0,t.jsx)(n.code,{children:'"table"'}),", ",(0,t.jsx)(n.code,{children:'"column"'}),", ",(0,t.jsx)(n.code,{children:'"object"'}),", ",(0,t.jsx)(n.code,{children:'"media"'}),", ",(0,t.jsx)(n.code,{children:'"json_path"'}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"from_element_spec"})," (TEXT, NOT NULL): A JSON string specifying the exact source element (e.g., ",(0,t.jsx)(n.code,{children:'{"table_name": "deliveries", "column_name": "delivery_id"}'}),", ",(0,t.jsx)(n.code,{children:'{"object_name": "notes", "path": "$.[*].delivery_ref"}'}),")."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"to_element_type"})," (TEXT, NOT NULL): The type of the target element. Same possible values as ",(0,t.jsx)(n.code,{children:"from_element_type"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"to_element_spec"})," (TEXT, NOT NULL): A JSON string specifying the exact target element."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsxs)(n.strong,{children:["6.8. Table ",(0,t.jsx)(n.code,{children:"sdif_annotations"})," (OPTIONAL)"]})}),"\n",(0,t.jsxs)(n.p,{children:["This ",(0,t.jsx)(n.strong,{children:"OPTIONAL"})," table provides a centralized mechanism for attaching arbitrary metadata, defined by the user or the generation process, to various elements within the SDIF file."]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"annotation_id"})," (INTEGER, PRIMARY KEY AUTOINCREMENT): A unique identifier for each annotation record."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"target_element_type"})," (TEXT, NOT NULL): Specifies the type of SDIF element to which this annotation is attached. Values ",(0,t.jsx)(n.strong,{children:"MUST"})," be one of the following:\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:'"file"'}),": The annotation applies to the SDIF file as a whole."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:'"source"'}),": The annotation applies to a specific entry in ",(0,t.jsx)(n.code,{children:"sdif_sources"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:'"table"'}),": The annotation applies to a specific user data table (referenced in ",(0,t.jsx)(n.code,{children:"sdif_tables_metadata"}),")."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:'"column"'}),": The annotation applies to a specific column of a user data table (referenced in ",(0,t.jsx)(n.code,{children:"sdif_columns_metadata"}),")."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:'"object"'}),": The annotation applies to a specific JSON object in ",(0,t.jsx)(n.code,{children:"sdif_objects"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:'"media"'}),": The annotation applies to a specific media resource in ",(0,t.jsx)(n.code,{children:"sdif_media"}),"."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"target_element_spec"})," (TEXT, NOT NULL): A valid JSON string [RFC8259] that precisely identifies the target element specified by ",(0,t.jsx)(n.code,{children:"target_element_type"}),". The structure of this JSON depends on ",(0,t.jsx)(n.code,{children:"target_element_type"}),":\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["If ",(0,t.jsx)(n.code,{children:"target_element_type"})," is ",(0,t.jsx)(n.code,{children:'"file"'}),": The JSON ",(0,t.jsx)(n.strong,{children:"SHOULD"})," be an empty object ",(0,t.jsx)(n.code,{children:"{}"})," since there is only one file."]}),"\n",(0,t.jsxs)(n.li,{children:["If ",(0,t.jsx)(n.code,{children:"target_element_type"})," is ",(0,t.jsx)(n.code,{children:'"source"'}),": The JSON ",(0,t.jsx)(n.strong,{children:"MUST"})," contain the key ",(0,t.jsx)(n.code,{children:'"source_id"'})," with the corresponding ID in ",(0,t.jsx)(n.code,{children:"sdif_sources"}),". E.g.: ",(0,t.jsx)(n.code,{children:'{"source_id": 1}'}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["If ",(0,t.jsx)(n.code,{children:"target_element_type"})," is ",(0,t.jsx)(n.code,{children:'"table"'}),": The JSON ",(0,t.jsx)(n.strong,{children:"MUST"})," contain the key ",(0,t.jsx)(n.code,{children:'"table_name"'})," with the name of the user table. E.g.: ",(0,t.jsx)(n.code,{children:'{"table_name": "delivery_details"}'}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["If ",(0,t.jsx)(n.code,{children:"target_element_type"})," is ",(0,t.jsx)(n.code,{children:'"column"'}),": The JSON ",(0,t.jsx)(n.strong,{children:"MUST"})," contain the keys ",(0,t.jsx)(n.code,{children:'"table_name"'})," and ",(0,t.jsx)(n.code,{children:'"column_name"'}),". E.g.: ",(0,t.jsx)(n.code,{children:'{"table_name": "delivery_details", "column_name": "date_time"}'}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["If ",(0,t.jsx)(n.code,{children:"target_element_type"})," is ",(0,t.jsx)(n.code,{children:'"object"'}),": The JSON ",(0,t.jsx)(n.strong,{children:"MUST"})," contain the key ",(0,t.jsx)(n.code,{children:'"object_name"'}),". E.g.: ",(0,t.jsx)(n.code,{children:'{"object_name": "additional_notes"}'}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["If ",(0,t.jsx)(n.code,{children:"target_element_type"})," is ",(0,t.jsx)(n.code,{children:'"media"'}),": The JSON ",(0,t.jsx)(n.strong,{children:"MUST"})," contain the key ",(0,t.jsx)(n.code,{children:'"media_name"'}),". E.g.: ",(0,t.jsx)(n.code,{children:'{"media_name": "company_logo"}'}),"."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"annotation_content"})," (TEXT, NOT NULL): The content of the annotation itself, stored as a valid JSON string [RFC8259]. The internal structure of this JSON object is entirely defined by the user or application generating the annotation and is not constrained by the SDIF specification."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"7. User Data Storage"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"7.1. Tabular Data"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Each set of tabular data from a source (e.g., an Excel sheet, a CSV file) ",(0,t.jsx)(n.strong,{children:"SHOULD"})," be stored in its own SQL table within the SDIF file."]}),"\n",(0,t.jsxs)(n.li,{children:["The name of these tables ",(0,t.jsx)(n.strong,{children:"MUST NOT"})," start with ",(0,t.jsx)(n.code,{children:"sdif_"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["The definition of these tables (",(0,t.jsx)(n.code,{children:"CREATE TABLE"}),") ",(0,t.jsx)(n.strong,{children:"MUST"})," use appropriate SQLite data types (INTEGER, REAL, TEXT, BLOB) and ",(0,t.jsx)(n.strong,{children:"SHOULD"})," include relevant constraints (PRIMARY KEY, NOT NULL)."]}),"\n",(0,t.jsxs)(n.li,{children:["Each user data table ",(0,t.jsx)(n.strong,{children:"MUST"})," have a corresponding entry in ",(0,t.jsx)(n.code,{children:"sdif_tables_metadata"}),", and each column of these tables ",(0,t.jsx)(n.strong,{children:"MUST"})," have a corresponding entry in ",(0,t.jsx)(n.code,{children:"sdif_columns_metadata"}),"."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"7.2. Object Data (JSON)"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Structured non-tabular data (from native JSON, converted XML, etc.) ",(0,t.jsx)(n.strong,{children:"MUST"})," be stored as valid JSON strings in the ",(0,t.jsx)(n.code,{children:"json_data"})," column of the ",(0,t.jsx)(n.code,{children:"sdif_objects"})," table."]}),"\n",(0,t.jsxs)(n.li,{children:["Each logical JSON object ",(0,t.jsx)(n.strong,{children:"MUST"})," have a unique entry in ",(0,t.jsx)(n.code,{children:"sdif_objects"}),", identified by ",(0,t.jsx)(n.code,{children:"object_name"}),"."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"7.3. Media and Binary Data"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Media files or other relevant binary data ",(0,t.jsx)(n.strong,{children:"MUST"})," be stored as BLOBs in the ",(0,t.jsx)(n.code,{children:"media_data"})," column of the ",(0,t.jsx)(n.code,{children:"sdif_media"})," table."]}),"\n",(0,t.jsxs)(n.li,{children:["Each logical media file ",(0,t.jsx)(n.strong,{children:"MUST"})," have a unique entry in ",(0,t.jsx)(n.code,{children:"sdif_media"}),", identified by ",(0,t.jsx)(n.code,{children:"media_name"}),"."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"8. Relationships Between Data"})}),"\n",(0,t.jsxs)(n.p,{children:["8.1. ",(0,t.jsx)(n.strong,{children:"Primary Keys:"})," Primary keys for user data tables ",(0,t.jsx)(n.strong,{children:"MUST"})," be defined using the standard SQL ",(0,t.jsx)(n.code,{children:"PRIMARY KEY"})," syntax when creating the table."]}),"\n",(0,t.jsxs)(n.p,{children:["8.2. ",(0,t.jsx)(n.strong,{children:"Foreign Keys Between Tables:"})," When relationships exist between different user data tables, they ",(0,t.jsx)(n.strong,{children:"MUST"})," be implemented using SQLite's native ",(0,t.jsx)(n.code,{children:"FOREIGN KEY"})," constraints. This is the ",(0,t.jsx)(n.strong,{children:"REQUIRED"})," method for representing relational links between tables."]}),"\n",(0,t.jsxs)(n.p,{children:["8.3. ",(0,t.jsx)(n.strong,{children:"Other Semantic Links:"})," For relationships that cannot be modeled by native foreign keys (e.g., linking a value extracted from JSON via JSONPath to a table column, annotating a table with a descriptive JSON object, linking a media to a specific table), the ",(0,t.jsx)(n.code,{children:"sdif_semantic_links"})," table (Section 6.7) ",(0,t.jsx)(n.strong,{children:"MAY"})," be used. Its use ",(0,t.jsx)(n.strong,{children:"SHOULD"})," be reserved for cases where ",(0,t.jsx)(n.code,{children:"FOREIGN KEY"})," is not applicable."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"9. Future Considerations"})}),"\n",(0,t.jsxs)(n.p,{children:["Version 1.0 of SDIF mandates the use of SQLite as the file format and underlying database engine. Future versions of this specification ",(0,t.jsx)(n.strong,{children:"MAY"})," consider defining equivalent schemas for other file-oriented database engines (such as DuckDB [DUCKDB]), if clear use cases and significant advantages (e.g., analytical performance) justify it. However, ensuring compatibility or conversion between different database file formats represents a significant challenge that is not addressed in this version."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Appendix A. Example Schema and Data (Non-Normative)"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.em,{children:"This appendix illustrates the structure of a simple SDIF file."})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"A.1. Data Sources"})}),"\n",(0,t.jsx)(n.p,{children:"Suppose the data comes from two files:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"deliveries_oct2024.xlsx"}),' (containing a "Details" sheet)']}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"operator_notes.json"})}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"A.2. SDIF Metadata Tables Content"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"sdif_properties"})})," (1 row)"]}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"sdif_version"}),(0,t.jsx)(n.th,{children:"creation_timestamp"})]})}),(0,t.jsx)(n.tbody,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:'"1.0"'}),(0,t.jsx)(n.td,{children:'"2024-11-15T14:30:00Z"'})]})})]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"sdif_sources"})})," (2 rows)"]}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"source_id"}),(0,t.jsx)(n.th,{children:"original_file_name"}),(0,t.jsx)(n.th,{children:"original_file_type"}),(0,t.jsx)(n.th,{children:"source_description"}),(0,t.jsx)(n.th,{children:"processing_timestamp"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"1"}),(0,t.jsx)(n.td,{children:"deliveries_oct2024.xlsx"}),(0,t.jsx)(n.td,{children:"xlsx"}),(0,t.jsx)(n.td,{children:"Monthly deliveries file"}),(0,t.jsx)(n.td,{children:'"2024-11-15T14:25:10Z"'})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"2"}),(0,t.jsx)(n.td,{children:"operator_notes.json"}),(0,t.jsx)(n.td,{children:"json"}),(0,t.jsx)(n.td,{children:"Additional notes from operators"}),(0,t.jsx)(n.td,{children:'"2024-11-15T14:25:15Z"'})]})]})]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"sdif_tables_metadata"})})," (1 row)"]}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"table_name"}),(0,t.jsx)(n.th,{children:"source_id"}),(0,t.jsx)(n.th,{children:"description"}),(0,t.jsx)(n.th,{children:"original_identifier"}),(0,t.jsx)(n.th,{children:"row_count"})]})}),(0,t.jsx)(n.tbody,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"delivery_details"})}),(0,t.jsx)(n.td,{children:"1"}),(0,t.jsx)(n.td,{children:"Detail of each delivery."}),(0,t.jsx)(n.td,{children:"Details"}),(0,t.jsx)(n.td,{children:"850"})]})})]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"sdif_columns_metadata"})})," (Example for 2 columns)"]}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"table_name"}),(0,t.jsx)(n.th,{children:"column_name"}),(0,t.jsx)(n.th,{children:"description"}),(0,t.jsx)(n.th,{children:"original_column_name"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"delivery_details"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"delivery_id"})}),(0,t.jsx)(n.td,{children:"Unique delivery identifier."}),(0,t.jsx)(n.td,{children:"NULL"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"delivery_details"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"date_time"})}),(0,t.jsx)(n.td,{children:"Date/time of delivery completion."}),(0,t.jsx)(n.td,{children:'"DD/MM/YYYY HH:MM"'})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"..."}),(0,t.jsx)(n.td,{children:"..."}),(0,t.jsx)(n.td,{children:"..."}),(0,t.jsx)(n.td,{children:"..."})]})]})]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"delivery_details"})})," (5 rows)"]}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"delivery_id"}),(0,t.jsx)(n.th,{children:"customer_num"}),(0,t.jsx)(n.th,{children:"date_time"}),(0,t.jsx)(n.th,{children:"product"}),(0,t.jsx)(n.th,{children:"quantity_l"}),(0,t.jsx)(n.th,{children:"amount_eur"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"DEL-001"}),(0,t.jsx)(n.td,{children:"CUST-101"}),(0,t.jsx)(n.td,{children:"2024-10-15T10:30:00Z"}),(0,t.jsx)(n.td,{children:"Diesel"}),(0,t.jsx)(n.td,{children:"1500.5"}),(0,t.jsx)(n.td,{children:"2250.75"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"DEL-002"}),(0,t.jsx)(n.td,{children:"CUST-203"}),(0,t.jsx)(n.td,{children:"2024-10-15T11:45:10Z"}),(0,t.jsx)(n.td,{children:"Heating Oil"}),(0,t.jsx)(n.td,{children:"800.0"}),(0,t.jsx)(n.td,{children:"1120.00"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"DEL-003"}),(0,t.jsx)(n.td,{children:"CUST-101"}),(0,t.jsx)(n.td,{children:"2024-10-16T09:15:00Z"}),(0,t.jsx)(n.td,{children:"Diesel"}),(0,t.jsx)(n.td,{children:"200.75"}),(0,t.jsx)(n.td,{children:"301.13"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"DEL-004"}),(0,t.jsx)(n.td,{children:"CUST-502"}),(0,t.jsx)(n.td,{children:"2024-10-16T14:00:00Z"}),(0,t.jsx)(n.td,{children:"AdBlue"}),(0,t.jsx)(n.td,{children:"50.0"}),(0,t.jsx)(n.td,{children:"45.00"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"DEL-005"}),(0,t.jsx)(n.td,{children:"CUST-203"}),(0,t.jsx)(n.td,{children:"2024-10-17T08:50:00Z"}),(0,t.jsx)(n.td,{children:"Diesel"}),(0,t.jsx)(n.td,{children:"1200.0"}),(0,t.jsx)(n.td,{children:"1800.00"})]})]})]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"sdif_objects"})})," (1 row)"]}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"object_name"}),(0,t.jsx)(n.th,{children:"source_id"}),(0,t.jsx)(n.th,{children:"json_data"}),(0,t.jsx)(n.th,{children:"description"}),(0,t.jsx)(n.th,{children:"schema_hint (JSON Schema as text)"})]})}),(0,t.jsx)(n.tbody,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"additional_notes"})}),(0,t.jsx)(n.td,{children:"2"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:'[{"delivery_ref": "DEL-001", "note": "Customer absent"}, {"delivery_ref": "DEL-003", ...}]'})}),(0,t.jsx)(n.td,{children:"Specific notes per delivery."}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:'{"type": "array", "items": {...}}'})})]})})]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"sdif_media"})})," (0 rows in this simple example)"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"sdif_semantic_links"})})," (1 row to link JSON to table)"]}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"link_id"}),(0,t.jsx)(n.th,{children:"link_type"}),(0,t.jsx)(n.th,{children:"description"}),(0,t.jsx)(n.th,{children:"from_element_type"}),(0,t.jsx)(n.th,{children:"from_element_spec"}),(0,t.jsx)(n.th,{children:"to_element_type"}),(0,t.jsx)(n.th,{children:"to_element_spec"})]})}),(0,t.jsx)(n.tbody,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"1"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"logical_foreign_key"})}),(0,t.jsx)(n.td,{children:"Links delivery ref. in notes to ID."}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"json_path"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:'{"object_name": "additional_notes", "path": "$.[*].delivery_ref"}'})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"column"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:'{"table_name": "delivery_details", "column_name": "delivery_id"}'})})]})})]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,d.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(o,{...e})}):o(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>c});var s=i(6540);const t={},d=s.createContext(t);function r(e){const n=s.useContext(d);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),s.createElement(d.Provider,{value:n},e.children)}}}]);