"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2370],{717:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"transformation_builders/syncpulse_transformation_builder","title":"Syncpulse Transformation Builder","description":"\u26a0\ufe0f EXPERIMENTAL: This is an experimental implementation not intended for production use. Despite the async API, there may be blocking I/O calls that could impact performance in production async environments.","source":"@site/docs/transformation_builders/syncpulse_transformation_builder.md","sourceDirName":"transformation_builders","slug":"/transformation_builders/syncpulse_transformation_builder","permalink":"/satif/docs/transformation_builders/syncpulse_transformation_builder","draft":false,"unlisted":false,"editUrl":"https://github.com/syncpulse-solutions/satif/tree/main/docs/docs/transformation_builders/syncpulse_transformation_builder.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Transformation Builders","permalink":"/satif/docs/transformation-builders"},"next":{"title":"Adapters","permalink":"/satif/docs/adapters"}}');var r=t(4848),i=t(8453);const o={sidebar_position:1},a="Syncpulse Transformation Builder",l={},d=[{value:"1. Basic Usage",id:"1-basic-usage",level:2},{value:"2. The Build Method",id:"2-the-build-method",level:2},{value:"3. How It Works",id:"3-how-it-works",level:2},{value:"4. Output Example Files",id:"4-output-example-files",level:2},{value:"5. Using the Generated Code",id:"5-using-the-generated-code",level:2},{value:"6. Implementing Your Own Builder",id:"6-implementing-your-own-builder",level:2}];function c(e){const n={blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"syncpulse-transformation-builder",children:"Syncpulse Transformation Builder"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"\u26a0\ufe0f EXPERIMENTAL: This is an experimental implementation not intended for production use. Despite the async API, there may be blocking I/O calls that could impact performance in production async environments."})}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"SyncpulseTransformationBuilder"})," is an AI Agent that automatically generates transformation code to convert standardized SDIF data into target output files. It uses examples and optional instructions to create Python code that transforms your data to match the desired output structure and format."]}),"\n",(0,r.jsx)(n.h2,{id:"1-basic-usage",children:"1. Basic Usage"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from satif_ai.transformation_builders.syncpulse import SyncpulseTransformationBuilder\nfrom pathlib import Path\n\n# Initialize MCP components\n\n# Initialize the transformation builder\nbuilder = SyncpulseTransformationBuilder(\n    mcp_server=mcp_server,\n    mcp_session=mcp_session,\n    llm_model="o4-mini"\n)\n\n# Generate transformation code\ntransformation_code = await builder.build(\n    sdif="input_data.sdif",\n    output_target_files={"example_output.csv": "output.csv"},\n    instructions="Convert the customer data to CSV with columns: id, name, email"\n)\n\n# Save the generated code to a file\nwith open("transformation.py", "w") as f:\n    f.write(transformation_code)\n\n# The generated code can now be used with a CodeTransformer\n'})}),"\n",(0,r.jsx)(n.h2,{id:"2-the-build-method",children:"2. The Build Method"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'transformation_code = await builder.build(\n    sdif: Path,                             # Required: Input SDIF file path\n    output_target_files: Dict[FilePath, str] | List[FilePath] | FilePath,  # Required: Output example files\n    output_sdif: Optional[Path] = None,     # Optional: Target SDIF output path\n    instructions: str = "",                 # Optional: Natural language instructions\n    schema_only: bool = False,              # Optional: Focus on output schema without data\n    representer_kwargs: Optional[Dict[str, Any]] = None  # Optional: Additional parameters for representers\n)\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"sdif"})}),": Path to the input SDIF file containing standardized data"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"output_target_files"})}),": Target output files in one of these formats:\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"A dictionary mapping file paths to their display names"}),"\n",(0,r.jsx)(n.li,{children:"A list of file paths"}),"\n",(0,r.jsx)(n.li,{children:"A single file path"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"output_sdif"})}),": Optional path to a target SDIF file"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"instructions"})}),": Natural language instructions for the transformation"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"schema_only"})}),": When True, focuses on structural transformation from the example file"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"representer_kwargs"})}),": Additional parameters passed to file representers"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"3-how-it-works",children:"3. How It Works"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"SyncpulseTransformationBuilder"})," follows these steps to generate transformation code:"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Input Analysis"}),": Examines the structure and content of the input SDIF file"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Target Analysis"}),": Analyzes the example output files to understand the desired format"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Prompt Construction"}),": Creates a detailed prompt combining the input analysis, output examples, and user instructions"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Code Generation"}),": Uses an AI agent to generate Python code that performs the transformation"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Code Testing"}),": Executes the generated code against the input SDIF and compares the result with the target examples"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Refinement"}),": If the output doesn't match the target, the code is refined and tested again"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"4-output-example-files",children:"4. Output Example Files"}),"\n",(0,r.jsx)(n.p,{children:"The builder uses example output files to understand the desired transformation. These files should:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Have the same structure and format as your desired output"}),"\n",(0,r.jsx)(n.li,{children:"Contain representative data (though not necessarily the exact data you expect)"}),"\n",(0,r.jsx)(n.li,{children:"Include all fields and relationships that should appear in the final output"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Example output files can be provided in several ways:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# Single file\noutput_target_files = "example_output.xlsx"\n\n# Multiple files\noutput_target_files = ["customers.csv", "orders.json"]\n\n# Files with custom display names\noutput_target_files = {\n    "path/to/example_customers.csv": "customers.csv",\n    "path/to/example_orders.json": "orders.json"\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"5-using-the-generated-code",children:"5. Using the Generated Code"}),"\n",(0,r.jsxs)(n.p,{children:["The code generated by the builder can be executed using a ",(0,r.jsx)(n.code,{children:"CodeTransformer"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from satif_sdk.transformers import CodeTransformer\nfrom pathlib import Path\n\n# Load the generated transformation code\nwith open("transformation.py", "r") as f:\n    transformation_code = f.read()\n\n# Create a transformer\ntransformer = CodeTransformer(function=transformation_code)\n\n# Execute the transformation on real data\nresult = transformer.export(\n    sdif="real_data.sdif",\n    output_path="output_directory"\n)\n'})}),"\n",(0,r.jsx)(n.h2,{id:"6-implementing-your-own-builder",children:"6. Implementing Your Own Builder"}),"\n",(0,r.jsxs)(n.p,{children:["We recommend implementing your own ",(0,r.jsx)(n.code,{children:"TransformationBuilder"})," by subclassing the base class:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from satif_core import AsyncTransformationBuilder\nfrom pathlib import Path\nfrom typing import Dict, Optional, Any\n\nclass CustomTransformationBuilder(AsyncTransformationBuilder):\n    """Custom implementation of a transformation builder."""\n\n    def __init__(self, **kwargs):\n        # Initialize your builder\n        pass\n\n    async def build(\n        self,\n        sdif: Path,\n        output_target_files: Dict[Path, str],\n        instructions: str = "",\n        **kwargs\n    ) -> str:\n        # Implement your code generation logic\n        # Return the generated transformation code as a string\n        pass\n'})})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var s=t(6540);const r={},i=s.createContext(r);function o(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);