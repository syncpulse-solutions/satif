"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5787],{3691:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>d,default:()=>p,frontMatter:()=>r,metadata:()=>i,toc:()=>o});const i=JSON.parse('{"id":"api_reference/satif_ai/adapters/tidy","title":"satif_ai.adapters.tidy","description":"execute\\\\tidy\\\\adaptation","source":"@site/docs/api_reference/satif_ai/adapters/tidy.md","sourceDirName":"api_reference/satif_ai/adapters","slug":"/api_reference/satif_ai/adapters/tidy","permalink":"/satif/docs/api_reference/satif_ai/adapters/tidy","draft":false,"unlisted":false,"editUrl":"https://github.com/syncpulse-solutions/satif/tree/main/docs/docs/api_reference/satif_ai/adapters/tidy.md","tags":[],"version":"current","frontMatter":{"sidebar_label":"tidy","title":"satif_ai.adapters.tidy"},"sidebar":"tutorialSidebar","previous":{"title":"index","permalink":"/satif/docs/api_reference/"},"next":{"title":"standardize","permalink":"/satif/docs/api_reference/satif_ai/standardize"}}');var s=t(4848),a=t(8453);const r={sidebar_label:"tidy",title:"satif_ai.adapters.tidy"},d=void 0,c={},o=[{value:"execute_tidy_adaptation",id:"execute_tidy_adaptation",level:4},{value:"TidyAdapter Objects",id:"tidyadapter-objects",level:2},{value:"__init__",id:"__init__",level:4},{value:"parse_code",id:"parse_code",level:4},{value:"adapt",id:"adapt",level:4}];function l(e){const n={blockquote:"blockquote",code:"code",em:"em",h2:"h2",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h4,{id:"execute_tidy_adaptation",children:"execute_tidy_adaptation"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"@function_tool\nasync def execute_tidy_adaptation(code: str) -> str\n"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Tool implementation for the agent to execute the tidying adaptation code.\nRuns the code against a ",(0,s.jsx)(n.em,{children:"copy"})," of the input SDIF, creating a ",(0,s.jsx)(n.em,{children:"new"})," output SDIF,\nand returns a sample analysis of the modified output."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"tidyadapter-objects",children:"TidyAdapter Objects"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"class TidyAdapter(Adapter)\n"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"Uses an AI agent (via agents library) to generate and execute Python code\nthat transforms tables in an SDIF file into a tidy format using CodeAdapter."}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"__init__",children:"__init__"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'def __init__(mcp_server: MCPServer,\n             mcp_session: ClientSession,\n             llm_model: str = "o4-mini",\n             max_iterations: int = 5)\n'})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"Initialize the TidyAdapter."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"mcp_server"})," - An instance of MCPServer for agent communication."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"mcp_session"})," - An instance of ClientSession for resource/prompt fetching."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"llm_model"})," - Name of the language model to use for the agent."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"max_iterations"})," - Maximum number of attempts the agent gets to refine the code."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"parse_code",children:"parse_code"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"def parse_code(code_text: str) -> Optional[str]\n"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"Extracts Python code from markdown code blocks."}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"adapt",children:"adapt"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"async def adapt(sdif: Union[SDIFPath, SDIFDatabase]) -> Datasource\n"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"Transforms the data in the input SDIF to be tidy using an AI agent."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"sdif"})," - The input SDIF database instance. Connection will be closed."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Returns"}),":"]}),"\n",(0,s.jsx)(n.p,{children:"Path to the new SDIF file containing the tidied data."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Raises"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"FileNotFoundError"})," - If the input SDIF path doesn't exist."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"RuntimeError"})," - If the agent fails to produce valid tidy code."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Exception"})," - For unexpected errors during the process."]}),"\n"]}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>d});var i=t(6540);const s={},a=i.createContext(s);function r(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);