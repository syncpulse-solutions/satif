"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8651],{6574:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>h,frontMatter:()=>o,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"api_reference/satif_core/satif_sdk/transformers/code","title":"satif_sdk.transformers.code","description":"ExportError Objects","source":"@site/docs/api_reference/satif_core/satif_sdk/transformers/code.md","sourceDirName":"api_reference/satif_core/satif_sdk/transformers","slug":"/api_reference/satif_core/satif_sdk/transformers/code","permalink":"/satif/docs/api_reference/satif_core/satif_sdk/transformers/code","draft":false,"unlisted":false,"editUrl":"https://github.com/syncpulse-solutions/satif/tree/main/docs/docs/api_reference/satif_core/satif_sdk/transformers/code.md","tags":[],"version":"current","frontMatter":{"sidebar_label":"code","title":"satif_sdk.transformers.code"},"sidebar":"tutorialSidebar","previous":{"title":"xlsx","permalink":"/satif/docs/api_reference/satif_core/satif_sdk/standardizers/xlsx"},"next":{"title":"matplotlib","permalink":"/satif/docs/api_reference/satif_core/satif_sdk/transformers/matplotlib"}}');var t=s(4848),i=s(8453);const o={sidebar_label:"code",title:"satif_sdk.transformers.code"},c=void 0,a={},l=[{value:"ExportError Objects",id:"exporterror-objects",level:2},{value:"CodeTransformer Objects",id:"codetransformer-objects",level:2},{value:"transform",id:"transform",level:4},{value:"export",id:"export",level:4},{value:"transformation",id:"transformation",level:4}];function d(e){const n={blockquote:"blockquote",code:"code",h2:"h2",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"exporterror-objects",children:"ExportError Objects"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"class ExportError(Exception)\n"})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"Custom exception for export errors."}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"codetransformer-objects",children:"CodeTransformer Objects"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"class CodeTransformer(Transformer)\n"})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"Executes custom Python code to transform data from an SDIF database into desired output files."}),"\n",(0,t.jsx)(n.p,{children:"Responsibilities:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Initializes with transformation logic (callable, code string, or file path) and a CodeExecutor."}),"\n",(0,t.jsx)(n.li,{children:"When transforming with a direct callable: Manages SQLite connection setup (attaching SDIFs)\nand executes the callable in the current environment."}),"\n",(0,t.jsxs)(n.li,{children:["When transforming with a code string/file: Prepares SDIF source information and delegates\nto the configured ",(0,t.jsx)(n.code,{children:"CodeExecutor"}),", which then handles DB setup and code execution\nin its own environment (e.g., locally or sandboxed)."]}),"\n",(0,t.jsx)(n.li,{children:"Exports the results returned by the transformation logic to files or a zip archive."}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"function"})," - The transformation logic (Python callable, code string, or Path to script)."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"function_name"})," - Name of the function to call if ",(0,t.jsx)(n.code,{children:"function"}),' is a code string/file.\nDefaults to "transform". Ignored if ',(0,t.jsx)(n.code,{children:"function"})," is a callable."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"code_executor"})," - An instance of a ",(0,t.jsx)(n.code,{children:"CodeExecutor"})," subclass. If None and transformation logic\nis a code string or file path, a ",(0,t.jsx)(n.code,{children:"LocalCodeExecutor"})," is instantiated."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"extra_context"})," - Dictionary of extra objects to pass to the transformation function's context\nor make available in the executor's global scope."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"db_schema_prefix"}),' - Prefix for auto-generated schema names when a list of SDIFs is given.\nDefaults to "db".\nTransformation Function Signature:\nThe transform function should accept these parameters:\n',(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"function"}),"0 (sqlite3.Connection): A connection to an in-memory SQLite\ndatabase with all input SDIF files attached as schemas."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"function"}),"1 (Dict[str, Any], optional): Extra context values if needed."]}),"\n"]}),"\nThe function MUST return a dictionary (",(0,t.jsx)(n.code,{children:"function"}),"2) where:\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:'Keys (str): Relative output filenames (e.g., "orders_extract.csv", "summary/report.json").'}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Values (Any): Data to write (e.g., ",(0,t.jsx)(n.code,{children:"function"}),"3, ",(0,t.jsx)(n.code,{children:"function"}),"4, ",(0,t.jsx)(n.code,{children:"function"}),"5, ",(0,t.jsx)(n.code,{children:"function"}),"6, ",(0,t.jsx)(n.code,{children:"function"}),"7).\nThe file extension in the key typically determines the output format."]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Example"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"`function`8\n"})}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"transform",children:"transform"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"def transform(\n    sdif: Union[SDIFPath, List[SDIFPath], SDIFDatabase, Dict[str, SDIFPath]]\n) -> Dict[str, Any]\n"})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"Transforms data from SDIF input(s) using the configured logic."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["If a direct Python callable was provided to ",(0,t.jsx)(n.code,{children:"__init__"}),", this method sets up\nthe SQLite connection, ATTACHes databases, executes the callable directly,\nand then cleans up the connection."]}),"\n",(0,t.jsxs)(n.li,{children:["If a code string or file path was provided, this method prepares a map of\nSDIF sources and delegates to ",(0,t.jsx)(n.code,{children:"_execute_transformation"}),", which in turn uses\nthe configured ",(0,t.jsx)(n.code,{children:"CodeExecutor"}),". The ",(0,t.jsx)(n.code,{children:"CodeExecutor"})," is then responsible for\ndatabase setup and code execution within its own environment."]}),"\n",(0,t.jsxs)(n.li,{children:["Handles ",(0,t.jsx)(n.code,{children:"SDIFDatabase"})," instances by using their pre-existing connection if\na direct callable is used."]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"export",children:"export"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'def export(sdif: Union[SDIFPath, List[SDIFPath], SDIFDatabase, Dict[str,\n                                                                    SDIFPath]],\n           output_path: FilePath = Path("."),\n           zip_archive: bool = False) -> Path\n'})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"Transforms data from SDIF input(s) and exports results to files.\nThis is a convenience method that combines transform() and export()."}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"sdif"})," - Input SDIF data source. Can be:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"A single path (str/Path)"}),"\n",(0,t.jsx)(n.li,{children:"A list of paths"}),"\n",(0,t.jsx)(n.li,{children:"An SDIFDatabase instance"}),"\n",(0,t.jsx)(n.li,{children:'A dictionary mapping schema names to paths (e.g., {"customers": "customers.sdif"})'}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"output_path"})," - Path to the output file (if zip_archive=True or single output)\nor directory (if multiple outputs). Defaults to current directory."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"zip_archive"})," - If True, package all output files into a single ZIP archive\nat the specified output_path."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Returns"}),":"]}),"\n",(0,t.jsx)(n.p,{children:"Path to the created output file or directory."}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Raises"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"ExportError"})," - If any error occurs during transformation or writing."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"ValueError"})," - If input arguments are invalid."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"FileNotFoundError"})," - If an input SDIF file does not exist."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"TypeError"})," - If the 'sdif' argument is of an unsupported type."]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"transformation",children:"transformation"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"def transformation(func=None, name=None)\n"})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"Decorator to register a function as a transformation.\nCan be used with or without arguments."}),"\n",(0,t.jsx)(n.p,{children:"@transformation\ndef my_transform(conn): # conn is sqlite3.Connection\n..."}),"\n",(0,t.jsx)(n.p,{children:'@transformation(name="custom_name")\ndef my_transform_custom_name(conn, context: dict):\n...'}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"func"})," - The function to decorate."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"name"})," - Optional custom name for the transformation. If None, function's ",(0,t.jsx)(n.strong,{children:"name"})," is used."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Returns"}),":"]}),"\n",(0,t.jsx)(n.p,{children:"The decorated function, now registered and marked as a transformation."}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>c});var r=s(6540);const t={},i=r.createContext(t);function o(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);