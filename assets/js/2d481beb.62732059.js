"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3797],{3245:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>i,default:()=>h,frontMatter:()=>c,metadata:()=>d,toc:()=>o});const d=JSON.parse('{"id":"api_reference/satif_sdk/adapters/code","title":"satif_sdk.adapters.code","description":"AdapterError Objects","source":"@site/docs/api_reference/satif_sdk/adapters/code.md","sourceDirName":"api_reference/satif_sdk/adapters","slug":"/api_reference/satif_sdk/adapters/code","permalink":"/satif/docs/api_reference/satif_sdk/adapters/code","draft":false,"unlisted":false,"editUrl":"https://github.com/syncpulse-solutions/satif/tree/main/docs/docs/api_reference/satif_sdk/adapters/code.md","tags":[],"version":"current","frontMatter":{"sidebar_label":"code","title":"satif_sdk.adapters.code"},"sidebar":"tutorialSidebar","previous":{"title":"types","permalink":"/satif/docs/api_reference/satif_core/types"},"next":{"title":"e2b_executor","permalink":"/satif/docs/api_reference/satif_sdk/code_executors/e2b_executor"}}');var a=t(4848),s=t(8453);const c={sidebar_label:"code",title:"satif_sdk.adapters.code"},i=void 0,r={},o=[{value:"AdapterError Objects",id:"adaptererror-objects",level:2},{value:"CodeAdapter Objects",id:"codeadapter-objects",level:2},{value:"adapt",id:"adapt",level:4}];function l(e){const n={blockquote:"blockquote",code:"code",h2:"h2",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h2,{id:"adaptererror-objects",children:"AdapterError Objects"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"class AdapterError(Exception)\n"})}),"\n",(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsx)(n.p,{children:"Custom exception for adapter errors."}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"codeadapter-objects",children:"CodeAdapter Objects"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"class CodeAdapter(Adapter)\n"})}),"\n",(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsx)(n.p,{children:"Executes custom Python code to adapt data within an SDIF database,\nproducing a new, adapted SDIF database file."}),"\n",(0,a.jsx)(n.p,{children:"The adaptation logic can be provided as:"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:["A direct Python callable:\nThe function should modify the passed ",(0,a.jsx)(n.code,{children:"SDIFDatabase"})," instance in-place.\nSignatures:"]}),"\n"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.code,{children:"def adapt(db: SDIFDatabase) -> None:"})}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.code,{children:"def adapt(db: SDIFDatabase, context: Dict[str, Any]) -> None:"})}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.ol,{start:"2",children:["\n",(0,a.jsxs)(n.li,{children:["A string containing Python code or a Path to a Python script file:\nThis code will be executed by a ",(0,a.jsx)(n.code,{children:"CodeExecutor"}),".\nThe function identified by ",(0,a.jsx)(n.code,{children:"function_name"})," within the code should be\nprepared to accept specific arguments provided by the executor:"]}),"\n"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["EITHER ",(0,a.jsx)(n.code,{children:"db: SDIFDatabase"})," (an instance connected to the database to be adapted)"]}),"\n",(0,a.jsxs)(n.li,{children:["OR ",(0,a.jsx)(n.code,{children:"conn: sqlite3.Connection"})," (a direct connection to that database)."]}),"\n",(0,a.jsxs)(n.li,{children:["Optionally, ",(0,a.jsx)(n.code,{children:"context: Dict[str, Any]"})," if it needs ",(0,a.jsx)(n.code,{children:"extra_context"}),"."]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"Example Signatures:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"def adapt(db: SDIFDatabase) -> Dict[str, Any]:"})}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"def adapt(db: SDIFDatabase) -> None:"}),"0"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"def adapt(db: SDIFDatabase) -> None:"}),"1"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"def adapt(db: SDIFDatabase) -> None:"}),"2"]}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["This function ",(0,a.jsx)(n.strong,{children:"must return a dictionary"})," (e.g., ",(0,a.jsx)(n.code,{children:"def adapt(db: SDIFDatabase) -> None:"}),"3) to comply with the\n",(0,a.jsx)(n.code,{children:"CodeExecutor"})," interface, though the dictionary content is ignored by ",(0,a.jsx)(n.code,{children:"def adapt(db: SDIFDatabase) -> None:"}),"5.\nIf ",(0,a.jsx)(n.code,{children:"def adapt(db: SDIFDatabase) -> None:"}),'6 is used, the database being adapted is also ATTACHed with the schema name "db"\n(e.g., ',(0,a.jsx)(n.code,{children:"def adapt(db: SDIFDatabase) -> None:"}),"7 refers to a table in the main file).\nIf ",(0,a.jsx)(n.code,{children:"db: SDIFDatabase"})," is used, methods on the ",(0,a.jsx)(n.code,{children:"def adapt(db: SDIFDatabase) -> None:"}),"9 object operate directly on this main database file."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"def adapt(db: SDIFDatabase, context: Dict[str, Any]) -> None:"}),"0 - The callable, code string, or file path containing the adaptation logic."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"function_name"}),' - Name of the function to execute (defaults to "adapt").\nUsed when ',(0,a.jsx)(n.code,{children:"def adapt(db: SDIFDatabase, context: Dict[str, Any]) -> None:"}),"0 is a code string or file path."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"def adapt(db: SDIFDatabase, context: Dict[str, Any]) -> None:"}),"3 - Optional ",(0,a.jsx)(n.code,{children:"CodeExecutor"})," instance. If ",(0,a.jsx)(n.code,{children:"def adapt(db: SDIFDatabase, context: Dict[str, Any]) -> None:"}),"0 is code/file\nand this is None, a ",(0,a.jsx)(n.code,{children:"def adapt(db: SDIFDatabase, context: Dict[str, Any]) -> None:"}),"6 will be used by default."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"extra_context"})," - Optional dictionary of objects to make available.\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["For direct callables: passed as ",(0,a.jsx)(n.code,{children:"def adapt(db: SDIFDatabase, context: Dict[str, Any]) -> None:"}),"8 argument if accepted."]}),"\n",(0,a.jsxs)(n.li,{children:["For code via executor: passed to ",(0,a.jsx)(n.code,{children:"def adapt(db: SDIFDatabase, context: Dict[str, Any]) -> None:"}),"9 and\nmade available in the execution scope and as ",(0,a.jsx)(n.code,{children:"def adapt(db: SDIFDatabase, context: Dict[str, Any]) -> None:"}),"8 argument."]}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"CodeExecutor"}),'1 - Suffix for the output adapted file (defaults to "_adapted").']}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"CodeExecutor"}),"2 - If True and a ",(0,a.jsx)(n.code,{children:"def adapt(db: SDIFDatabase, context: Dict[str, Any]) -> None:"}),"6 is auto-created,\nits security warning for local execution is suppressed.\nDefaults to False."]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.h4,{id:"adapt",children:"adapt"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"def adapt(sdif: SDIFPath) -> Path\n"})}),"\n",(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsx)(n.p,{children:"Applies the adaptation logic to the input SDIF database file,\nproducing a new adapted SDIF file."}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"sdif"})," - The SDIF data source(s) to adapt. This can be:\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"A single SDIF file path (str or Path)."}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:["An ",(0,a.jsx)(n.code,{children:"SDIFDatabase"})," instance."]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Returns"}),":"]}),"\n",(0,a.jsx)(n.p,{children:"The path to the newly created adapted SDIF file."}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Raises"}),":"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"FileNotFoundError"})," - If the input SDIF file path does not exist."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"AdapterError"})," - If code execution or adaptation logic fails."]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>c,x:()=>i});var d=t(6540);const a={},s=d.createContext(a);function c(e){const n=d.useContext(s);return d.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:c(e.components),d.createElement(s.Provider,{value:n},e.children)}}}]);