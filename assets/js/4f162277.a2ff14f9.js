"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5746],{422:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>d,default:()=>h,frontMatter:()=>a,metadata:()=>t,toc:()=>o});const t=JSON.parse('{"id":"standardizers/ai_csv_standardizer","title":"AI CSV Standardizer","description":"\u26a0\ufe0f EXPERIMENTAL: This is an experimental implementation not intended for production use. Despite the async API, there may be blocking I/O calls that could impact performance in production async environments.","source":"@site/docs/standardizers/ai_csv_standardizer.md","sourceDirName":"standardizers","slug":"/standardizers/ai_csv_standardizer","permalink":"/satif/docs/standardizers/ai_csv_standardizer","draft":false,"unlisted":false,"editUrl":"https://github.com/syncpulse-solutions/satif/tree/main/docs/docs/standardizers/ai_csv_standardizer.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"AIStandardizer","permalink":"/satif/docs/standardizers/ai_standardizer"},"next":{"title":"Remote Standardizer","permalink":"/satif/docs/standardizers/remote_standardizer"}}');var r=i(4848),s=i(8453);const a={sidebar_position:2},d="AI CSV Standardizer",l={},o=[{value:"1. Basic Usage",id:"1-basic-usage",level:2},{value:"2. Initialization Parameters",id:"2-initialization-parameters",level:2},{value:"3. How It Works",id:"3-how-it-works",level:2},{value:"4. AI-Determined Parameters",id:"4-ai-determined-parameters",level:2},{value:"5. Providing Initial Hints",id:"5-providing-initial-hints",level:2},{value:"6. Handling Multiple Files",id:"6-handling-multiple-files",level:2},{value:"7. Output",id:"7-output",level:2},{value:"8. Error Handling",id:"8-error-handling",level:2}];function c(e){const n={blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"ai-csv-standardizer",children:"AI CSV Standardizer"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"\u26a0\ufe0f EXPERIMENTAL: This is an experimental implementation not intended for production use. Despite the async API, there may be blocking I/O calls that could impact performance in production async environments."})}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"AICSVStandardizer"})," is an AI Agent to analyze CSV files and automatically determine optimal parsing parameters. It reads file structure and semantics to configure a ",(0,r.jsx)(n.code,{children:"CSVStandardizer"})," with the correct parameters for standardization into SDIF format."]}),"\n",(0,r.jsx)(n.h2,{id:"1-basic-usage",children:"1. Basic Usage"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from satif_ai.standardizers.ai_csv import AICSVStandardizer\nfrom pathlib import Path\n\n# Initialize the standardizer\nstandardizer = AICSVStandardizer(\n    llm_model="gpt-4.1"  # Optional: specify the LLM model to use\n)\n\n# Define input and output paths\ninput_file = "complex_data.csv"\noutput_path = Path("standardized_output.sdif")\n\n# Execute standardization\nresult = await standardizer.standardize(\n    datasource=input_file,\n    output_path=output_path,\n    overwrite=True\n)\n\nprint(f"CSV standardization complete. Output at: {result.output_path}")\n'})}),"\n",(0,r.jsx)(n.h2,{id:"2-initialization-parameters",children:"2. Initialization Parameters"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'standardizer = AICSVStandardizer(\n    llm_model="gpt-4.1-2025-04-14",  # LLM model to use for analysis\n    initial_delimiter=None,      # Optional: Initial hint for delimiter\n    initial_encoding=None        # Optional: Initial hint for encoding\n)\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"llm_model"})}),": Identifier for the language model to use (defaults to a recent GPT-4 version)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"initial_delimiter"})}),": Optional hint for the CSV delimiter character"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"initial_encoding"})}),": Optional hint for the file encoding"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"3-how-it-works",children:"3. How It Works"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"AICSVStandardizer"})," follows these steps:"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Initial Detection"}),": Initial guesses about encoding and delimiter using ",(0,r.jsx)(n.code,{children:"charset-normalizer"})," and ",(0,r.jsx)(n.code,{children:"clevercsv"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"AI Analysis"}),": Uses an AI agent with specialized tools (",(0,r.jsx)(n.code,{children:"read_csv_sample"})," and ",(0,r.jsx)(n.code,{children:"read_raw_lines"}),") to thoroughly analyze the CSV file."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Parameter Determination"}),": The AI determines all necessary parameters for standardization:\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Core parsing parameters (encoding, delimiter, header presence, rows to skip)"}),"\n",(0,r.jsx)(n.li,{children:"Table metadata (name, description)"}),"\n",(0,r.jsx)(n.li,{children:"Column definitions (original identifiers, clean names, descriptions)"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Standardization"}),": Uses the determined parameters to initialize a ",(0,r.jsx)(n.code,{children:"CSVStandardizer"})," and process the CSV into SDIF format."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"4-ai-determined-parameters",children:"4. AI-Determined Parameters"}),"\n",(0,r.jsx)(n.p,{children:"The AI agent analyzes the CSV to determine:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Encoding"}),': The correct character encoding (e.g., "utf-8", "latin-1")']}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Delimiter"}),': The character that separates fields (e.g., ",", ";", "\\t")']}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Header Presence"}),": Whether the file has a header row"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Skip Rows"}),": Which rows should be skipped (metadata, comments, empty lines)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Table Name"}),": A clean, descriptive name for the data table"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Table Description"}),": Optional semantic overview of the table contents"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Column Definitions"}),":\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Original Identifiers"}),": How columns are identified in the source CSV"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Final Column Names"}),": Clean, sanitized names for the SDIF database"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Column Descriptions"}),": Optional semantic descriptions of column contents"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"5-providing-initial-hints",children:"5. Providing Initial Hints"}),"\n",(0,r.jsx)(n.p,{children:"You can provide initial hints to guide the AI analysis:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'standardizer = AICSVStandardizer(\n    llm_model="gpt-4.1",\n    initial_delimiter="|",       # Hint that the file uses pipe delimiter\n    initial_encoding="latin-1"   # Hint that the file uses Latin-1 encoding\n)\n'})}),"\n",(0,r.jsx)(n.p,{children:"The AI will verify these hints and correct them if necessary based on file analysis."}),"\n",(0,r.jsx)(n.h2,{id:"6-handling-multiple-files",children:"6. Handling Multiple Files"}),"\n",(0,r.jsx)(n.p,{children:"The standardizer can process multiple CSV files in a single operation:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# Process multiple CSV files into a single SDIF file\nresult = await standardizer.standardize(\n    datasource=["customers.csv", "orders.csv", "products.csv"],\n    output_path="combined_data.sdif"\n)\n'})}),"\n",(0,r.jsx)(n.p,{children:"Each file is analyzed independently, and the results are combined into a single SDIF output."}),"\n",(0,r.jsx)(n.h2,{id:"7-output",children:"7. Output"}),"\n",(0,r.jsxs)(n.p,{children:["The standardization process returns a ",(0,r.jsx)(n.code,{children:"StandardizationResult"})," object with:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"output_path"})}),": Path to the generated SDIF file"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"file_configs"})}),": Configurations used for the processed files, including all AI-determined parameters"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'result = await standardizer.standardize(...)\nprint(f"Output SDIF file: {result.output_path}")\n\n# Access the AI-determined parameters\nfor file_path, config in result.file_configs.items():\n    print(f"File: {file_path}")\n    print(f"Table name: {config[\'table_name\']}")\n    print(f"Encoding: {config[\'encoding\']}")\n    print(f"Delimiter: {config[\'delimiter\']}")\n'})}),"\n",(0,r.jsx)(n.h2,{id:"8-error-handling",children:"8. Error Handling"}),"\n",(0,r.jsx)(n.p,{children:"The standardizer provides comprehensive error handling:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'try:\n    result = await standardizer.standardize(\n        datasource="complex_data.csv",\n        output_path="output.sdif"\n    )\nexcept FileNotFoundError as e:\n    print(f"Input file not found: {e}")\nexcept ValueError as e:\n    print(f"Invalid input or parameter: {e}")\nexcept RuntimeError as e:\n    print(f"AI analysis or standardization failed: {e}")\n'})})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>d});var t=i(6540);const r={},s=t.createContext(r);function a(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);