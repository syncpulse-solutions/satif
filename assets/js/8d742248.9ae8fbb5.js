"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4630],{3519:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>d,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"api_reference/satif_core/satif_sdk/standardizers/remote","title":"satif_sdk.standardizers.remote","description":"DEFAULT\\\\_TIMEOUT","source":"@site/docs/api_reference/satif_core/satif_sdk/standardizers/remote.md","sourceDirName":"api_reference/satif_core/satif_sdk/standardizers","slug":"/api_reference/satif_core/satif_sdk/standardizers/remote","permalink":"/satif/docs/api_reference/satif_core/satif_sdk/standardizers/remote","draft":false,"unlisted":false,"editUrl":"https://github.com/syncpulse-solutions/satif/tree/main/docs/docs/api_reference/satif_core/satif_sdk/standardizers/remote.md","tags":[],"version":"current","frontMatter":{"sidebar_label":"remote","title":"satif_sdk.standardizers.remote"},"sidebar":"tutorialSidebar","previous":{"title":"pdf","permalink":"/satif/docs/api_reference/satif_core/satif_sdk/standardizers/pdf"},"next":{"title":"xlsx","permalink":"/satif/docs/api_reference/satif_core/satif_sdk/standardizers/xlsx"}}');var t=i(4848),r=i(8453);const o={sidebar_label:"remote",title:"satif_sdk.standardizers.remote"},d=void 0,a={},l=[{value:"DEFAULT_TIMEOUT",id:"default_timeout",level:4},{value:"RemoteStandardizer Objects",id:"remotestandardizer-objects",level:2},{value:"__init__",id:"__init__",level:4},{value:"standardize",id:"standardize",level:4}];function c(e){const n={blockquote:"blockquote",code:"code",h2:"h2",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h4,{id:"default_timeout",children:"DEFAULT_TIMEOUT"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"Default timeout 10 minutes (httpx uses float)"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"remotestandardizer-objects",children:"RemoteStandardizer Objects"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"class RemoteStandardizer(AsyncStandardizer)\n"})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"A standardizer that interacts with a remote Satif-compliant standardization API.\nIt handles file uploads, monitors progress via Server-Sent Events (SSE),\nand downloads the resulting SDIF file."}),"\n",(0,t.jsxs)(n.p,{children:["Allows providing a custom ",(0,t.jsx)(n.code,{children:"httpx.AsyncClient"})," instance for advanced configuration,\notherwise creates a default client based on environment variables or parameters.\nCompresses multiple input files into a single zip archive before uploading."]}),"\n",(0,t.jsx)(n.p,{children:"Requires configuration of the remote API base URL and potentially an API key.\nThe remote API is expected to follow a specific pattern:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["POST to ",(0,t.jsx)(n.code,{children:"runs_path_prefix"})," to create a run."]}),"\n",(0,t.jsxs)(n.li,{children:["SSE stream at ",(0,t.jsx)(n.code,{children:"events_url"})," (from create run response)."]}),"\n",(0,t.jsxs)(n.li,{children:["GET from ",(0,t.jsx)(n.code,{children:"runs_path_prefix/{run_id}/result"})," to download the output."]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"__init__",children:"__init__"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"def __init__(base_url: Optional[str] = None,\n             api_key: Optional[str] = None,\n             runs_path_prefix: Optional[str] = None,\n             timeout: Optional[float] = DEFAULT_TIMEOUT,\n             client: Optional[httpx.AsyncClient] = None,\n             **kwargs: Any)\n"})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"Initializes the remote standardizer."}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"base_url"})," - The base URL of the remote standardization API.\nDefaults to env {ENV_REMOTE_BASE_URL}. Used only if 'client' is not provided."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"api_key"})," - The API key for authentication.\nDefaults to env {ENV_REMOTE_API_KEY}. Used as Bearer token if 'client' is not provided."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"runs_path_prefix"})," - Base path for standardization runs on the remote API.\nDefaults to env {ENV_REMOTE_RUNS_PATH_PREFIX} or '{DEFAULT_RUNS_PATH_PREFIX}'."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"timeout"})," - Default request timeout in seconds. Used only if 'client' is not provided.\nDefaults to {DEFAULT_TIMEOUT} seconds."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"client"})," - An optional pre-configured ",(0,t.jsx)(n.code,{children:"httpx.AsyncClient"})," instance. If provided,\n",(0,t.jsx)(n.code,{children:"base_url"}),", ",(0,t.jsx)(n.code,{children:"api_key"}),", and ",(0,t.jsx)(n.code,{children:"timeout"})," args are ignored for client creation,\nbut ",(0,t.jsx)(n.code,{children:"runs_path_prefix"})," is still used."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"api_key"}),"0 - Additional keyword arguments passed to the default ",(0,t.jsx)(n.code,{children:"httpx.AsyncClient"})," constructor\nif ",(0,t.jsx)(n.code,{children:"client"})," is not provided."]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"standardize",children:"standardize"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"async def standardize(datasource: Datasource,\n                      output_path: SDIFPath,\n                      *,\n                      options: Optional[Dict[str, Any]] = None,\n                      log_sse_events: bool = False,\n                      overwrite: bool = False) -> StandardizationResult\n"})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"Performs standardization by interacting with the remote Satif API."}),"\n",(0,t.jsx)(n.p,{children:"This involves:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Validating inputs and preparing file paths."}),"\n",(0,t.jsx)(n.li,{children:"Packaging datasource file(s) for upload (zipping if multiple)."}),"\n",(0,t.jsx)(n.li,{children:"Uploading the datasource and options to initiate a run."}),"\n",(0,t.jsx)(n.li,{children:"Monitoring the run's progress via Server-Sent Events (SSE)."}),"\n",(0,t.jsx)(n.li,{children:"Fetching final run details (including file_configs and result_url)."}),"\n",(0,t.jsx)(n.li,{children:"Downloading the resulting SDIF file using the result_url."}),"\n",(0,t.jsx)(n.li,{children:"Saving the downloaded SDIF file."}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"datasource"})," - Path or list of paths to the input file(s)."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"output_path"})," - The path where the resulting SDIF file should be saved."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"options"})," - Optional dictionary of processing options for the standardization run.\nThese are serialized to JSON and sent as a form field."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"log_sse_events"})," - If True, SSE messages from the server will be logged."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"overwrite"})," - If True, overwrite the output file if it exists."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Returns"}),":"]}),"\n",(0,t.jsx)(n.p,{children:"A StandardizationResult object containing the path to the created SDIF\ndatabase file and the file-specific configurations."}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Raises"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"FileNotFoundError"})," - If an input file doesn't exist."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"FileExistsError"})," - If output_path exists and overwrite is False."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"IOError"})," - If file reading/writing fails (now primarily OSError)."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"httpx.HTTPStatusError"})," - For unsuccessful API responses (4xx, 5xx)."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"RuntimeError"})," - For other operational errors, including failed standardization runs."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"output_path"}),"0 - If zip creation fails."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"output_path"}),"1 - If datasource is invalid."]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>d});var s=i(6540);const t={},r=s.createContext(t);function o(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);