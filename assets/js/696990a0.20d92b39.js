"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[355],{3766:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>r,default:()=>h,frontMatter:()=>i,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"api_reference/satif_core/satif_core/code_executors/base","title":"satif_core.code_executors.base","description":"CodeExecutor Objects","source":"@site/docs/api_reference/satif_core/satif_core/code_executors/base.md","sourceDirName":"api_reference/satif_core/satif_core/code_executors","slug":"/api_reference/satif_core/satif_core/code_executors/base","permalink":"/satif/docs/api_reference/satif_core/satif_core/code_executors/base","draft":false,"unlisted":false,"editUrl":"https://github.com/syncpulse-solutions/satif/tree/main/docs/docs/api_reference/satif_core/satif_core/code_executors/base.md","tags":[],"version":"current","frontMatter":{"sidebar_label":"base","title":"satif_core.code_executors.base"},"sidebar":"tutorialSidebar","previous":{"title":"base","permalink":"/satif/docs/api_reference/satif_core/satif_core/adapters/base"},"next":{"title":"base","permalink":"/satif/docs/api_reference/satif_core/satif_core/comparators/base"}}');var o=n(4848),c=n(8453);const i={sidebar_label:"base",title:"satif_core.code_executors.base"},r=void 0,a={},d=[{value:"CodeExecutor Objects",id:"codeexecutor-objects",level:2},{value:"execute",id:"execute",level:4}];function l(e){const t={blockquote:"blockquote",code:"code",h2:"h2",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,c.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.h2,{id:"codeexecutor-objects",children:"CodeExecutor Objects"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-python",children:"class CodeExecutor(ABC)\n"})}),"\n",(0,o.jsxs)(t.blockquote,{children:["\n",(0,o.jsx)(t.p,{children:"Abstract Base Class defining the interface for code execution engines."}),"\n",(0,o.jsx)(t.p,{children:"This class provides a contract for different strategies of executing Python code,\nparticularly for data transformation tasks. Concrete implementations might execute\ncode locally, in a sandboxed environment, or through other mechanisms."}),"\n",(0,o.jsx)(t.p,{children:"The primary goal of a CodeExecutor is to:"}),"\n",(0,o.jsxs)(t.ol,{children:["\n",(0,o.jsx)(t.li,{children:"Accept a description of SDIF data sources."}),"\n",(0,o.jsx)(t.li,{children:"Establish the necessary database connections and setup based on these sources\nwithin its specific execution environment."}),"\n",(0,o.jsx)(t.li,{children:"Execute a given string of Python code to define a specific function."}),"\n",(0,o.jsx)(t.li,{children:"Call that function with the established database connection and any extra context."}),"\n",(0,o.jsx)(t.li,{children:"Return the results from the called function."}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(t.h4,{id:"execute",children:"execute"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-python",children:"@abstractmethod\ndef execute(code: str, function_name: str, sdif_sources: Dict[str, Path],\n            extra_context: Dict[str, Any]) -> Dict[str, Any]\n"})}),"\n",(0,o.jsxs)(t.blockquote,{children:["\n",(0,o.jsx)(t.p,{children:"Abstract method to set up a database environment from SDIF sources,\nexecute a Python code string to define a function, call that function,\nand return its results."}),"\n",(0,o.jsxs)(t.p,{children:["Concrete implementations will define how the ",(0,o.jsx)(t.code,{children:"sdif_sources"})," are accessed\n(e.g., direct file access, copying to a sandbox) and how the database\nconnection is established and managed within their specific environment."]}),"\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.strong,{children:"Arguments"}),":"]}),"\n",(0,o.jsxs)(t.p,{children:["code:\nA string containing the Python script to be executed. This script\nis expected to define the function identified by ",(0,o.jsx)(t.code,{children:"function_name"}),".\nfunction_name:\nThe name of the function, defined within the ",(0,o.jsx)(t.code,{children:"code"})," string, that\nwill be invoked after the ",(0,o.jsx)(t.code,{children:"code"})," string itself has been executed.\nsdif_sources:\nA dictionary mapping desired schema names (strings) to the resolved\n",(0,o.jsx)(t.code,{children:"pathlib.Path"})," objects of the corresponding SDIF database files.\nThe executor is responsible for using these sources to establish\nthe necessary SQLite connection(s) and ATTACH operations before\nrunning the user's code.\nextra_context:\nA dictionary of additional objects and data to be made available\nto the transformation logic. Implementations will decide how this\ncontext is provided to the executed code."]}),"\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.strong,{children:"Returns"}),":"]}),"\n",(0,o.jsxs)(t.p,{children:["A dictionary, which is the result of successfully calling the user-defined\ntransformation function (",(0,o.jsx)(t.code,{children:"function_name"}),"). Typically, keys are output\nfilenames and values are the data to be written."]}),"\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.strong,{children:"Raises"}),":"]}),"\n",(0,o.jsxs)(t.p,{children:["satif_core.exceptions.CodeExecutionError:\nIf any error occurs during database setup, code loading, definition,\nor execution of the ",(0,o.jsx)(t.code,{children:"code"})," or the subsequent call to ",(0,o.jsx)(t.code,{children:"function_name"}),".\nNotImplementedError:\nIf a concrete subclass does not implement this method."]}),"\n"]})]})}function h(e={}){const{wrapper:t}={...(0,c.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>r});var s=n(6540);const o={},c=s.createContext(o);function i(e){const t=s.useContext(c);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),s.createElement(c.Provider,{value:t},e.children)}}}]);