"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3023],{3516:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>h,frontMatter:()=>d,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"api_reference/satif_sdk/standardizers/xlsx","title":"satif_sdk.standardizers.xlsx","description":"XLSXFileConfig Objects","source":"@site/docs/api_reference/satif_sdk/standardizers/xlsx.md","sourceDirName":"api_reference/satif_sdk/standardizers","slug":"/api_reference/satif_sdk/standardizers/xlsx","permalink":"/satif/docs/api_reference/satif_sdk/standardizers/xlsx","draft":false,"unlisted":false,"editUrl":"https://github.com/syncpulse-solutions/satif/tree/main/docs/docs/api_reference/satif_sdk/standardizers/xlsx.md","tags":[],"version":"current","frontMatter":{"sidebar_label":"xlsx","title":"satif_sdk.standardizers.xlsx"},"sidebar":"tutorialSidebar","previous":{"title":"remote","permalink":"/satif/docs/api_reference/satif_sdk/standardizers/remote"},"next":{"title":"code","permalink":"/satif/docs/api_reference/satif_sdk/transformers/code"}}');var r=i(4848),t=i(8453);const d={sidebar_label:"xlsx",title:"satif_sdk.standardizers.xlsx"},o=void 0,a={},l=[{value:"XLSXFileConfig Objects",id:"xlsxfileconfig-objects",level:2},{value:"XLSXStandardizer Objects",id:"xlsxstandardizer-objects",level:2},{value:"__init__",id:"__init__",level:4},{value:"standardize",id:"standardize",level:4}];function c(e){const n={blockquote:"blockquote",code:"code",em:"em",h2:"h2",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"xlsxfileconfig-objects",children:"XLSXFileConfig Objects"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"class XLSXFileConfig(FileConfig)\n"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"Configuration settings applied to a single XLSX file during standardization."}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"xlsxstandardizer-objects",children:"XLSXStandardizer Objects"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"class XLSXStandardizer(Standardizer)\n"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"Standardizer for one or multiple Excel (.xlsx) files/sheets into an SDIF database."}),"\n",(0,r.jsxs)(n.p,{children:["Transforms data from specified sheets within Excel files into the SDIF format.\nDefault options (sheet_name/index, header_row, skip_rows, skip_columns)\nare set during initialization. These defaults can be overridden on a per-file basis\nwhen calling the ",(0,r.jsx)(n.code,{children:"standardize"})," method using the ",(0,r.jsx)(n.code,{children:"file_configs"})," parameter.\nInfers SQLite types (INTEGER, REAL, TEXT) from pandas dtypes."]}),"\n",(0,r.jsxs)(n.p,{children:["If ",(0,r.jsx)(n.code,{children:"column_definitions"})," are provided for a file, they take precedence for selecting,\nrenaming, and describing columns. Otherwise, headers are taken from the Excel sheet\n(respecting ",(0,r.jsx)(n.code,{children:"header_row"}),", ",(0,r.jsx)(n.code,{children:"skip_rows"}),", and ",(0,r.jsx)(n.code,{children:"skip_columns"}),")."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Attributes"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"default_sheet_name"})," ",(0,r.jsx)(n.em,{children:"Union[str, int]"})," - Default sheet identifier (name or 0-based index)."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"default_header_row"})," ",(0,r.jsx)(n.em,{children:"int"})," - Default 0-based index for the header row."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"default_skip_rows"})," ",(0,r.jsx)(n.em,{children:"int"})," - Default number of rows to skip ",(0,r.jsx)(n.em,{children:"before"})," the header row."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"default_skip_columns"})," ",(0,r.jsx)(n.em,{children:"Set[Union[str, int]]"})," - Default names or 0-based indices of columns to skip.\nPrimarily intended for names with Excel."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"file_configs"}),"0 ",(0,r.jsx)(n.em,{children:"Optional[Union[str, List[Optional[str]]]]"})," - Default descriptions for data sources."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"file_configs"}),"1 ",(0,r.jsx)(n.em,{children:"Optional[Union[str, List[Optional[str]]]]"})," - Default target table names."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"column_definitions"})," ",(0,r.jsx)(n.em,{children:"ColumnDefinitionsConfig"})," - Default column definitions.\nfile_configs (Optional[Union[Dict[str, XLSXFileConfig], List[Optional[XLSXFileConfig]]]]):\nDefault file-specific configuration overrides."]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"__init__",children:"__init__"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"def __init__(\n    sheet_name: Optional[Union[str, int]] = None,\n    header_row: int = DEFAULT_HEADER_ROW,\n    skip_rows: int = DEFAULT_SKIP_ROWS,\n    skip_columns: Optional[List[Union[str, int]]] = None,\n    descriptions: Optional[Union[str, List[Optional[str]]]] = None,\n    table_names: Optional[Union[str, List[Optional[str]]]] = None,\n    column_definitions: ColumnDefinitionsConfig = None,\n    file_configs: Optional[Union[Dict[str, XLSXFileConfig],\n                                 List[Optional[XLSXFileConfig]]]] = None)\n"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"Initialize the XLSX standardizer with default and task-specific configurations."}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"sheet_name"})," - Default sheet to read (name as str, 0-based index as int).\nIf None, defaults to the first sheet (index 0)."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"header_row"})," - Default 0-based row index to use as column headers."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"skip_rows"})," - Default number of rows to skip at the beginning of the sheet ",(0,r.jsx)(n.em,{children:"before"})," the header row."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"skip_columns"})," - Default list of column names (exact match, case-sensitive) or 0-based integer indices\nto exclude from the standardization. If using indices, they refer to the column\norder ",(0,r.jsx)(n.em,{children:"after"})," ",(0,r.jsx)(n.code,{children:"header_row"})," and ",(0,r.jsx)(n.code,{children:"skip_rows"})," are applied by pandas."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"descriptions"})," - A single description for all sources, or a list of\ndescriptions (one per input file expected in standardize).\nIf None, descriptions are omitted. Used for ",(0,r.jsx)(n.code,{children:"sdif_sources.source_description"}),".\nThis can be overridden by ",(0,r.jsx)(n.code,{children:"description"})," key in ",(0,r.jsx)(n.code,{children:"file_configs"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"header_row"}),"0 - A single table name (used as a base if multiple files),\na list of table names (one per input file expected in standardize), or None.\nIf None, table names are derived from sheet names (or filenames if sheet name unavailable).\nThis can be overridden by ",(0,r.jsx)(n.code,{children:"header_row"}),"1 key in ",(0,r.jsx)(n.code,{children:"file_configs"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"header_row"}),"3 - Default column definitions to precisely control column selection, renaming,\nand descriptions. ",(0,r.jsx)(n.code,{children:"header_row"}),"4 in ",(0,r.jsx)(n.code,{children:"header_row"}),"5 maps to original\nExcel header names. Types are still inferred from data."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"file_configs"})," - Optional configuration overrides. Can be a single dict\napplied to all files, or a list of dicts (one per file expected\nin standardize, use None in list to apply defaults). Keys in the dict\ncan include 'sheet_name', 'header_row', 'skip_rows',\n'skip_columns', 'description', 'table_name', 'column_definitions'.\nThese override the defaults set above for the specific file."]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"standardize",children:"standardize"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"def standardize(datasource: Datasource,\n                output_path: SDIFPath,\n                *,\n                overwrite: bool = False) -> StandardizationResult\n"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"Standardize one or more Excel files into a single SDIF database file."}),"\n",(0,r.jsx)(n.p,{children:"Reads a specified sheet from each input Excel file and stores its data\nin a corresponding table within the output SDIF database."}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"datasource"})," - A single path or a list of paths to the input Excel file(s) (.xlsx)."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"output_path"})," - The path for the output SDIF database file."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"overwrite"})," - If True, overwrite the output SDIF file if it exists."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Returns"}),":"]}),"\n",(0,r.jsx)(n.p,{children:"A StandardizationResult object containing the path to the created\nSDIF file and a dictionary of the final configurations used for each\nprocessed input file."}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Raises"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"ValueError"})," - If input files are invalid, list arguments stored in the instance\nhave incorrect lengths compared to datasource, config values are invalid,\nor pandas/database errors occur."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"FileNotFoundError"})," - If an input Excel file does not exist."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"ImportError"})," - If 'pandas' or 'openpyxl' is not installed."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"RuntimeError"})," - For errors during Excel parsing or database operations."]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>d,x:()=>o});var s=i(6540);const r={},t=s.createContext(r);function d(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:d(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);