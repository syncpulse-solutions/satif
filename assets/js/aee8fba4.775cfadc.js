"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6089],{6331:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>d,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"adapters/code_adapter","title":"CodeAdapter (WIP)","description":"The CodeAdapter is designed to execute custom Python code to produce a new, modified SDIF database file. It is mostly used to apply code logic created by other adapters.","source":"@site/docs/adapters/code_adapter.md","sourceDirName":"adapters","slug":"/adapters/code_adapter","permalink":"/satif/docs/adapters/code_adapter","draft":false,"unlisted":false,"editUrl":"https://github.com/syncpulse-solutions/satif/tree/main/docs/docs/adapters/code_adapter.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Tidy Adapter","permalink":"/satif/docs/adapters/tidy_adapter"},"next":{"title":"SDIF Database","permalink":"/satif/docs/sdif_database"}}');var r=t(4848),a=t(8453);const d={sidebar_position:3},o="CodeAdapter (WIP)",s={},c=[{value:"1. Basic Usage",id:"1-basic-usage",level:2},{value:"3. The Adaptation Function",id:"3-the-adaptation-function",level:2},{value:"Direct Python Callable:",id:"direct-python-callable",level:3},{value:"Code String or Script File:",id:"code-string-or-script-file",level:3},{value:"4. Error Handling",id:"4-error-handling",level:2},{value:"5. Advanced Configuration",id:"5-advanced-configuration",level:2}];function l(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"codeadapter-wip",children:"CodeAdapter (WIP)"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"CodeAdapter"})," is designed to execute custom Python code to produce a new, modified SDIF database file. It is mostly used to apply code logic created by other adapters."]}),"\n",(0,r.jsx)(n.h2,{id:"1-basic-usage",children:"1. Basic Usage"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"a) Code String:"})}),"\n",(0,r.jsxs)(n.p,{children:["Pass the Python code as a string. You might need to specify the function name if it's not the default (",(0,r.jsx)(n.code,{children:"adapt"}),")."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"ADAPTATION_CODE = \"\"\"\nfrom satif_sdk import SDIFDatabase # Or from satif_core.sdif_db import SDIFDatabase\nfrom typing import Dict, Any\n\n# Default function name is 'adapt'\ndef adapt(db: SDIFDatabase) -> Dict[str, Any]:\n    cursor = db.conn.cursor()\n\n    # Example: Create a new table based on 'factures'\n    # Tables are accessed directly via the db instance.\n    cursor.execute('''\n        CREATE TABLE IF NOT EXISTS normalized_clients AS\n        SELECT\n            client AS name,\n            COUNT(*) AS invoice_count,\n            SUM(montant_ttc) AS total_amount\n        FROM factures\n        GROUP BY client\n    ''')\n\n    db.conn.commit() # Commit changes made via the connection\n    return {}  # Must return a dictionary, though the content is ignored by CodeAdapter\n\"\"\"\n\nadapter = CodeAdapter(function=ADAPTATION_CODE)\n# If function name was different, e.g., 'normalize_clients':\n# adapter = CodeAdapter(function=ADAPTATION_CODE, function_name=\"normalize_clients\")\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"b) File Path:"})}),"\n",(0,r.jsxs)(n.p,{children:["Provide a ",(0,r.jsx)(n.code,{children:"pathlib.Path"})," object pointing to a Python file containing the adaptation function. The function within the file should follow the signature described for code strings."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# Assume 'my_adaptations/invoice_logic.py' contains the 'clean_invoice_data'\n# function, defined similarly to the ADAPTATION_CODE example above (accepting db: SDIFDatabase).\n\nadapt_script_path = Path(\"my_adaptations/invoice_logic.py\")\n\nadapter = CodeAdapter(\n    function=adapt_script_path,\n    function_name=\"clean_invoice_data\"  # Specify the function to run from the file\n)\n# ... then call adapter.adapt(...)\n"})}),"\n",(0,r.jsx)(n.h2,{id:"3-the-adaptation-function",children:"3. The Adaptation Function"}),"\n",(0,r.jsx)(n.p,{children:"Your adaptation code needs to adhere to specific requirements based on how it's provided:"}),"\n",(0,r.jsx)(n.h3,{id:"direct-python-callable",children:"Direct Python Callable:"}),"\n",(0,r.jsxs)(n.p,{children:["When providing a direct callable to ",(0,r.jsx)(n.code,{children:"CodeAdapter"}),", it needs to:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Signature:"})," Must accept ",(0,r.jsx)(n.code,{children:"db: SDIFDatabase"})," as the first parameter, and optionally a second parameter ",(0,r.jsx)(n.code,{children:"context: Dict[str, Any]"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Operation:"})," Should modify the database in-place using the ",(0,r.jsx)(n.code,{children:"db"})," object (e.g., ",(0,r.jsx)(n.code,{children:"db.conn"})," for SQL, or methods like ",(0,r.jsx)(n.code,{children:"db.write_dataframe"}),")."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Return Value:"})," Typically ",(0,r.jsx)(n.code,{children:"None"}),". Any returned value is ignored, as the changes are made in-place to the copied database."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from satif_sdk import SDIFDatabase\n\ndef adapt_database_callable(db: SDIFDatabase, context: Dict[str, Any]) -> None:\n    """Performs adaptations on the database."""\n    cursor = db.conn.cursor()\n    threshold = context.get("threshold", 100)\n\n    cursor.execute(f"DELETE FROM products WHERE price < {threshold}")\n    db.conn.commit()\n'})}),"\n",(0,r.jsx)(n.h3,{id:"code-string-or-script-file",children:"Code String or Script File:"}),"\n",(0,r.jsxs)(n.p,{children:["When providing code as a string or file to be executed by a ",(0,r.jsx)(n.code,{children:"CodeExecutor"}),", the identified function needs to:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Signature:"})," Must accept ",(0,r.jsx)(n.code,{children:"db: SDIFDatabase"})," as the first parameter, and optionally a second parameter ",(0,r.jsx)(n.code,{children:"context: Dict[str, Any]"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Operation:"})," Should modify the database in-place using the provided ",(0,r.jsx)(n.code,{children:"SDIFDatabase"})," instance (",(0,r.jsx)(n.code,{children:"db"}),"). The ",(0,r.jsx)(n.code,{children:"CodeExecutor"})," provides this ",(0,r.jsx)(n.code,{children:"db"})," instance, which is connected to the (copied) database file being adapted. Tables within this database are accessed directly (e.g., using ",(0,r.jsx)(n.code,{children:"db.read_table('my_table')"})," or ",(0,r.jsx)(n.code,{children:'db.conn.execute("SELECT * FROM my_table")'}),")."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Return Value:"})," ",(0,r.jsx)(n.strong,{children:"MUST"})," return a dictionary (",(0,r.jsx)(n.code,{children:"Dict[str, Any]"}),"), though its contents are ignored by ",(0,r.jsx)(n.code,{children:"CodeAdapter"}),". This is typically required by the underlying ",(0,r.jsx)(n.code,{children:"CodeExecutor"})," interface."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Example (for a function within a code string or script file):"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from satif_sdk import SDIFDatabase\nfrom typing import Dict, Any\n\ndef clean_data_in_script(db: SDIFDatabase, context: Dict[str, Any]) -> Dict[str, Any]:\n    \"\"\"Cleans data in the database via a script.\"\"\"\n    # Example: Use SDIFDatabase methods\n    if 'orders' in db.list_tables():\n        orders_df = db.read_table('orders')\n        # ... perform some pandas operations on orders_df ...\n        # db.write_dataframe(orders_df, 'orders', if_exists='replace', source_id=1) # Assuming source_id=1 exists\n\n    # Example: Or use db.conn for direct SQL\n    cursor = db.conn.cursor()\n    cursor.execute(\"UPDATE customers SET phone = REPLACE(phone, ' ', '-') WHERE phone IS NOT NULL\")\n    db.conn.commit()\n\n    return {}  # Must return a dictionary\n"})}),"\n",(0,r.jsx)(n.h2,{id:"4-error-handling",children:"4. Error Handling"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Errors during the execution of the adaptation code (e.g., SQL errors, Python exceptions) are caught and re-raised as an ",(0,r.jsx)(n.code,{children:"AdapterError"}),"."]}),"\n",(0,r.jsx)(n.li,{children:"If an error occurs, the partially adapted output file is removed to prevent corrupted databases."}),"\n",(0,r.jsxs)(n.li,{children:["Configuration errors (e.g., invalid input types, non-existent input files) typically raise standard Python exceptions like ",(0,r.jsx)(n.code,{children:"TypeError"}),", ",(0,r.jsx)(n.code,{children:"ValueError"}),", or ",(0,r.jsx)(n.code,{children:"FileNotFoundError"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["Syntax errors in code strings/files might raise ",(0,r.jsx)(n.code,{children:"ValueError"})," during initialization or ",(0,r.jsx)(n.code,{children:"AdapterError"})," during execution."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["Always wrap calls to ",(0,r.jsx)(n.code,{children:"adapt"})," in a ",(0,r.jsx)(n.code,{children:"try...except"})," block to handle potential failures gracefully:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'try:\n    output_path = adapter.adapt(sdif="input.sdif")\n    print(f"Adaptation successful: {output_path}")\nexcept FileNotFoundError as e:\n    print(f"Input file error: {e}")\nexcept AdapterError as e:\n    print(f"Adaptation failed: {e}")\n'})}),"\n",(0,r.jsx)(n.h2,{id:"5-advanced-configuration",children:"5. Advanced Configuration"}),"\n",(0,r.jsxs)(n.p,{children:["You can customize the ",(0,r.jsx)(n.code,{children:"CodeAdapter"})," during initialization:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsxs)(n.strong,{children:[(0,r.jsx)(n.code,{children:"function_name"})," (str, default ",(0,r.jsx)(n.code,{children:'"adapt"'}),"):"]})," The name of the function to call when ",(0,r.jsx)(n.code,{children:"function"})," is provided as a code string or file path."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsxs)(n.strong,{children:[(0,r.jsx)(n.code,{children:"extra_context"})," (Dict[str, Any], default ",(0,r.jsx)(n.code,{children:"{}"}),"):"]})," A dictionary of arbitrary Python objects that will be passed as the ",(0,r.jsx)(n.code,{children:"context"})," argument to your adaptation function (if it accepts it)."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsxs)(n.strong,{children:[(0,r.jsx)(n.code,{children:"output_suffix"})," (str, default ",(0,r.jsx)(n.code,{children:'"_adapted"'}),"):"]})," Suffix added to the output filename. For example, with the default, ",(0,r.jsx)(n.code,{children:"input.sdif"})," becomes ",(0,r.jsx)(n.code,{children:"input_adapted.sdif"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsxs)(n.strong,{children:[(0,r.jsx)(n.code,{children:"code_executor"})," (CodeExecutor, optional):"]})," In production, you can plug a different execution backend (e.g., a sandboxed environment). If not provided when ",(0,r.jsx)(n.code,{children:"function"})," is a code string/file, a ",(0,r.jsx)(n.code,{children:"LocalCodeExecutor"})," is typically used by default. Ensure the chosen executor provides an ",(0,r.jsx)(n.code,{children:"SDIFDatabase"})," instance to the adaptation function as described."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsxs)(n.strong,{children:[(0,r.jsx)(n.code,{children:"disable_security_warning"})," (bool, default ",(0,r.jsx)(n.code,{children:"False"}),"):"]})," If ",(0,r.jsx)(n.code,{children:"True"})," and a ",(0,r.jsx)(n.code,{children:"LocalCodeExecutor"})," is auto-created, its security warning is suppressed."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example with Custom Configuration:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from satif_sdk import SDIFDatabase # For type hinting in the function\nfrom satif_sdk.adapters.code import CodeAdapter # The adapter itself\nfrom typing import Dict, Any # For type hinting\n\n# Adaptation function accepting context (could be a direct callable or in a string/file)\ndef process_with_context(db: SDIFDatabase, context: Dict[str, Any]) -> None: # Or -> Dict[str, Any] if for string/file\n    cursor = db.conn.cursor()\n\n    currency = context.get(\'currency\', \'USD\')\n    min_amount = context.get(\'min_amount\', 0)\n\n    cursor.execute(f"""\n        DELETE FROM transactions\n        WHERE amount < {min_amount} OR currency != \'{currency}\'\n    """)\n\n    db.conn.commit()\n    # If this function was for a code string/file, it would need: return {}\n\n# Instantiate with custom configuration\nadapter = CodeAdapter(\n    function=process_with_context, # Assuming it\'s a direct callable here for simplicity\n    extra_context={"currency": "EUR", "min_amount": 50},\n    output_suffix="_cleaned",\n    disable_security_warning=True\n)\n\n# Run the adapter\n# output_path = adapter.adapt(sdif="input.sdif")\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Note that when using direct callable functions, the adapter does not need to create temporary files or execute code in a separate environment, making it more efficient for trusted code. When using code strings or files, the ",(0,r.jsx)(n.code,{children:"CodeExecutor"})," handles the execution environment."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{})})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>d,x:()=>o});var i=t(6540);const r={},a=i.createContext(r);function d(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:d(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);