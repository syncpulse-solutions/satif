"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1125],{6814:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>c,contentTitle:()=>i,default:()=>m,frontMatter:()=>r,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"api_reference/satif_core/satif_sdk/comparators/sdif","title":"satif_sdk.comparators.sdif","description":"SourceMap","source":"@site/docs/api_reference/satif_core/satif_sdk/comparators/sdif.md","sourceDirName":"api_reference/satif_core/satif_sdk/comparators","slug":"/api_reference/satif_core/satif_sdk/comparators/sdif","permalink":"/satif/docs/api_reference/satif_core/satif_sdk/comparators/sdif","draft":false,"unlisted":false,"editUrl":"https://github.com/syncpulse-solutions/satif/tree/main/docs/docs/api_reference/satif_core/satif_sdk/comparators/sdif.md","tags":[],"version":"current","frontMatter":{"sidebar_label":"sdif","title":"satif_sdk.comparators.sdif"},"sidebar":"tutorialSidebar","previous":{"title":"csv","permalink":"/satif/docs/api_reference/satif_core/satif_sdk/comparators/csv"},"next":{"title":"sdif_schema","permalink":"/satif/docs/api_reference/satif_core/satif_sdk/comparators/sdif_schema"}}');var s=n(4848),t=n(8453);const r={sidebar_label:"sdif",title:"satif_sdk.comparators.sdif"},i=void 0,c={},l=[{value:"SourceMap",id:"sourcemap",level:4},{value:"TableMap",id:"tablemap",level:4},{value:"ColumnMap",id:"columnmap",level:4},{value:"NameMap",id:"namemap",level:4},{value:"SDIFComparator Objects",id:"sdifcomparator-objects",level:2},{value:"compare",id:"compare",level:4}];function p(e){const a={blockquote:"blockquote",code:"code",h2:"h2",h4:"h4",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(a.h4,{id:"sourcemap",children:"SourceMap"}),"\n",(0,s.jsxs)(a.blockquote,{children:["\n",(0,s.jsx)(a.p,{children:"Maps source_id from file1 to source_id in file2"}),"\n"]}),"\n",(0,s.jsx)(a.h4,{id:"tablemap",children:"TableMap"}),"\n",(0,s.jsxs)(a.blockquote,{children:["\n",(0,s.jsx)(a.p,{children:"Maps table_name from file1 to table_name in file2 (or None if no match)"}),"\n"]}),"\n",(0,s.jsx)(a.h4,{id:"columnmap",children:"ColumnMap"}),"\n",(0,s.jsxs)(a.blockquote,{children:["\n",(0,s.jsx)(a.p,{children:"Maps col_name from table1 to col_name in table2 (or None if no match)"}),"\n"]}),"\n",(0,s.jsx)(a.h4,{id:"namemap",children:"NameMap"}),"\n",(0,s.jsxs)(a.blockquote,{children:["\n",(0,s.jsx)(a.p,{children:"Maps object/media name from file1 to file2 (or None if no match)"}),"\n"]}),"\n",(0,s.jsx)(a.h2,{id:"sdifcomparator-objects",children:"SDIFComparator Objects"}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-python",children:"class SDIFComparator(Comparator)\n"})}),"\n",(0,s.jsxs)(a.blockquote,{children:["\n",(0,s.jsx)(a.p,{children:"Compares two SDIF (SQLite Data Interoperable Format) files for equivalence\nusing the SDIFDatabase helper class."}),"\n",(0,s.jsx)(a.p,{children:"Focuses on comparing the structure and content of user data tables,\nJSON objects, and media data, based on the SDIF specification (v1.0).\nAllows configuration to ignore certain names or metadata aspects."}),"\n"]}),"\n",(0,s.jsx)(a.h4,{id:"compare",children:"compare"}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-python",children:"def compare(file_path1: Union[str, Path], file_path2: Union[str, Path],\n            **kwargs: Any) -> Dict[str, Any]\n"})}),"\n",(0,s.jsxs)(a.blockquote,{children:["\n",(0,s.jsx)(a.p,{children:"Compares two SDIF files using SDIFDatabase and specified options."}),"\n",(0,s.jsx)(a.p,{children:"Kwargs Options:\nignore_user_table_names (bool): Map tables by name only (mapping by original_identifier not implemented). Default: False.\nignore_user_column_names (bool): Map columns by name only (mapping by original_column_name not implemented). Default: False.\ncompare_user_table_row_order (bool): Compare table row content respecting order. Default: False.\nignore_source_original_file_name (bool): Ignore original_file_name in sdif_sources mapping. Default: False.\nignore_object_names (bool): Map objects by name only (mapping by hash not implemented). Default: False.\nignore_media_names (bool): Map media by name only (mapping by hash not implemented). Default: False.\ndecimal_places (Optional[int]): Decimal places for comparing REAL/float numbers in tables. Default: None (exact comparison).\nmax_examples (int): Max number of differing row/item examples. Default: 5."}),"\n"]})]})}function m(e={}){const{wrapper:a}={...(0,t.R)(),...e.components};return a?(0,s.jsx)(a,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}},8453:(e,a,n)=>{n.d(a,{R:()=>r,x:()=>i});var o=n(6540);const s={},t=o.createContext(s);function r(e){const a=o.useContext(t);return o.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function i(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),o.createElement(t.Provider,{value:a},e.children)}}}]);