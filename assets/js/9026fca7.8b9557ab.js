"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7525],{7564:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>d,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"standardizers/ai_xslx_standardizer","title":"AI XLSX Standardizer","description":"\u26a0\ufe0f EXPERIMENTAL: This is an experimental implementation not intended for production use. Despite the async API, there may be blocking I/O calls that could impact performance in production async environments.","source":"@site/docs/standardizers/ai_xslx_standardizer.md","sourceDirName":"standardizers","slug":"/standardizers/ai_xslx_standardizer","permalink":"/satif/docs/standardizers/ai_xslx_standardizer","draft":false,"unlisted":false,"editUrl":"https://github.com/syncpulse-solutions/satif/tree/main/docs/docs/standardizers/ai_xslx_standardizer.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Remote Standardizer","permalink":"/satif/docs/standardizers/remote_standardizer"},"next":{"title":"CSV Standardizer","permalink":"/satif/docs/standardizers/csv_standardizer"}}');var i=t(4848),r=t(8453);const a={sidebar_position:3},d="AI XLSX Standardizer",l={},o=[{value:"1. Basic Usage",id:"1-basic-usage",level:2},{value:"2. How It Works",id:"2-how-it-works",level:2},{value:"3. Processing Steps",id:"3-processing-steps",level:2},{value:"4. Supported File Types",id:"4-supported-file-types",level:2},{value:"5. Important Disclaimers",id:"5-important-disclaimers",level:2},{value:"6. Handling Multiple Files",id:"6-handling-multiple-files",level:2},{value:"7. Standardization Method Parameters",id:"7-standardization-method-parameters",level:2},{value:"8. Error Handling",id:"8-error-handling",level:2},{value:"9. Output",id:"9-output",level:2},{value:"10. Future Enhancements",id:"10-future-enhancements",level:2}];function c(e){const n={blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"ai-xlsx-standardizer",children:"AI XLSX Standardizer"})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"\u26a0\ufe0f EXPERIMENTAL: This is an experimental implementation not intended for production use. Despite the async API, there may be blocking I/O calls that could impact performance in production async environments."})}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"AIXLSXStandardizer"})," is an AI Agent with visual capabilities to analyze and standardize Excel files. It processes spreadsheets by visually understanding their structure, performing necessary cleaning operations, and extracting structured tables and metadata into SDIF format."]}),"\n",(0,i.jsx)(n.h2,{id:"1-basic-usage",children:"1. Basic Usage"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'from satif_ai.standardizers.ai_xlsx import AIXLSXStandardizer\nfrom pathlib import Path\n\n# Initialize the standardizer\nstandardizer = AIXLSXStandardizer()\n\n# Define input and output paths\ninput_file = "complex_spreadsheet.xlsx"\noutput_path = Path("standardized_output.sdif")\n\n# Execute standardization\nresult = await standardizer.standardize(\n    datasource=input_file,\n    output_path=output_path,\n    overwrite=True\n)\n\nprint(f"XLSX standardization complete. Output at: {result.output_path}")\n'})}),"\n",(0,i.jsx)(n.h2,{id:"2-how-it-works",children:"2. How It Works"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"AIXLSXStandardizer"})," leverages a sophisticated AI-powered graph system (",(0,i.jsx)(n.code,{children:"xlsx-to-sdif"}),") to process Excel files:"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Visual Analysis"}),": The standardizer exports an image of the spreadsheet for AI visual analysis"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Structure Recognition"}),": Identifies tables, headers, and data regions within complex layouts"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Data Cleaning"}),": Intelligently processes merged cells, formatting, and irregular structures"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Extraction"}),": Transforms the analyzed content into structured SDIF format"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"3-processing-steps",children:"3. Processing Steps"}),"\n",(0,i.jsx)(n.p,{children:"Under the hood, the standardizer follows these steps:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Preparation"}),": Sets up temporary directories and creates a thread-specific file copy"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"LangGraph Execution"}),": Using the ",(0,i.jsx)(n.code,{children:"xlsx-to-sdif"})," langgraph agent which:\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Builds a spreadsheet state model"}),"\n",(0,i.jsx)(n.li,{children:"Captures a visual representation of the sheet"}),"\n",(0,i.jsx)(n.li,{children:"Uses an LLM to analyze the spreadsheet structure"}),"\n",(0,i.jsx)(n.li,{children:"Iteratively executes transformation tools (navigate, add/delete/update values, etc.)"}),"\n",(0,i.jsx)(n.li,{children:"Extract 2D Tables and metadata"}),"\n",(0,i.jsx)(n.li,{children:"Generates an intermediate SDIF file"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Consolidation"}),": Merges results from multiple files (if applicable) into a single SDIF output"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"4-supported-file-types",children:"4. Supported File Types"}),"\n",(0,i.jsx)(n.p,{children:"The standardizer supports various Excel file formats:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:".xlsx"})," - Excel Open XML Format"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:".xlsm"})," - Excel Macro-Enabled Workbooks"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:".xlsb"})," - Excel Binary Workbook"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:".xls"})," - Legacy Excel 97-2003 Format"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"5-important-disclaimers",children:"5. Important Disclaimers"}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"\u26a0\ufe0f IMPORTANT: Currently, the standardizer only processes the first sheet of each Excel file."})}),"\n"]}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"\u26a0\ufe0f WARNING: During standardization, the AI may alter data to fit standard formats. Guardrails to prevent unwanted modifications will be implemented in future versions."})}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"6-handling-multiple-files",children:"6. Handling Multiple Files"}),"\n",(0,i.jsx)(n.p,{children:"The standardizer can process multiple Excel files in a single operation:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# Process multiple Excel files into a single SDIF file\nresult = await standardizer.standardize(\n    datasource=["financial_data.xlsx", "inventory.xlsm", "legacy_report.xls"],\n    output_path="combined_data.sdif"\n)\n'})}),"\n",(0,i.jsx)(n.h2,{id:"7-standardization-method-parameters",children:"7. Standardization Method Parameters"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"result = await standardizer.standardize(\n    datasource=input_file,          # Required: Input Excel file(s)\n    output_path=output_path,        # Required: Path for the output SDIF file\n    overwrite=False,                # Optional: Whether to overwrite existing output\n    config=None                     # Optional: Configuration options (for future use)\n)\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"datasource"})}),": Input Excel file(s) (single path or list of paths)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"output_path"})}),": Path where the standardized SDIF file will be written"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"overwrite"})}),": Boolean flag to control whether existing output files should be overwritten"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"config"})}),": Reserved for future configuration options"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"8-error-handling",children:"8. Error Handling"}),"\n",(0,i.jsx)(n.p,{children:"The standardizer provides comprehensive error handling:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'try:\n    result = await standardizer.standardize(\n        datasource="complex_spreadsheet.xlsx",\n        output_path="output.sdif"\n    )\nexcept FileNotFoundError as e:\n    print(f"Input file not found: {e}")\nexcept ValueError as e:\n    print(f"Invalid input parameter: {e}")\nexcept RuntimeError as e:\n    print(f"Processing error: {e}")\n'})}),"\n",(0,i.jsx)(n.h2,{id:"9-output",children:"9. Output"}),"\n",(0,i.jsxs)(n.p,{children:["The standardization process returns a ",(0,i.jsx)(n.code,{children:"StandardizationResult"})," object with:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"output_path"})}),": Path to the generated SDIF file"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'result = await standardizer.standardize(...)\nprint(f"Output SDIF file: {result.output_path}")\n'})}),"\n",(0,i.jsx)(n.h2,{id:"10-future-enhancements",children:"10. Future Enhancements"}),"\n",(0,i.jsxs)(n.p,{children:["Future versions of the ",(0,i.jsx)(n.code,{children:"AIXLSXStandardizer"})," will include:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Multi-sheet processing capabilities"}),"\n",(0,i.jsx)(n.li,{children:"Guardrails to prevent unwanted data modifications"}),"\n",(0,i.jsx)(n.li,{children:"Enhanced configuration options for controlling AI behavior"}),"\n",(0,i.jsx)(n.li,{children:"Better handling of complex formulas and references"}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>d});var s=t(6540);const i={},r=s.createContext(i);function a(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);