"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5065],{4018:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>d,default:()=>h,frontMatter:()=>i,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"api_reference/satif_core/standardizers/base","title":"satif_core.standardizers.base","description":"Standardizer Objects","source":"@site/docs/api_reference/satif_core/standardizers/base.md","sourceDirName":"api_reference/satif_core/standardizers","slug":"/api_reference/satif_core/standardizers/base","permalink":"/satif/docs/api_reference/satif_core/standardizers/base","draft":false,"unlisted":false,"editUrl":"https://github.com/syncpulse-solutions/satif/tree/main/docs/docs/api_reference/satif_core/standardizers/base.md","tags":[],"version":"current","frontMatter":{"sidebar_label":"base","title":"satif_core.standardizers.base"},"sidebar":"tutorialSidebar","previous":{"title":"sdif_db","permalink":"/satif/docs/api_reference/satif_core/sdif_db"},"next":{"title":"base","permalink":"/satif/docs/api_reference/satif_core/transformation_builders/base"}}');var a=s(4848),r=s(8453);const i={sidebar_label:"base",title:"satif_core.standardizers.base"},d=void 0,o={},c=[{value:"Standardizer Objects",id:"standardizer-objects",level:2},{value:"standardize",id:"standardize",level:4},{value:"AsyncStandardizer Objects",id:"asyncstandardizer-objects",level:2},{value:"standardize",id:"standardize-1",level:4}];function l(e){const n={blockquote:"blockquote",code:"code",h2:"h2",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h2,{id:"standardizer-objects",children:"Standardizer Objects"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"class Standardizer(ABC)\n"})}),"\n",(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsx)(n.p,{children:"Abstract Base Class for data standardization."}),"\n",(0,a.jsx)(n.p,{children:"This class defines the interface for all synchronous standardizer implementations.\nStandardizers are responsible for taking raw files from various formats\n(e.g., CSV, XLSX, PDF, etc.) and transforming it into a single\nSDIF (Standardized Data Interchange Format) file."}),"\n",(0,a.jsxs)(n.p,{children:["Concrete implementations of this class must provide logic for the ",(0,a.jsx)(n.code,{children:"standardize"})," method."]}),"\n"]}),"\n",(0,a.jsx)(n.h4,{id:"standardize",children:"standardize"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"@abstractmethod\ndef standardize(datasource: Datasource,\n                output_path: SDIFPath,\n                *,\n                overwrite: bool = False,\n                **kwargs: Any) -> StandardizationResult\n"})}),"\n",(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsx)(n.p,{children:"Standardizes input data from the specified datasource into an SDIF file."}),"\n",(0,a.jsxs)(n.p,{children:["This method should be implemented by subclasses to define the core\nstandardization logic. It reads data from the ",(0,a.jsx)(n.code,{children:"datasource"}),", processes it\naccording to the standardizer's specific rules and configurations,\nand writes the resulting standardized data to an SDIF database file\nat ",(0,a.jsx)(n.code,{children:"output_path"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"datasource"})," - The source of the data to be standardized. This can be a\nfile path (str or Path), a list of file paths, or another\ntype specific to the standardizer (e.g., a database connection string)."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"output_path"})," - The path (str or Path) where the output SDIF database\nfile will be created. Note: The ",(0,a.jsx)(n.code,{children:"StandardizationResult.output_path"}),"\nwill be the definitive path returned, which should be an absolute Path object."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"overwrite"})," - If True, an existing SDIF file at ",(0,a.jsx)(n.code,{children:"output_path"})," will be\noverwritten. Defaults to False."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"**kwargs"})," - Arbitrary keyword arguments that can be used for future\nextensions or specific standardizer needs."]}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Returns"}),":"]}),"\n",(0,a.jsxs)(n.p,{children:["A ",(0,a.jsx)(n.code,{children:"StandardizationResult"})," object containing:"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"output_path"}),": The absolute path to the created or updated SDIF database file."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"output_path"}),"0: An optional dictionary where keys are input file paths (str)\nand values are ",(0,a.jsx)(n.code,{children:"output_path"}),"1 (Dict[str, Any]) detailing the\nconfiguration used for that specific file. None if not applicable."]}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Raises"}),":"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"output_path"}),"2 - If the method is not implemented by a subclass."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"output_path"}),"3 - If the ",(0,a.jsx)(n.code,{children:"datasource"})," (when it's a path) does not exist."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"output_path"}),"5 - If input arguments are invalid (e.g., unsupported datasource type,\ninvalid configuration)."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"output_path"}),"6 - If there are issues reading from the datasource or writing to\nthe ",(0,a.jsx)(n.code,{children:"output_path"})," (e.g., permissions, disk space)."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"output_path"}),"8 - Subclasses may raise specific exceptions related to data parsing,\nvalidation, or transformation errors during the standardization process."]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"asyncstandardizer-objects",children:"AsyncStandardizer Objects"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"class AsyncStandardizer(ABC)\n"})}),"\n",(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsx)(n.p,{children:"Abstract Base Class for asynchronous data standardization."}),"\n",(0,a.jsxs)(n.p,{children:["This class extends the ",(0,a.jsx)(n.code,{children:"Standardizer"})," interface for implementations\nthat perform standardization operations asynchronously. This is typically\nuseful for I/O-bound operations, such as fetching data from remote APIs\nor handling large files without blocking the main execution thread."]}),"\n",(0,a.jsxs)(n.p,{children:["Concrete implementations must provide an asynchronous ",(0,a.jsx)(n.code,{children:"standardize"})," method."]}),"\n"]}),"\n",(0,a.jsx)(n.h4,{id:"standardize-1",children:"standardize"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"@abstractmethod\nasync def standardize(datasource: Datasource,\n                      output_path: SDIFPath,\n                      *,\n                      overwrite: bool = False,\n                      **kwargs: Any) -> StandardizationResult\n"})}),"\n",(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsx)(n.p,{children:"Asynchronously standardizes input data from the specified datasource into an SDIF file."}),"\n",(0,a.jsxs)(n.p,{children:["This method should be implemented by subclasses to define the core\nasynchronous standardization logic. It reads data from the ",(0,a.jsx)(n.code,{children:"datasource"}),",\nprocesses it, and writes the resulting standardized data to an SDIF\ndatabase file at ",(0,a.jsx)(n.code,{children:"output_path"})," using awaitable operations where appropriate."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"datasource"})," - The source of the data to be standardized. See the synchronous\n",(0,a.jsx)(n.code,{children:"Standardizer.standardize"})," method for details."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"output_path"})," - The path where the output SDIF database file will be created."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"Note"})," - The ",(0,a.jsx)(n.code,{children:"StandardizationResult.output_path"})," will be the\ndefinitive path returned."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"overwrite"})," - If True, an existing SDIF file at ",(0,a.jsx)(n.code,{children:"output_path"})," will be\noverwritten. Defaults to False."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"**kwargs"})," - Arbitrary keyword arguments for future extensions or specific needs.\nSee the synchronous ",(0,a.jsx)(n.code,{children:"Standardizer.standardize"})," method for details."]}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Returns"}),":"]}),"\n",(0,a.jsxs)(n.p,{children:["A ",(0,a.jsx)(n.code,{children:"output_path"}),"1 object containing:"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"output_path"}),": The absolute path to the created or updated SDIF database file."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"output_path"}),"3: An optional dictionary where keys are input file paths (str)\nand values are ",(0,a.jsx)(n.code,{children:"output_path"}),"4 (Dict[str, Any]) detailing the\nconfiguration used for that specific file. None if not applicable."]}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Raises"}),":"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"output_path"}),"5 - If the method is not implemented by a subclass."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"output_path"}),"6 - If the ",(0,a.jsx)(n.code,{children:"datasource"})," (when it's a path) does not exist."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"output_path"}),"8 - If input arguments are invalid."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"output_path"}),"9 - If there are issues reading from the datasource or writing to ",(0,a.jsx)(n.code,{children:"output_path"}),"."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"datasource"}),"1 - Subclasses may raise specific exceptions related to the asynchronous\nstandardization process."]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>d});var t=s(6540);const a={},r=t.createContext(a);function i(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);