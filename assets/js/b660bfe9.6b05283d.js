"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4091],{6185:(e,s,r)=>{r.r(s),r.d(s,{assets:()=>t,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"comparators/sdif_schema_comparator","title":"SDIF Schema Comparator","description":"The SDIFSchemaComparator compares SDIF database schemas for equivalence and compatibility based on configurable rules.","source":"@site/docs/comparators/sdif_schema_comparator.md","sourceDirName":"comparators","slug":"/comparators/sdif_schema_comparator","permalink":"/satif/docs/comparators/sdif_schema_comparator","draft":false,"unlisted":false,"editUrl":"https://github.com/syncpulse-solutions/satif/tree/main/docs/docs/comparators/sdif_schema_comparator.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"CSV Comparator","permalink":"/satif/docs/comparators/csv_comparator"},"next":{"title":"Representers","permalink":"/satif/docs/representers"}}');var c=r(4848),n=r(8453);const o={sidebar_position:2},i="SDIF Schema Comparator",t={},d=[{value:"Basic Usage",id:"basic-usage",level:2},{value:"Configuration",id:"configuration",level:2},{value:"Methods",id:"methods",level:2},{value:"<code>compare(schema1, schema2, verbose_diff_level=0)</code>",id:"compareschema1-schema2-verbose_diff_level0",level:3},{value:"<code>is_compatible_with(consumer_schema, producer_schema)</code>",id:"is_compatible_withconsumer_schema-producer_schema",level:3},{value:"Usage Examples",id:"usage-examples",level:2}];function l(e){const s={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,n.R)(),...e.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)(s.header,{children:(0,c.jsx)(s.h1,{id:"sdif-schema-comparator",children:"SDIF Schema Comparator"})}),"\n",(0,c.jsxs)(s.p,{children:["The ",(0,c.jsx)(s.code,{children:"SDIFSchemaComparator"})," compares SDIF database schemas for equivalence and compatibility based on configurable rules."]}),"\n",(0,c.jsx)(s.h2,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,c.jsx)(s.pre,{children:(0,c.jsx)(s.code,{className:"language-python",children:'from satif_sdk.comparators import SDIFSchemaComparator\nfrom satif_sdk import SDIFDatabase\n\n# Get schemas from SDIF databases\ndb1 = SDIFDatabase("data1.sdif")\ndb2 = SDIFDatabase("data2.sdif")\nschema1 = db1.get_schema()\nschema2 = db2.get_schema()\n\n# Compare schemas\ncomparator = SDIFSchemaComparator()\nare_equivalent, differences = comparator.compare(schema1, schema2)\n\nprint(f"Schemas equivalent: {are_equivalent}")\nfor diff in differences:\n    print(f"- {diff}")\n'})}),"\n",(0,c.jsx)(s.h2,{id:"configuration",children:"Configuration"}),"\n",(0,c.jsxs)(s.p,{children:["Use ",(0,c.jsx)(s.code,{children:"SDIFSchemaConfig"})," to customize comparison rules:"]}),"\n",(0,c.jsx)(s.pre,{children:(0,c.jsx)(s.code,{className:"language-python",children:"from sdif_db.schema import SDIFSchemaConfig\n\nconfig = SDIFSchemaConfig(\n    ignore_table_order=True,\n    ignore_column_order=False,\n    ignore_metadata=True\n)\n\ncomparator = SDIFSchemaComparator(config=config)\n"})}),"\n",(0,c.jsx)(s.h2,{id:"methods",children:"Methods"}),"\n",(0,c.jsx)(s.h3,{id:"compareschema1-schema2-verbose_diff_level0",children:(0,c.jsx)(s.code,{children:"compare(schema1, schema2, verbose_diff_level=0)"})}),"\n",(0,c.jsx)(s.p,{children:"Compares two schemas for equivalence."}),"\n",(0,c.jsx)(s.p,{children:(0,c.jsx)(s.strong,{children:"Parameters:"})}),"\n",(0,c.jsxs)(s.ul,{children:["\n",(0,c.jsxs)(s.li,{children:[(0,c.jsx)(s.strong,{children:(0,c.jsx)(s.code,{children:"schema1"})}),", ",(0,c.jsx)(s.strong,{children:(0,c.jsx)(s.code,{children:"schema2"})}),": Schemas from ",(0,c.jsx)(s.code,{children:"SDIFDatabase.get_schema()"})]}),"\n",(0,c.jsxs)(s.li,{children:[(0,c.jsx)(s.strong,{children:(0,c.jsx)(s.code,{children:"verbose_diff_level"})}),": Detail level of differences\n",(0,c.jsxs)(s.ul,{children:["\n",(0,c.jsxs)(s.li,{children:[(0,c.jsx)(s.code,{children:"0"}),": Human-readable summary (default)"]}),"\n",(0,c.jsxs)(s.li,{children:[(0,c.jsx)(s.code,{children:"1"}),": DeepDiff dictionary"]}),"\n",(0,c.jsxs)(s.li,{children:[(0,c.jsx)(s.code,{children:"2+"}),": Full DeepDiff object"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,c.jsxs)(s.p,{children:[(0,c.jsx)(s.strong,{children:"Returns:"})," ",(0,c.jsx)(s.code,{children:"(bool, differences)"})," where differences format depends on ",(0,c.jsx)(s.code,{children:"verbose_diff_level"})]}),"\n",(0,c.jsx)(s.h3,{id:"is_compatible_withconsumer_schema-producer_schema",children:(0,c.jsx)(s.code,{children:"is_compatible_with(consumer_schema, producer_schema)"})}),"\n",(0,c.jsx)(s.p,{children:"Checks if producer schema satisfies consumer requirements (subset relationship)."}),"\n",(0,c.jsxs)(s.p,{children:[(0,c.jsx)(s.strong,{children:"Returns:"})," ",(0,c.jsx)(s.code,{children:"bool"})," - True if producer is compatible with consumer needs"]}),"\n",(0,c.jsx)(s.h2,{id:"usage-examples",children:"Usage Examples"}),"\n",(0,c.jsx)(s.p,{children:(0,c.jsx)(s.strong,{children:"Basic equivalence check:"})}),"\n",(0,c.jsx)(s.pre,{children:(0,c.jsx)(s.code,{className:"language-python",children:"are_equal, diffs = comparator.compare(schema1, schema2)\n"})}),"\n",(0,c.jsx)(s.p,{children:(0,c.jsx)(s.strong,{children:"Detailed differences:"})}),"\n",(0,c.jsx)(s.pre,{children:(0,c.jsx)(s.code,{className:"language-python",children:"are_equal, diff_dict = comparator.compare(schema1, schema2, verbose_diff_level=1)\n"})}),"\n",(0,c.jsx)(s.p,{children:(0,c.jsx)(s.strong,{children:"Compatibility check:"})}),"\n",(0,c.jsx)(s.pre,{children:(0,c.jsx)(s.code,{className:"language-python",children:"# Can producer satisfy consumer's requirements?\nis_compatible = comparator.is_compatible_with(\n    consumer_schema=required_schema,\n    producer_schema=actual_schema\n)\n"})}),"\n",(0,c.jsx)(s.p,{children:(0,c.jsx)(s.strong,{children:"Custom configuration:"})}),"\n",(0,c.jsx)(s.pre,{children:(0,c.jsx)(s.code,{className:"language-python",children:"from sdif_db.schema import SDIFSchemaConfig\n\nconfig = SDIFSchemaConfig(\n    ignore_metadata=True,\n    ignore_table_order=True\n)\ncomparator = SDIFSchemaComparator(config)\n"})})]})}function m(e={}){const{wrapper:s}={...(0,n.R)(),...e.components};return s?(0,c.jsx)(s,{...e,children:(0,c.jsx)(l,{...e})}):l(e)}},8453:(e,s,r)=>{r.d(s,{R:()=>o,x:()=>i});var a=r(6540);const c={},n=a.createContext(c);function o(e){const s=a.useContext(n);return a.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function i(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:o(e.components),a.createElement(n.Provider,{value:s},e.children)}}}]);